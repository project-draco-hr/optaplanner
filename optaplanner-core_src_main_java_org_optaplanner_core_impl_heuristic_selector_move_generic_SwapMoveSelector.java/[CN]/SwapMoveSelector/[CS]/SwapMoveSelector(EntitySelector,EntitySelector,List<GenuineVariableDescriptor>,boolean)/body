{
  this.leftEntitySelector=leftEntitySelector;
  this.rightEntitySelector=rightEntitySelector;
  this.variableDescriptorList=variableDescriptorList;
  this.randomSelection=randomSelection;
  EntityDescriptor leftEntityDescriptor=leftEntitySelector.getEntityDescriptor();
  EntityDescriptor rightEntityDescriptor=rightEntitySelector.getEntityDescriptor();
  if (!leftEntityDescriptor.getEntityClass().equals(rightEntityDescriptor.getEntityClass())) {
    throw new IllegalStateException("The selector (" + this + ") has a leftEntitySelector's entityClass ("+ leftEntityDescriptor.getEntityClass()+ ") which is not equal to the rightEntitySelector's entityClass ("+ rightEntityDescriptor.getEntityClass()+ ").");
  }
  boolean anyChained=false;
  if (variableDescriptorList.isEmpty()) {
    throw new IllegalStateException("The selector (" + this + ")'s variableDescriptors ("+ variableDescriptorList+ ") is empty.");
  }
  for (  GenuineVariableDescriptor variableDescriptor : variableDescriptorList) {
    if (!variableDescriptor.getEntityDescriptor().getEntityClass().isAssignableFrom(leftEntityDescriptor.getEntityClass())) {
      throw new IllegalStateException("The selector (" + this + ") has a variableDescriptor with a entityClass ("+ variableDescriptor.getEntityDescriptor().getEntityClass()+ ") which is not equal or a superclass to the leftEntitySelector's entityClass ("+ leftEntityDescriptor.getEntityClass()+ ").");
    }
    if (variableDescriptor.isChained()) {
      anyChained=true;
    }
  }
  this.anyChained=anyChained;
  phaseLifecycleSupport.addEventListener(leftEntitySelector);
  if (leftEntitySelector != rightEntitySelector) {
    phaseLifecycleSupport.addEventListener(rightEntitySelector);
  }
}
