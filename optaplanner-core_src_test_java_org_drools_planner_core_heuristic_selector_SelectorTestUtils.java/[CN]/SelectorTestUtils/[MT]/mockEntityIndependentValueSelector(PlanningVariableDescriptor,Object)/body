{
  EntityIndependentValueSelector valueSelector=mock(EntityIndependentValueSelector.class);
  when(valueSelector.getVariableDescriptor()).thenReturn(variableDescriptor);
  final List<Object> valueList=Arrays.<Object>asList(values);
  when(valueSelector.iterator(any())).thenAnswer(new Answer<Iterator<Object>>(){
    public Iterator<Object> answer(    InvocationOnMock invocation) throws Throwable {
      return valueList.iterator();
    }
  }
);
  when(valueSelector.iterator()).thenAnswer(new Answer<Iterator<Object>>(){
    public Iterator<Object> answer(    InvocationOnMock invocation) throws Throwable {
      return valueList.iterator();
    }
  }
);
  when(valueSelector.isContinuous()).thenReturn(false);
  when(valueSelector.isNeverEnding()).thenReturn(false);
  when(valueSelector.getSize(any())).thenReturn((long)valueList.size());
  when(valueSelector.getSize()).thenReturn((long)valueList.size());
  return valueSelector;
}
