{
  PlanningValueTabuAcceptor acceptor=new PlanningValueTabuAcceptor();
  acceptor.setTabuSize(2);
  acceptor.setAspirationEnabled(true);
  TestdataValue v0=new TestdataValue("v0");
  TestdataValue v1=new TestdataValue("v1");
  TestdataValue v2=new TestdataValue("v2");
  TestdataValue v3=new TestdataValue("v3");
  TestdataValue v4=new TestdataValue("v4");
  DefaultSolverScope solverScope=new DefaultSolverScope();
  solverScope.setBestScore(new DefaultSimpleScore(0));
  LocalSearchSolverPhaseScope solverPhaseScope=new LocalSearchSolverPhaseScope(solverScope);
  acceptor.phaseStarted(solverPhaseScope);
  LocalSearchStepScope stepScope0=new LocalSearchStepScope(solverPhaseScope);
  stepScope0.setStepIndex(0);
  MoveScope moveScope1=buildMoveScope(stepScope0,v1);
  assertEquals(true,acceptor.isAccepted(buildMoveScope(stepScope0,v0)));
  assertEquals(true,acceptor.isAccepted(moveScope1));
  assertEquals(true,acceptor.isAccepted(buildMoveScope(stepScope0,v2)));
  assertEquals(true,acceptor.isAccepted(buildMoveScope(stepScope0,v3)));
  assertEquals(true,acceptor.isAccepted(buildMoveScope(stepScope0,v4)));
  assertEquals(true,acceptor.isAccepted(buildMoveScope(stepScope0,v2)));
  stepScope0.setStep(moveScope1.getMove());
  acceptor.stepEnded(stepScope0);
  LocalSearchStepScope stepScope1=new LocalSearchStepScope(solverPhaseScope);
  stepScope1.setStepIndex(1);
  MoveScope moveScope2=buildMoveScope(stepScope1,v2);
  assertEquals(true,acceptor.isAccepted(buildMoveScope(stepScope1,v0)));
  assertEquals(false,acceptor.isAccepted(buildMoveScope(stepScope1,v1)));
  assertEquals(true,acceptor.isAccepted(moveScope2));
  assertEquals(true,acceptor.isAccepted(buildMoveScope(stepScope1,v3)));
  assertEquals(true,acceptor.isAccepted(buildMoveScope(stepScope1,v4)));
  assertEquals(true,acceptor.isAccepted(buildMoveScope(stepScope1,v2)));
  stepScope1.setStep(moveScope2.getMove());
  acceptor.stepEnded(stepScope1);
  LocalSearchStepScope stepScope2=new LocalSearchStepScope(solverPhaseScope);
  stepScope2.setStepIndex(2);
  MoveScope moveScope4=buildMoveScope(stepScope2,v4);
  assertEquals(true,acceptor.isAccepted(buildMoveScope(stepScope2,v0)));
  assertEquals(false,acceptor.isAccepted(buildMoveScope(stepScope2,v1)));
  assertEquals(false,acceptor.isAccepted(buildMoveScope(stepScope2,v2)));
  assertEquals(true,acceptor.isAccepted(buildMoveScope(stepScope2,v3)));
  assertEquals(true,acceptor.isAccepted(moveScope4));
  assertEquals(false,acceptor.isAccepted(buildMoveScope(stepScope2,v2)));
  stepScope2.setStep(moveScope4.getMove());
  acceptor.stepEnded(stepScope2);
  LocalSearchStepScope stepScope3=new LocalSearchStepScope(solverPhaseScope);
  stepScope3.setStepIndex(3);
  MoveScope moveScope3=buildMoveScope(stepScope3,v3);
  assertEquals(true,acceptor.isAccepted(buildMoveScope(stepScope3,v0)));
  assertEquals(true,acceptor.isAccepted(buildMoveScope(stepScope3,v1)));
  assertEquals(false,acceptor.isAccepted(buildMoveScope(stepScope3,v2)));
  assertEquals(true,acceptor.isAccepted(moveScope3));
  assertEquals(false,acceptor.isAccepted(buildMoveScope(stepScope3,v4)));
  assertEquals(false,acceptor.isAccepted(buildMoveScope(stepScope3,v2)));
  stepScope3.setStep(moveScope3.getMove());
  acceptor.stepEnded(stepScope3);
  LocalSearchStepScope stepScope4=new LocalSearchStepScope(solverPhaseScope);
  stepScope4.setStepIndex(4);
  MoveScope moveScope1Again=buildMoveScope(stepScope4,v1);
  assertEquals(true,acceptor.isAccepted(buildMoveScope(stepScope4,v0)));
  assertEquals(true,acceptor.isAccepted(moveScope1Again));
  assertEquals(true,acceptor.isAccepted(buildMoveScope(stepScope4,v2)));
  assertEquals(false,acceptor.isAccepted(buildMoveScope(stepScope4,v3)));
  assertEquals(false,acceptor.isAccepted(buildMoveScope(stepScope4,v4)));
  assertEquals(true,acceptor.isAccepted(buildMoveScope(stepScope4,v2)));
  stepScope4.setStep(moveScope1Again.getMove());
  acceptor.stepEnded(stepScope4);
  acceptor.phaseEnded(solverPhaseScope);
}
