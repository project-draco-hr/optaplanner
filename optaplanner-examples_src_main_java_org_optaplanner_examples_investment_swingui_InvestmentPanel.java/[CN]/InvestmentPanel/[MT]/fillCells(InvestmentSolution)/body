{
  List<AssetClass> assetClassList=solution.getAssetClassList();
  assetClassPanel.addCornerHeader(HEADER_COLUMN,HEADER_ROW,createTableHeader(new JLabel("Asset class"),null));
  assetClassPanel.addCornerHeader(HEADER_COLUMN_EXTRA_PROPERTY_1,HEADER_ROW,createTableHeader(new JLabel("Region"),null));
  assetClassPanel.addCornerHeader(HEADER_COLUMN_EXTRA_PROPERTY_2,HEADER_ROW,createTableHeader(new JLabel("Sector"),null));
  assetClassPanel.addCornerHeader(HEADER_COLUMN_EXTRA_PROPERTY_3,HEADER_ROW,createTableHeader(new JLabel("Expected return"),null));
  assetClassPanel.addCornerHeader(HEADER_COLUMN_EXTRA_PROPERTY_4,HEADER_ROW,createTableHeader(new JLabel("Standard deviation risk"),null));
  JLabel quantityHeaderLabel=new JLabel("Quantity");
  quantityHeaderLabel.setForeground(TangoColorFactory.ORANGE_3);
  assetClassPanel.addCornerHeader(HEADER_COLUMN_EXTRA_PROPERTY_5,HEADER_ROW,createTableHeader(quantityHeaderLabel,null));
  assetClassPanel.addColumnHeader(assetClassList.get(0),HEADER_ROW_GROUP1,assetClassList.get(assetClassList.size() - 1),HEADER_ROW_GROUP1,createTableHeader(new JLabel("Correlation"),null));
  for (  AssetClass assetClass : assetClassList) {
    assetClassPanel.addColumnHeader(assetClass,HEADER_ROW,createTableHeader(new JLabel(assetClass.getName(),SwingConstants.CENTER),"Expected return: " + assetClass.getExpectedReturnLabel() + " - Standard deviation risk: "+ assetClass.getStandardDeviationRiskLabel()));
  }
  for (  AssetClass assetClass : assetClassList) {
    assetClassPanel.addRowHeader(HEADER_COLUMN,assetClass,createTableHeader(new JLabel(assetClass.getName(),SwingConstants.LEFT),"Expected return: " + assetClass.getExpectedReturnLabel() + " - Standard deviation risk: "+ assetClass.getStandardDeviationRiskLabel()));
  }
  for (  AssetClass a : assetClassList) {
    for (    AssetClass b : assetClassList) {
      assetClassPanel.addCell(a,b,new JLabel(a.getCorrelationLabel(b),SwingConstants.RIGHT));
    }
  }
  assetClassPanel.addCornerHeader(HEADER_COLUMN,TRAILING_HEADER_ROW,createTableHeader(new JLabel("Total"),null));
  long quantityTotalMillis=0L;
  for (  AssetClassAllocation allocation : solution.getAssetClassAllocationList()) {
    if (allocation.getQuantityMillis() != null) {
      quantityTotalMillis+=allocation.getQuantityMillis();
    }
    assetClassPanel.addRowHeader(HEADER_COLUMN_EXTRA_PROPERTY_1,allocation.getAssetClass(),new JLabel(allocation.getAssetClass().getRegion().getName()));
    assetClassPanel.addRowHeader(HEADER_COLUMN_EXTRA_PROPERTY_2,allocation.getAssetClass(),new JLabel(allocation.getAssetClass().getSector().getName()));
    assetClassPanel.addRowHeader(HEADER_COLUMN_EXTRA_PROPERTY_3,allocation.getAssetClass(),new JLabel(allocation.getAssetClass().getExpectedReturnLabel(),SwingConstants.RIGHT));
    assetClassPanel.addRowHeader(HEADER_COLUMN_EXTRA_PROPERTY_4,allocation.getAssetClass(),new JLabel(allocation.getAssetClass().getStandardDeviationRiskLabel(),SwingConstants.RIGHT));
    JLabel quantityLabel=new JLabel(allocation.getQuantityLabel(),SwingConstants.RIGHT);
    quantityLabel.setForeground(TangoColorFactory.ORANGE_3);
    assetClassPanel.addRowHeader(HEADER_COLUMN_EXTRA_PROPERTY_5,allocation.getAssetClass(),quantityLabel);
  }
  JLabel expectedReturnLabel=new JLabel(InvestmentNumericUtil.formatMicrosAsPercentage(solution.calculateExpectedReturnMicros()),SwingConstants.RIGHT);
  assetClassPanel.addCornerHeader(HEADER_COLUMN_EXTRA_PROPERTY_3,TRAILING_HEADER_ROW,expectedReturnLabel);
  long standardDeviationMicros=solution.calculateStandardDeviationMicros();
  JLabel standardDeviationLabel=new JLabel(InvestmentNumericUtil.formatMicrosAsPercentage(standardDeviationMicros),SwingConstants.RIGHT);
  if (standardDeviationMicros > solution.getParametrization().getStandardDeviationMillisMaximum() * 1000L) {
    standardDeviationLabel.setForeground(TangoColorFactory.SCARLET_3);
  }
  assetClassPanel.addCornerHeader(HEADER_COLUMN_EXTRA_PROPERTY_4,TRAILING_HEADER_ROW,standardDeviationLabel);
  JLabel quantityTotalLabel=new JLabel(InvestmentNumericUtil.formatMillisAsPercentage(quantityTotalMillis),SwingConstants.RIGHT);
  quantityTotalLabel.setForeground(TangoColorFactory.ORANGE_3);
  assetClassPanel.addCornerHeader(HEADER_COLUMN_EXTRA_PROPERTY_5,TRAILING_HEADER_ROW,quantityTotalLabel);
  regionPanel.addCornerHeader(HEADER_COLUMN,HEADER_ROW,createTableHeader(new JLabel("Region"),null));
  regionPanel.addCornerHeader(HEADER_COLUMN_EXTRA_PROPERTY_1,HEADER_ROW,createTableHeader(new JLabel("Quantity total"),null));
  regionPanel.addCornerHeader(HEADER_COLUMN_EXTRA_PROPERTY_2,HEADER_ROW,createTableHeader(new JLabel("Quantity maximum"),null));
  Map<Region,Long> regionTotalMap=solution.calculateRegionQuantityMillisTotalMap();
  for (  final Region region : solution.getRegionList()) {
    regionPanel.addRowHeader(HEADER_COLUMN,region,new JLabel(region.getName()));
    long total=regionTotalMap.get(region);
    JLabel totalLabel=new JLabel(InvestmentNumericUtil.formatMillisAsPercentage(total),SwingConstants.RIGHT);
    if (total > region.getQuantityMillisMaximum()) {
      totalLabel.setForeground(TangoColorFactory.SCARLET_3);
    }
    regionPanel.addRowHeader(HEADER_COLUMN_EXTRA_PROPERTY_1,region,totalLabel);
    final JSpinner maximumField=new JSpinner(new SpinnerNumberModel((double)region.getQuantityMillisMaximum() / 1000.0,0.0,1.0,0.010));
    maximumField.setEditor(new JSpinner.NumberEditor(maximumField,InvestmentNumericUtil.MILLIS_PERCENT_PATTERN));
    regionPanel.addRowHeader(HEADER_COLUMN_EXTRA_PROPERTY_2,region,maximumField);
    maximumField.addChangeListener(new ChangeListener(){
      @Override public void stateChanged(      ChangeEvent e){
        if (ignoreChangeEvents) {
          return;
        }
        long quantityMillisMaximum=(long)(((Number)maximumField.getValue()).doubleValue() * 1000.0);
        changeRegionQuantityMillisMaximum(region,quantityMillisMaximum);
      }
    }
);
  }
  sectorPanel.addCornerHeader(HEADER_COLUMN,HEADER_ROW,createTableHeader(new JLabel("Sector"),null));
  sectorPanel.addCornerHeader(HEADER_COLUMN_EXTRA_PROPERTY_1,HEADER_ROW,createTableHeader(new JLabel("Quantity total"),null));
  sectorPanel.addCornerHeader(HEADER_COLUMN_EXTRA_PROPERTY_2,HEADER_ROW,createTableHeader(new JLabel("Quantity maximum"),null));
  Map<Sector,Long> sectorTotalMap=solution.calculateSectorQuantityMillisTotalMap();
  for (  final Sector sector : solution.getSectorList()) {
    sectorPanel.addRowHeader(HEADER_COLUMN,sector,new JLabel(sector.getName()));
    long total=sectorTotalMap.get(sector);
    JLabel totalLabel=new JLabel(InvestmentNumericUtil.formatMillisAsPercentage(total),SwingConstants.RIGHT);
    if (total > sector.getQuantityMillisMaximum()) {
      totalLabel.setForeground(TangoColorFactory.SCARLET_3);
    }
    sectorPanel.addRowHeader(HEADER_COLUMN_EXTRA_PROPERTY_1,sector,totalLabel);
    final JSpinner maximumField=new JSpinner(new SpinnerNumberModel((double)sector.getQuantityMillisMaximum() / 1000.0,0.0,1.0,0.010));
    maximumField.setEditor(new JSpinner.NumberEditor(maximumField,InvestmentNumericUtil.MILLIS_PERCENT_PATTERN));
    sectorPanel.addRowHeader(HEADER_COLUMN_EXTRA_PROPERTY_2,sector,maximumField);
    maximumField.addChangeListener(new ChangeListener(){
      @Override public void stateChanged(      ChangeEvent e){
        if (ignoreChangeEvents) {
          return;
        }
        long quantityMillisMaximum=(long)(((Number)maximumField.getValue()).doubleValue() * 1000.0);
        changeSectorQuantityMillisMaximum(sector,quantityMillisMaximum);
      }
    }
);
  }
}
