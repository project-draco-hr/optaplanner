{
  List<Object> workingPlanningEntityList=phaseScope.getWorkingPlanningEntityList();
  for (Iterator<Object> it=workingPlanningEntityList.iterator(); it.hasNext(); ) {
    Object planningEntity=it.next();
    if (!planningEntityDescriptor.getPlanningEntityClass().isInstance(planningEntity)) {
      it.remove();
    }
 else     if (planningEntityDescriptor.isInitialized(planningEntity)) {
      if (resetInitializedPlanningEntities) {
        ScoreDirector scoreDirector=phaseScope.getScoreDirector();
        scoreDirector.beforeEntityRemoved(planningEntity);
        planningEntityDescriptor.uninitialize(planningEntity);
        scoreDirector.afterEntityRemoved(planningEntity);
      }
 else {
        it.remove();
      }
    }
  }
switch (selectionOrder) {
case ORIGINAL:
    break;
case RANDOM:
  Collections.shuffle(workingPlanningEntityList,phaseScope.getWorkingRandom());
break;
case DECREASING_DIFFICULTY:
PlanningEntitySorter planningEntitySorter=planningEntityDescriptor.getPlanningEntitySorter();
planningEntitySorter.sortDifficultyDescending(phaseScope.getWorkingSolution(),workingPlanningEntityList);
break;
default :
throw new IllegalStateException("The selectionOrder (" + selectionOrder + ") is not implemented");
}
selectedPlanningEntityList=workingPlanningEntityList;
}
