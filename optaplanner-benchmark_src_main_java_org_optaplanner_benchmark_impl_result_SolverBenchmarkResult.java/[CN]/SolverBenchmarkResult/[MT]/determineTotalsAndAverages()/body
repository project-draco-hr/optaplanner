{
  failureCount=0;
  boolean firstNonFailure=true;
  totalScore=null;
  totalWinningScoreDifference=null;
  ScoreDifferencePercentage totalWorstScoreDifferencePercentage=null;
  long totalAverageCalculateCountPerSecond=0L;
  long totalTimeMillisSpent=0L;
  uninitializedSolutionCount=0;
  totalUninitializedVariableCount=0;
  infeasibleScoreCount=0;
  for (  SingleBenchmarkResult singleBenchmarkResult : singleBenchmarkResultList) {
    if (singleBenchmarkResult.isFailure()) {
      failureCount++;
    }
 else {
      if (!singleBenchmarkResult.isInitialized()) {
        uninitializedSolutionCount++;
        totalUninitializedVariableCount+=singleBenchmarkResult.getAverageUninitializedVariableCount();
      }
 else       if (!singleBenchmarkResult.isScoreFeasible()) {
        infeasibleScoreCount++;
      }
      if (firstNonFailure) {
        totalScore=singleBenchmarkResult.getAverageScore();
        totalWinningScoreDifference=singleBenchmarkResult.getWinningScoreDifference();
        totalWorstScoreDifferencePercentage=singleBenchmarkResult.getWorstScoreDifferencePercentage();
        totalAverageCalculateCountPerSecond=singleBenchmarkResult.getAverageCalculateCountPerSecond();
        totalTimeMillisSpent=singleBenchmarkResult.getTimeMillisSpent();
        firstNonFailure=false;
      }
 else {
        totalScore=totalScore.add(singleBenchmarkResult.getAverageScore());
        totalWinningScoreDifference=totalWinningScoreDifference.add(singleBenchmarkResult.getWinningScoreDifference());
        totalWorstScoreDifferencePercentage=totalWorstScoreDifferencePercentage.add(singleBenchmarkResult.getWorstScoreDifferencePercentage());
        totalAverageCalculateCountPerSecond+=singleBenchmarkResult.getAverageCalculateCountPerSecond();
        totalTimeMillisSpent+=singleBenchmarkResult.getTimeMillisSpent();
      }
    }
  }
  if (!firstNonFailure) {
    int successCount=getSuccessCount();
    averageScore=totalScore.divide(successCount);
    averageWorstScoreDifferencePercentage=totalWorstScoreDifferencePercentage.divide((double)successCount);
    averageAverageCalculateCountPerSecond=totalAverageCalculateCountPerSecond / (long)successCount;
    averageTimeMillisSpent=totalTimeMillisSpent / (long)successCount;
  }
}
