{
  EntityIndependentValueSelector childValueSelector=SelectorTestUtils.mockEntityIndependentValueSelector(TestdataEntity.class,"value",new TestdataValue("v1"),new TestdataValue("v2"),new TestdataValue("v3"));
  MimicRecordingValueSelector recordingValueSelector=new MimicRecordingValueSelector(childValueSelector);
  MimicReplayingValueSelector replayingValueSelector=new MimicReplayingValueSelector(recordingValueSelector);
  DefaultSolverScope solverScope=mock(DefaultSolverScope.class);
  recordingValueSelector.solvingStarted(solverScope);
  replayingValueSelector.solvingStarted(solverScope);
  AbstractPhaseScope phaseScopeA=mock(AbstractPhaseScope.class);
  when(phaseScopeA.getSolverScope()).thenReturn(solverScope);
  recordingValueSelector.phaseStarted(phaseScopeA);
  replayingValueSelector.phaseStarted(phaseScopeA);
  AbstractStepScope stepScopeA1=mock(AbstractStepScope.class);
  when(stepScopeA1.getPhaseScope()).thenReturn(phaseScopeA);
  recordingValueSelector.stepStarted(stepScopeA1);
  replayingValueSelector.stepStarted(stepScopeA1);
  runOriginalAsserts(recordingValueSelector,replayingValueSelector);
  recordingValueSelector.stepEnded(stepScopeA1);
  replayingValueSelector.stepEnded(stepScopeA1);
  AbstractStepScope stepScopeA2=mock(AbstractStepScope.class);
  when(stepScopeA2.getPhaseScope()).thenReturn(phaseScopeA);
  recordingValueSelector.stepStarted(stepScopeA2);
  replayingValueSelector.stepStarted(stepScopeA2);
  runOriginalAsserts(recordingValueSelector,replayingValueSelector);
  recordingValueSelector.stepEnded(stepScopeA2);
  replayingValueSelector.stepEnded(stepScopeA2);
  recordingValueSelector.phaseEnded(phaseScopeA);
  replayingValueSelector.phaseEnded(phaseScopeA);
  AbstractPhaseScope phaseScopeB=mock(AbstractPhaseScope.class);
  when(phaseScopeB.getSolverScope()).thenReturn(solverScope);
  recordingValueSelector.phaseStarted(phaseScopeB);
  replayingValueSelector.phaseStarted(phaseScopeB);
  AbstractStepScope stepScopeB1=mock(AbstractStepScope.class);
  when(stepScopeB1.getPhaseScope()).thenReturn(phaseScopeB);
  recordingValueSelector.stepStarted(stepScopeB1);
  replayingValueSelector.stepStarted(stepScopeB1);
  runOriginalAsserts(recordingValueSelector,replayingValueSelector);
  recordingValueSelector.stepEnded(stepScopeB1);
  replayingValueSelector.stepEnded(stepScopeB1);
  recordingValueSelector.phaseEnded(phaseScopeB);
  replayingValueSelector.phaseEnded(phaseScopeB);
  recordingValueSelector.solvingEnded(solverScope);
  replayingValueSelector.solvingEnded(solverScope);
  verifyPhaseLifecycle(childValueSelector,1,2,3);
  verify(childValueSelector,times(3)).iterator();
}
