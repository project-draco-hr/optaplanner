{
  patientAdmissionSchedule=new PatientAdmissionSchedule();
  patientAdmissionSchedule.setId(0L);
  readSizes();
  readEmptyLine();
  readEmptyLine();
  readSpecialismList();
  readEmptyLine();
  readDepartmentListAndDepartmentSpecialismList();
  readEmptyLine();
  readEquipmentList();
  readEmptyLine();
  readRoomListAndRoomSpecialismListAndRoomEquipmentList();
  readEmptyLine();
  readBedList();
  readEmptyLine();
  generateNightList();
  readPatientListAndAdmissionPartListAndRequiredPatientEquipmentListAndPreferredPatientEquipmentList();
  readEmptyLine();
  readConstantLine("END.");
  createBedDesignationList();
  logger.info("PatientAdmissionSchedule with {} specialisms, {} equipments, {} departments, {} rooms, " + "{} beds, {} nights, {} patients and {} admissions.",new Object[]{patientAdmissionSchedule.getSpecialismList().size(),patientAdmissionSchedule.getEquipmentList().size(),patientAdmissionSchedule.getDepartmentList().size(),patientAdmissionSchedule.getRoomList().size(),patientAdmissionSchedule.getBedList().size(),patientAdmissionSchedule.getNightList().size(),patientAdmissionSchedule.getPatientList().size(),patientAdmissionSchedule.getAdmissionPartList().size()});
  BigInteger possibleSolutionSize=BigInteger.valueOf(patientAdmissionSchedule.getBedList().size()).pow(patientAdmissionSchedule.getAdmissionPartList().size());
  String flooredPossibleSolutionSize="10^" + (possibleSolutionSize.toString().length() - 1);
  logger.info("PatientAdmissionSchedule with flooredPossibleSolutionSize ({}) and possibleSolutionSize({}).",flooredPossibleSolutionSize,possibleSolutionSize);
  return patientAdmissionSchedule;
}
