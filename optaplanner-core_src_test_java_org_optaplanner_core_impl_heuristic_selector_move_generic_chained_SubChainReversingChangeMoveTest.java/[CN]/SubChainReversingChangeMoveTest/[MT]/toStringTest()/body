{
  TestdataChainedAnchor a0=new TestdataChainedAnchor("a0");
  TestdataChainedEntity a1=new TestdataChainedEntity("a1",a0);
  TestdataChainedEntity a2=new TestdataChainedEntity("a2",a1);
  TestdataChainedEntity a3=new TestdataChainedEntity("a3",a2);
  TestdataChainedEntity a4=new TestdataChainedEntity("a4",a3);
  TestdataChainedEntity a5=new TestdataChainedEntity("a5",a4);
  TestdataChainedAnchor b0=new TestdataChainedAnchor("b0");
  TestdataChainedEntity b1=new TestdataChainedEntity("b1",b0);
  TestdataChainedEntity b2=new TestdataChainedEntity("b2",b1);
  TestdataChainedEntity b3=new TestdataChainedEntity("b3",b2);
  GenuineVariableDescriptor variableDescriptor=TestdataChainedEntity.buildVariableDescriptorForChainedObject();
  SingletonInverseVariableSupply inverseVariableSupply=SelectorTestUtils.mockSingletonInverseVariableSupply(new TestdataChainedEntity[]{a1,a2,a3,a4,a5,b1,b2,b3});
  assertEquals("[a2..a4] {a1 -reversing-> b0}",new SubChainReversingChangeMove(new SubChain(Arrays.<Object>asList(a2,a3,a4)),variableDescriptor,inverseVariableSupply,b0).toString());
  assertEquals("[a1..a5] {a0 -reversing-> b3}",new SubChainReversingChangeMove(new SubChain(Arrays.<Object>asList(a1,a2,a3,a4,a5)),variableDescriptor,inverseVariableSupply,b3).toString());
  assertEquals("[a1..a3] {a0 -reversing-> a5}",new SubChainReversingChangeMove(new SubChain(Arrays.<Object>asList(a1,a2,a3)),variableDescriptor,inverseVariableSupply,a5).toString());
  assertEquals("[a3..a3] {a2 -reversing-> b2}",new SubChainReversingChangeMove(new SubChain(Arrays.<Object>asList(a3)),variableDescriptor,inverseVariableSupply,b2).toString());
}
