{
  GenuineVariableDescriptor variableDescriptor=TestdataChainedEntity.buildVariableDescriptorForChainedObject();
  InnerScoreDirector scoreDirector=mock(InnerScoreDirector.class);
  TestdataChainedAnchor a0=new TestdataChainedAnchor("a0");
  TestdataChainedEntity a1=new TestdataChainedEntity("a1",a0);
  TestdataChainedEntity a2=new TestdataChainedEntity("a2",a1);
  TestdataChainedEntity a3=new TestdataChainedEntity("a3",a2);
  TestdataChainedEntity a4=new TestdataChainedEntity("a4",a3);
  TestdataChainedEntity a5=new TestdataChainedEntity("a5",a4);
  SelectorTestUtils.mockMethodGetTrailingEntity(scoreDirector,variableDescriptor,new TestdataChainedEntity[]{a1,a2,a3,a4,a5});
  SubChainReversingChangeMove move=new SubChainReversingChangeMove(new SubChain(Arrays.<Object>asList(a2,a3,a4)),variableDescriptor,a1);
  Move undoMove=move.createUndoMove(scoreDirector);
  move.doMove(scoreDirector);
  SelectorTestUtils.assertChain(a0,a1,a4,a3,a2,a5);
  verify(scoreDirector,atLeast(1)).beforeVariableChanged(variableDescriptor,a5);
  verify(scoreDirector,atLeast(1)).afterVariableChanged(variableDescriptor,a5);
  verify(scoreDirector).beforeVariableChanged(variableDescriptor,a4);
  verify(scoreDirector).afterVariableChanged(variableDescriptor,a4);
  verify(scoreDirector).beforeVariableChanged(variableDescriptor,a3);
  verify(scoreDirector).afterVariableChanged(variableDescriptor,a3);
  verify(scoreDirector).beforeVariableChanged(variableDescriptor,a2);
  verify(scoreDirector).afterVariableChanged(variableDescriptor,a2);
  undoMove.doMove(scoreDirector);
  SelectorTestUtils.assertChain(a0,a1,a2,a3,a4,a5);
}
