{
  GenuineVariableDescriptor variableDescriptor=TestdataChainedEntity.buildVariableDescriptorForChainedObject();
  InnerScoreDirector scoreDirector=PlannerTestUtils.mockScoreDirector(variableDescriptor.getEntityDescriptor().getSolutionDescriptor());
  TestdataChainedAnchor a0=new TestdataChainedAnchor("a0");
  TestdataChainedEntity a1=new TestdataChainedEntity("a1",a0);
  TestdataChainedEntity a2=new TestdataChainedEntity("a2",a1);
  TestdataChainedEntity a3=new TestdataChainedEntity("a3",a2);
  TestdataChainedEntity a4=new TestdataChainedEntity("a4",a3);
  TestdataChainedEntity a5=new TestdataChainedEntity("a5",a4);
  SingletonInverseVariableSupply inverseVariableSupply=SelectorTestUtils.mockSingletonInverseVariableSupply(new TestdataChainedEntity[]{a1,a2,a3,a4,a5});
  SubChainReversingChangeMove move=new SubChainReversingChangeMove(new SubChain(Arrays.<Object>asList(a1,a2,a3)),variableDescriptor,inverseVariableSupply,a4);
  Move undoMove=move.createUndoMove(scoreDirector);
  move.doMove(scoreDirector);
  SelectorTestUtils.assertChain(a0,a4,a3,a2,a1,a5);
  verify(scoreDirector).changeVariableFacade(variableDescriptor,a4,a0);
  verify(scoreDirector).changeVariableFacade(variableDescriptor,a3,a4);
  verify(scoreDirector).changeVariableFacade(variableDescriptor,a2,a3);
  verify(scoreDirector).changeVariableFacade(variableDescriptor,a1,a2);
  verify(scoreDirector).changeVariableFacade(variableDescriptor,a5,a1);
  undoMove.doMove(scoreDirector);
  SelectorTestUtils.assertChain(a0,a1,a2,a3,a4,a5);
}
