{
  this.valueSelector=valueSelector;
  this.randomSelection=randomSelection;
  if (!valueSelector.getVariableDescriptor().isChained()) {
    throw new IllegalArgumentException("The selector (" + this + ")'s valueSelector ("+ valueSelector+ ") must have a chained variableDescriptor chained ("+ valueSelector.getVariableDescriptor().isChained()+ ").");
  }
  if (valueSelector.isNeverEnding()) {
    throw new IllegalStateException("The selector (" + this + ") has a valueSelector ("+ valueSelector+ ") with neverEnding ("+ valueSelector.isNeverEnding()+ ").");
  }
  solverPhaseLifecycleSupport.addEventListener(valueSelector);
  solverPhaseLifecycleSupport.addEventListener(new SelectionCacheLifecycleBridge(CACHE_TYPE,this));
  this.minimumSubChainSize=minimumSubChainSize;
  this.maximumSubChainSize=maximumSubChainSize;
  if (minimumSubChainSize < 1) {
    throw new IllegalStateException("The selector (" + this + ")'s minimumSubChainSize ("+ minimumSubChainSize+ ") must be at least 1.");
  }
  if (minimumSubChainSize > maximumSubChainSize) {
    throw new IllegalStateException("The minimumSubChainSize (" + minimumSubChainSize + ") must be at least maximumSubChainSize ("+ maximumSubChainSize+ ").");
  }
}
