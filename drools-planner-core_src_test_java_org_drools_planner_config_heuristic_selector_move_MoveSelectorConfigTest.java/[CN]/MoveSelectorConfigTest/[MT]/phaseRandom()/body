{
  SolutionDescriptor solutionDescriptor=SelectorTestUtils.mockSolutionDescriptor();
  final MoveSelector baseMoveSelector=SelectorTestUtils.mockMoveSelector(DummyMove.class);
  MoveSelectorConfig moveSelectorConfig=new MoveSelectorConfig(){
    @Override protected MoveSelector buildBaseMoveSelector(    EnvironmentMode environmentMode,    SolutionDescriptor solutionDescriptor,    SelectionCacheType minimumCacheType,    SelectionOrder resolvedSelectionOrder){
      assertEquals(SelectionCacheType.PHASE,minimumCacheType);
      assertEquals(SelectionOrder.ORIGINAL,resolvedSelectionOrder);
      return baseMoveSelector;
    }
  }
;
  moveSelectorConfig.setCacheType(SelectionCacheType.PHASE);
  moveSelectorConfig.setSelectionOrder(SelectionOrder.RANDOM);
  MoveSelector moveSelector=moveSelectorConfig.buildMoveSelector(EnvironmentMode.REPRODUCIBLE,solutionDescriptor,SelectionCacheType.JUST_IN_TIME,SelectionOrder.RANDOM);
  assertInstanceOf(CachingMoveSelector.class,moveSelector);
  assertNotInstanceOf(ShufflingMoveSelector.class,moveSelector);
  assertSame(baseMoveSelector,((CachingMoveSelector)moveSelector).getChildMoveSelector());
}
