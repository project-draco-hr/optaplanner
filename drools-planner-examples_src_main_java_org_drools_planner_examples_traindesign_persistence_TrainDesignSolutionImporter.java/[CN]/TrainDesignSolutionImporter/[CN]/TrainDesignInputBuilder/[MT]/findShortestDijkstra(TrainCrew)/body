{
  int railNodeSize=trainDesign.getRailNodeList().size();
  RailNode start=trainCrew.getHome();
  RailNode finish=trainCrew.getAway();
  Map<RailNode,Dijkstra> dijkstraMap=new HashMap<RailNode,Dijkstra>(railNodeSize);
  List<Dijkstra> unvisitedDijkstraList=new ArrayList<Dijkstra>(railNodeSize);
  Dijkstra startDijkstra=new Dijkstra(start);
  startDijkstra.setShortestDistance(0);
  startDijkstra.resetRailPath();
  startDijkstra.addRailPath(new ArrayList<RailArc>(0));
  dijkstraMap.put(start,startDijkstra);
  unvisitedDijkstraList.add(startDijkstra);
  while (!unvisitedDijkstraList.isEmpty()) {
    Dijkstra campingDijkstra=unvisitedDijkstraList.remove(0);
    if (campingDijkstra.isVisited()) {
      throw new IllegalStateException("Bug in Dijkstra algorithm.");
    }
    campingDijkstra.setVisited(true);
    if (campingDijkstra.getRailNode().equals(finish)) {
      return campingDijkstra;
    }
    for (    RailArc nextRailArc : campingDijkstra.getRailNode().getOriginatingRailArcList()) {
      RailNode nextNode=nextRailArc.getDestination();
      int nextDistance=campingDijkstra.getShortestDistance() + nextRailArc.getDistance();
      Dijkstra dijkstra=dijkstraMap.get(nextNode);
      if (dijkstra == null) {
        dijkstra=new Dijkstra(nextNode);
        dijkstra.setShortestDistance(Integer.MAX_VALUE);
        dijkstraMap.put(nextNode,dijkstra);
        unvisitedDijkstraList.add(dijkstra);
      }
      if (nextDistance <= dijkstra.getShortestDistance()) {
        if (dijkstra.isVisited()) {
          throw new IllegalStateException("Bug in Dijkstra algorithm.");
        }
        if (nextDistance < dijkstra.getShortestDistance()) {
          dijkstra.setShortestDistance(nextDistance);
          dijkstra.resetRailPath();
        }
        for (        List<RailArc> campingRailPath : campingDijkstra.getRailPathList()) {
          List<RailArc> nextRailPath=new ArrayList<RailArc>(campingRailPath);
          nextRailPath.add(nextRailArc);
          dijkstra.addRailPath(nextRailPath);
        }
      }
    }
    Collections.sort(unvisitedDijkstraList);
  }
  throw new IllegalArgumentException("The TrainCrew (" + trainCrew + ") has no valid railPath.");
}
