{
  List<Employee> employeeList=nurseRoster.getEmployeeList();
  WorkingMemory workingMemory=solutionDirector.getWorkingMemory();
  List<ShiftAssignment> shiftAssignmentList=createAssignmentList(nurseRoster);
  for (  ShiftAssignment shiftAssignment : shiftAssignmentList) {
    FactHandle assignmentHandle=null;
    Score bestScore=DefaultHardAndSoftScore.valueOf(Integer.MIN_VALUE,Integer.MIN_VALUE);
    Employee bestEmployee=null;
    for (    Employee employee : employeeList) {
      shiftAssignment.setEmployee(employee);
      if (assignmentHandle == null) {
        assignmentHandle=workingMemory.insert(shiftAssignment);
      }
 else {
        workingMemory.update(assignmentHandle,shiftAssignment);
      }
      Score score=solutionDirector.calculateScoreFromWorkingMemory();
      if (score.compareTo(bestScore) > 0) {
        bestScore=score;
        bestEmployee=employee;
      }
    }
    if (bestEmployee == null) {
      throw new IllegalStateException("The bestEmployee (" + bestEmployee + ") cannot be null.");
    }
    shiftAssignment.setEmployee(bestEmployee);
    workingMemory.update(assignmentHandle,shiftAssignment);
    logger.debug("    ShiftAssignment ({}) initialized.",shiftAssignment);
  }
  Collections.sort(shiftAssignmentList,new PersistableIdComparator());
  nurseRoster.setShiftAssignmentList(shiftAssignmentList);
}
