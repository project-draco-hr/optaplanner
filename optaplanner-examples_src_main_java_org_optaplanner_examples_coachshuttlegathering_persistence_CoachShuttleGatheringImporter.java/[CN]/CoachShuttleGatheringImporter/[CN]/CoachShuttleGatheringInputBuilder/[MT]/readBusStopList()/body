{
  List<BusStop> busStopList=new ArrayList<BusStop>();
  bufferedReader.readLine();
  for (String line=bufferedReader.readLine(); line != null; line=bufferedReader.readLine()) {
    if (line.isEmpty()) {
      continue;
    }
    String[] lineTokens=splitBySemicolonSeparatedValue(line,8);
    String busStopType=lineTokens[0];
    String name=lineTokens[1];
    if (busStopType.equalsIgnoreCase("HUB")) {
      if (solution.getHub() != null) {
        throw new IllegalArgumentException("The hub with name (" + name + ") is not the only hub ("+ solution.getHub().getName()+ ").");
      }
      BusHub hub=new BusHub();
      hub.setId(busOrStopOrHubId);
      busOrStopOrHubId++;
      hub.setName(name);
      double latitude=Double.parseDouble(lineTokens[4]);
      double longitude=Double.parseDouble(lineTokens[5]);
      RoadLocation location=latLongToLocationMap.get(Arrays.asList(latitude,longitude));
      if (location == null) {
        throw new IllegalArgumentException("The bus stop with name (" + name + ") has a coordinate ("+ latitude+ ", "+ longitude+ ") which is not in the coordinates file.");
      }
      hub.setLocation(location);
      int passengerQuantity=Integer.parseInt(lineTokens[6]);
      if (passengerQuantity != 0) {
        throw new IllegalArgumentException("The hub with name (" + name + ") has an unsupported passengerQuantity ("+ passengerQuantity+ ").");
      }
      int transportTimeLimit=Integer.parseInt(lineTokens[7]);
      if (transportTimeLimit != 0) {
        throw new IllegalArgumentException("The hub with name (" + name + ") has an unsupported transportTimeLimit ("+ transportTimeLimit+ ").");
      }
      for (      Coach coach : solution.getCoachList()) {
        coach.setDestination(hub);
      }
      ArrayList<Shuttle> transferShuttleList=new ArrayList<Shuttle>(solution.getShuttleList().size());
      for (      Shuttle shuttle : solution.getShuttleList()) {
        shuttle.setDestination(hub);
        transferShuttleList.add(shuttle);
      }
      hub.setTransferShuttleList(transferShuttleList);
      solution.setHub(hub);
    }
 else     if (busStopType.equalsIgnoreCase("BUSSTOP")) {
      BusStop busStop=new BusStop();
      busStop.setId(busOrStopOrHubId);
      busOrStopOrHubId++;
      busStop.setName(name);
      double latitude=Double.parseDouble(lineTokens[4]);
      double longitude=Double.parseDouble(lineTokens[5]);
      RoadLocation location=latLongToLocationMap.get(Arrays.asList(latitude,longitude));
      if (location == null) {
        throw new IllegalArgumentException("The bus stop with name (" + name + ") has a coordinate ("+ latitude+ ", "+ longitude+ ") which is not in the coordinates file.");
      }
      busStop.setLocation(location);
      busStop.setPassengerQuantity(Integer.parseInt(lineTokens[6]));
      busStop.setTransportTimeLimit(Integer.parseInt(lineTokens[7]));
      busStop.setTransferShuttleList(new ArrayList<Shuttle>(solution.getShuttleList().size()));
      busStopList.add(busStop);
    }
 else {
      throw new IllegalArgumentException("The bus stop with name (" + name + ") has an unsupported type ("+ busStopType+ ").");
    }
  }
  solution.setStopList(busStopList);
}
