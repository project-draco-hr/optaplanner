{
  TestdataValue v1=new TestdataValue("1");
  TestdataValue v2=new TestdataValue("2");
  TestdataValue v3=new TestdataValue("3");
  TestdataValue v4=new TestdataValue("4");
  TestdataEntityProvidingEntity a=new TestdataEntityProvidingEntity("a",Arrays.asList(v1,v2,v3),null);
  TestdataEntityProvidingEntity b=new TestdataEntityProvidingEntity("b",Arrays.asList(v1,v2,v3,v4),null);
  TestdataEntityProvidingEntity c=new TestdataEntityProvidingEntity("c",Arrays.asList(v2,v3,v4),null);
  ScoreDirector scoreDirector=mock(ScoreDirector.class);
  EntityDescriptor entityDescriptor=TestdataEntityProvidingEntity.buildEntityDescriptor();
  SwapMove abMove=new SwapMove(entityDescriptor.getGenuineVariableDescriptorList(),a,b);
  a.setValue(v1);
  b.setValue(v1);
  abMove.doMove(scoreDirector);
  assertEquals(v1,a.getValue());
  assertEquals(v1,b.getValue());
  a.setValue(v1);
  b.setValue(v2);
  abMove.doMove(scoreDirector);
  assertEquals(v2,a.getValue());
  assertEquals(v1,b.getValue());
  a.setValue(v2);
  b.setValue(v3);
  abMove.doMove(scoreDirector);
  assertEquals(v3,a.getValue());
  assertEquals(v2,b.getValue());
  abMove.doMove(scoreDirector);
  assertEquals(v2,a.getValue());
  assertEquals(v3,b.getValue());
  SwapMove acMove=new SwapMove(entityDescriptor.getGenuineVariableDescriptorList(),a,c);
  a.setValue(v2);
  c.setValue(v2);
  acMove.doMove(scoreDirector);
  assertEquals(v2,a.getValue());
  assertEquals(v2,c.getValue());
  a.setValue(v3);
  c.setValue(v2);
  acMove.doMove(scoreDirector);
  assertEquals(v2,a.getValue());
  assertEquals(v3,c.getValue());
  a.setValue(v3);
  c.setValue(v4);
  acMove.doMove(scoreDirector);
  assertEquals(v4,a.getValue());
  assertEquals(v3,c.getValue());
  acMove.doMove(scoreDirector);
  assertEquals(v3,a.getValue());
  assertEquals(v4,c.getValue());
  SwapMove bcMove=new SwapMove(entityDescriptor.getGenuineVariableDescriptorList(),b,c);
  b.setValue(v2);
  c.setValue(v2);
  bcMove.doMove(scoreDirector);
  assertEquals(v2,b.getValue());
  assertEquals(v2,c.getValue());
  b.setValue(v2);
  c.setValue(v3);
  bcMove.doMove(scoreDirector);
  assertEquals(v3,b.getValue());
  assertEquals(v2,c.getValue());
  b.setValue(v2);
  c.setValue(v3);
  bcMove.doMove(scoreDirector);
  assertEquals(v3,b.getValue());
  assertEquals(v2,c.getValue());
  bcMove.doMove(scoreDirector);
  assertEquals(v2,b.getValue());
  assertEquals(v3,c.getValue());
}
