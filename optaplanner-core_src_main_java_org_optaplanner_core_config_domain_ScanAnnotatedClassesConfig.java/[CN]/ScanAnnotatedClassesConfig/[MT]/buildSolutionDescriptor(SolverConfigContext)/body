{
  ClassLoader[] classLoaders;
  if (configContext.getClassLoader() != null) {
    classLoaders=new ClassLoader[]{configContext.getClassLoader()};
  }
 else   if (configContext.getKieContainer() != null) {
    ClassLoader kieContainerClassLoader=configContext.getKieContainer().getClassLoader();
    if (kieContainerClassLoader instanceof ProjectClassLoader) {
      ClassLoader parent=kieContainerClassLoader.getParent();
      classLoaders=new ClassLoader[]{parent};
    }
 else {
      throw new IllegalStateException("The kieContainer (" + configContext.getKieContainer() + ")'s class loader ("+ kieContainerClassLoader+ ") is not a "+ ProjectClassLoader.class.getSimpleName()+ ".");
    }
  }
 else {
    classLoaders=new ClassLoader[0];
  }
  ConfigurationBuilder builder=new ConfigurationBuilder();
  if (!ConfigUtils.isEmptyCollection(packageIncludeList)) {
    FilterBuilder filterBuilder=new FilterBuilder();
    for (    String packageInclude : packageIncludeList) {
      builder.addUrls(ClasspathHelper.forPackage(packageInclude,classLoaders));
      filterBuilder.includePackage(packageInclude);
    }
    builder.filterInputsBy(filterBuilder);
  }
 else {
    builder.addUrls(ClasspathHelper.forPackage("",classLoaders));
  }
  Reflections reflections=new Reflections(builder);
  Class<? extends Solution> solutionClass=loadSolutionClass(reflections);
  List<Class<?>> entityClassList=loadEntityClassList(reflections);
  return SolutionDescriptor.buildSolutionDescriptor(solutionClass,entityClassList);
}
