{
  List<Resource> resourceList=schedule.getResourceList();
  resourceCapacityTrackerMap=new HashMap<Resource,ResourceCapacityTracker>(resourceList.size());
  for (  Resource resource : resourceList) {
    resourceCapacityTrackerMap.put(resource,resource.isRenewable() ? new RenewableResourceCapacityTracker(resource) : new NonrenewableResourceCapacityTracker(resource));
  }
  hardScore=0;
  mediumScore=0;
  softScore=0;
  totalProjectDelay=0;
  minimalReleaseDate=Integer.MAX_VALUE;
  maximalEndDate=0;
  for (  Project p : schedule.getProjectList()) {
    minimalReleaseDate=Math.min(p.getReleaseDate(),minimalReleaseDate);
  }
  projectDelayMap=new HashMap<Project,Integer>();
  allocationsPerProjectMap=new HashMap<Project,Set<Allocation>>();
  for (  Allocation allocation : schedule.getAllocationList()) {
    insert(allocation);
  }
}
