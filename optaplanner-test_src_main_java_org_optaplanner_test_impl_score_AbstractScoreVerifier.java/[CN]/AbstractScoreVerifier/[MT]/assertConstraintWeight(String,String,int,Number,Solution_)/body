{
  ScoreDirector<Solution_> scoreDirector=scoreDirectorFactory.buildScoreDirector();
  scoreDirector.setWorkingSolution(solution);
  scoreDirector.calculateScore();
  ConstraintMatchTotal matchTotal=findConstraintMatchTotal(constraintPackage,constraintName,scoreLevel,scoreDirector);
  if (matchTotal == null) {
    if (expectedWeight != null) {
      if (expectedWeight instanceof Byte) {
        assertEquals(expectedWeight,(byte)0);
      }
 else       if (expectedWeight instanceof Short) {
        assertEquals(expectedWeight,(short)0);
      }
 else       if (expectedWeight instanceof Integer) {
        assertEquals(expectedWeight,0);
      }
 else       if (expectedWeight instanceof Long) {
        assertEquals(expectedWeight,0L);
      }
 else       if (expectedWeight instanceof Float) {
        assertEquals(expectedWeight,0F);
      }
 else       if (expectedWeight instanceof Double) {
        assertEquals(expectedWeight,0D);
      }
 else       if (expectedWeight instanceof BigInteger) {
        assertEquals(expectedWeight,BigInteger.ZERO);
      }
 else       if (expectedWeight instanceof BigDecimal) {
        assertEquals(expectedWeight,BigDecimal.ZERO);
      }
 else {
        throw new IllegalStateException("Unsupported " + Number.class.getSimpleName() + " type ("+ expectedWeight.getClass()+ ") for expectedWeight ("+ expectedWeight+ ").");
      }
    }
  }
 else {
    assertEquals(expectedWeight,matchTotal.getWeightTotalAsNumber());
  }
}
