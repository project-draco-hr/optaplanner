{
  for (int hardLevelSize=1; hardLevelSize < 5; hardLevelSize++) {
    for (int softLevelSize=1; softLevelSize < 5; softLevelSize++) {
      int sum=hardLevelSize + softLevelSize;
      BigDecimal[] scores=new BigDecimal[sum];
      for (int i=0; i < sum; i++) {
        scores[i]=new BigDecimal(i);
      }
      BendableBigDecimalScoreDefinition bendableScoreDefinition=new BendableBigDecimalScoreDefinition(hardLevelSize,softLevelSize);
      BendableBigDecimalScore bendableScore=bendableScoreDefinition.createScore(scores);
      assertEquals(hardLevelSize,bendableScore.getHardLevelsSize());
      assertEquals(softLevelSize,bendableScore.getSoftLevelsSize());
      for (int i=0; i < sum; i++) {
        if (i < hardLevelSize) {
          assertEquals(scores[i],bendableScore.getHardScore(i));
        }
 else {
          assertEquals(scores[i],bendableScore.getSoftScore(i - hardLevelSize));
        }
      }
    }
  }
}
