{
  assertNotNull(o);
  if (o instanceof CodeAssertable) {
    return (CodeAssertable)o;
  }
 else   if (o instanceof ChangeMove) {
    ChangeMove changeMove=(ChangeMove)o;
    final String code=convertToCodeAssertable(changeMove.getEntity()).getCode() + "->" + convertToCodeAssertable(changeMove.getToPlanningValue()).getCode();
    return new CodeAssertable(){
      @Override public String getCode(){
        return code;
      }
    }
;
  }
 else   if (o instanceof SwapMove) {
    SwapMove swapMove=(SwapMove)o;
    final String code=convertToCodeAssertable(swapMove.getLeftEntity()).getCode() + "<->" + convertToCodeAssertable(swapMove.getRightEntity()).getCode();
    return new CodeAssertable(){
      @Override public String getCode(){
        return code;
      }
    }
;
  }
 else   if (o instanceof CompositeMove) {
    CompositeMove compositeMove=(CompositeMove)o;
    StringBuilder codeBuilder=new StringBuilder(compositeMove.getMoves().length * 80);
    for (    Move move : compositeMove.getMoves()) {
      codeBuilder.append("+").append(convertToCodeAssertable(move).getCode());
    }
    final String code=codeBuilder.substring(1);
    return new CodeAssertable(){
      @Override public String getCode(){
        return code;
      }
    }
;
  }
 else   if (o instanceof List) {
    List list=(List)o;
    StringBuilder codeBuilder=new StringBuilder("[");
    boolean firstElement=true;
    for (    Object element : list) {
      if (firstElement) {
        firstElement=false;
      }
 else {
        codeBuilder.append(", ");
      }
      codeBuilder.append(convertToCodeAssertable(element).getCode());
    }
    codeBuilder.append("]");
    final String code=codeBuilder.toString();
    return new CodeAssertable(){
      @Override public String getCode(){
        return code;
      }
    }
;
  }
 else   if (o instanceof SubChain) {
    SubChain subChain=(SubChain)o;
    final String code=convertToCodeAssertable(subChain.getEntityList()).getCode();
    return new CodeAssertable(){
      @Override public String getCode(){
        return code;
      }
    }
;
  }
  throw new AssertionError(("o's class (" + o.getClass() + ") cannot be converted to CodeAssertable."));
}
