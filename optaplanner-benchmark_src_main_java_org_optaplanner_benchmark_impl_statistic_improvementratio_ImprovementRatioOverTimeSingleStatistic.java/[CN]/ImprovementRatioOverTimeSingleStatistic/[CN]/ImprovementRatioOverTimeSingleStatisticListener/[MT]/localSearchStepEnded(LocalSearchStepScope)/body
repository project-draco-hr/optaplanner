{
  Move moveBeingDone=stepScope.getStep();
  Class<? extends Move> moveType=moveBeingDone.getClass();
  increaseByOne(totalCounts,moveType);
  if (stepScope.getBestScoreImproved()) {
    increaseByOne(improvementCounts,moveType);
  }
  long timeMillisSpend=stepScope.getPhaseScope().calculateSolverTimeMillisSpend();
  if (timeMillisSpend < ImprovementRatioOverTimeSingleStatistic.this.nextTimeMillisThreshold) {
    return;
  }
  for (  Map.Entry<Class<? extends Move>,Integer> entry : totalCounts.entrySet()) {
    Class<? extends Move> type=entry.getKey();
    int total=entry.getValue();
    int improved=improvementCounts.containsKey(type) ? improvementCounts.get(type) : 0;
    long ratio=improved * 100 / total;
    addPoint(type,new ImprovementRatioOverTimeSingleStatisticPoint(timeMillisSpend,ratio));
  }
  nextTimeMillisThreshold+=timeMillisThresholdInterval;
  if (nextTimeMillisThreshold < timeMillisSpend) {
    nextTimeMillisThreshold=timeMillisSpend;
  }
}
