{
  int softScoreSize=3;
  int hardScoreSize=2;
  int scoreSize=softScoreSize + hardScoreSize;
  InitializingScoreTrendLevel[] levels=new InitializingScoreTrendLevel[scoreSize];
  int startingScore=-999;
  String stringScore=String.valueOf(startingScore);
  for (int i=0; i < scoreSize - 1; i++) {
    stringScore+="/" + String.valueOf(startingScore);
  }
  BendableScore score=BendableScore.parseScore(hardScoreSize,softScoreSize,stringScore);
  InitializingScoreTrend scoreTrend=new InitializingScoreTrend(levels);
  BendableScoreDefinition bendableScoreDefinition=new BendableScoreDefinition(hardScoreSize,softScoreSize);
  for (int i=0; i < scoreSize; i++) {
    levels[i]=InitializingScoreTrendLevel.ONLY_UP;
  }
  BendableScore score2=bendableScoreDefinition.buildOptimisticBound(scoreTrend,score);
  for (int i=0; i < score2.getHardLevelsSize() + score2.getSoftLevelsSize(); i++) {
    if (i < score2.getHardLevelsSize()) {
      assertEquals(Integer.MAX_VALUE,score2.getHardScore(i));
    }
 else {
      assertEquals(Integer.MAX_VALUE,score2.getSoftScore(i - score2.getHardLevelsSize()));
    }
  }
  for (int i=0; i < scoreSize; i++) {
    levels[i]=InitializingScoreTrendLevel.ONLY_DOWN;
  }
  score2=bendableScoreDefinition.buildOptimisticBound(scoreTrend,score);
  for (int i=0; i < score2.getHardLevelsSize() + score2.getSoftLevelsSize(); i++) {
    if (i < score2.getHardLevelsSize()) {
      assertEquals(startingScore,score2.getHardScore(i));
    }
 else {
      assertEquals(startingScore,score2.getSoftScore(i - score2.getHardLevelsSize()));
    }
  }
}
