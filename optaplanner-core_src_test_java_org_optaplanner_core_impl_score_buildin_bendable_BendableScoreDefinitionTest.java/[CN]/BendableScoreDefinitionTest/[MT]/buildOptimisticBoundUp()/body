{
  int softScoreSize=3;
  int hardScoreSize=2;
  int scoreSize=softScoreSize + hardScoreSize;
  int startingScore=-1;
  BendableScore score=BendableScore.parseScore(hardScoreSize,softScoreSize,createStringScore(scoreSize,startingScore));
  InitializingScoreTrend scoreTrend=InitializingScoreTrend.buildUniformTrend(InitializingScoreTrendLevel.ONLY_UP,scoreSize);
  BendableScoreDefinition bendableScoreDefinition=new BendableScoreDefinition(hardScoreSize,softScoreSize);
  BendableScore score2=bendableScoreDefinition.buildOptimisticBound(scoreTrend,score);
  for (int i=0; i < score2.getHardLevelsSize() + score2.getSoftLevelsSize(); i++) {
    if (i < score2.getHardLevelsSize()) {
      assertEquals(Integer.MAX_VALUE,score2.getHardScore(i));
    }
 else {
      assertEquals(Integer.MAX_VALUE,score2.getSoftScore(i - score2.getHardLevelsSize()));
    }
  }
}
