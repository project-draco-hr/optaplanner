{
  PillarSelectorConfig pillarSelectorConfig_=pillarSelectorConfig == null ? new PillarSelectorConfig() : pillarSelectorConfig;
  PillarSelector pillarSelector=pillarSelectorConfig_.buildPillarSelector(configPolicy,minimumCacheType,SelectionOrder.fromRandomSelectionBoolean(randomSelection));
  ValueSelectorConfig valueSelectorConfig_=valueSelectorConfig == null ? new ValueSelectorConfig() : valueSelectorConfig;
  ValueSelector valueSelector=valueSelectorConfig_.buildValueSelector(configPolicy,pillarSelector.getEntityDescriptor(),minimumCacheType,SelectionOrder.fromRandomSelectionBoolean(randomSelection));
  if (!(valueSelector instanceof EntityIndependentValueSelector)) {
    throw new IllegalArgumentException("The moveSelectorConfig (" + this + ") needs to be based on a EntityIndependentValueSelector ("+ valueSelector+ ")."+ " Check your @"+ ValueRangeProvider.class.getSimpleName()+ " annotations.");
  }
  return new PillarChangeMoveSelector(pillarSelector,(EntityIndependentValueSelector)valueSelector,randomSelection);
}
