{
  if (solution.getGlobalPeriodRangeFrom() != 0) {
    throw new IllegalStateException("The globalPeriodRangeFrom (" + solution.getGlobalPeriodRangeFrom() + ") should be 0.");
  }
  int resourceListSize=solution.getResourceList().size();
  int globalPeriodRangeTo=solution.getGlobalPeriodRangeTo();
  List<Machine> machineList=solution.getMachineList();
  Map<Machine,List<MachinePeriodPart>> machinePeriodListMap=new LinkedHashMap<Machine,List<MachinePeriodPart>>(machineList.size());
  for (  Machine machine : machineList) {
    List<MachinePeriodPart> machinePeriodList=new ArrayList<MachinePeriodPart>(globalPeriodRangeTo);
    for (int period=0; period < globalPeriodRangeTo; period++) {
      machinePeriodList.add(new MachinePeriodPart(machine,period,resourceListSize));
    }
    machinePeriodListMap.put(machine,machinePeriodList);
  }
  long softScore=0L;
  List<PeriodPowerCost> periodPowerCostList=solution.getPeriodPowerCostList();
  for (  TaskAssignment taskAssignment : solution.getTaskAssignmentList()) {
    Machine machine=taskAssignment.getMachine();
    Integer startPeriod=taskAssignment.getStartPeriod();
    if (machine != null && startPeriod != null) {
      List<MachinePeriodPart> machinePeriodList=machinePeriodListMap.get(machine);
      int endPeriod=taskAssignment.getEndPeriod();
      for (int period=startPeriod; period < endPeriod; period++) {
        MachinePeriodPart machinePeriodPart=machinePeriodList.get(period);
        machinePeriodPart.addTaskAssignment(taskAssignment);
        PeriodPowerCost periodPowerCost=periodPowerCostList.get(period);
        softScore-=CostCalculator.multiplyTwoMicros(taskAssignment.getTask().getPowerConsumptionMicros(),periodPowerCost.getPowerCostMicros());
      }
    }
  }
  long hardScore=0L;
  for (  Map.Entry<Machine,List<MachinePeriodPart>> entry : machinePeriodListMap.entrySet()) {
    Machine machine=entry.getKey();
    List<MachinePeriodPart> machinePeriodList=entry.getValue();
    MachinePeriodStatus previousStatus=MachinePeriodStatus.OFF;
    long idleCostMicros=0L;
    for (int period=0; period < globalPeriodRangeTo; period++) {
      PeriodPowerCost periodPowerCost=periodPowerCostList.get(period);
      MachinePeriodPart machinePeriodPart=machinePeriodList.get(period);
      boolean active=machinePeriodPart.isActive();
      if (active) {
        if (previousStatus == MachinePeriodStatus.OFF) {
          softScore-=machine.getSpinUpDownCostMicros();
        }
 else         if (previousStatus == MachinePeriodStatus.IDLE) {
          softScore-=idleCostMicros;
          idleCostMicros=0L;
        }
        hardScore+=machinePeriodPart.getHardScore();
        softScore-=CostCalculator.multiplyTwoMicros(machine.getPowerConsumptionMicros(),periodPowerCost.getPowerCostMicros());
        previousStatus=MachinePeriodStatus.ACTIVE;
      }
 else {
        if (previousStatus != MachinePeriodStatus.OFF) {
          idleCostMicros+=CostCalculator.multiplyTwoMicros(machine.getPowerConsumptionMicros(),periodPowerCost.getPowerCostMicros());
          if (idleCostMicros > machine.getSpinUpDownCostMicros()) {
            idleCostMicros=0L;
            previousStatus=MachinePeriodStatus.OFF;
          }
 else {
            previousStatus=MachinePeriodStatus.IDLE;
          }
        }
      }
    }
  }
  return HardSoftLongScore.valueOf(hardScore,softScore);
}
