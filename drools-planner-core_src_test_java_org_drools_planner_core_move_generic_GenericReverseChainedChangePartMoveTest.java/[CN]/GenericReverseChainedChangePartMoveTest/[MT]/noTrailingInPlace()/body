{
  TestdataChainedAnchor a0=new TestdataChainedAnchor("a0");
  TestdataChainedEntity a1=new TestdataChainedEntity("a1");
  a1.setChainedObject(a0);
  TestdataChainedEntity a2=new TestdataChainedEntity("a2");
  a2.setChainedObject(a1);
  TestdataChainedEntity a3=new TestdataChainedEntity("a3");
  a3.setChainedObject(a2);
  TestdataChainedEntity a4=new TestdataChainedEntity("a4");
  a4.setChainedObject(a3);
  TestdataChainedEntity a5=new TestdataChainedEntity("a5");
  a5.setChainedObject(a4);
  PlanningEntityDescriptor entityDescriptor=TestdataChainedEntity.buildEntityDescriptor();
  PlanningVariableDescriptor variableDescriptor=entityDescriptor.getPlanningVariableDescriptor("chainedObject");
  ScoreDirector scoreDirector=mock(ScoreDirector.class);
  List<Object> entitiesSubChain=new ArrayList<Object>();
  entitiesSubChain.add(a3);
  entitiesSubChain.add(a4);
  entitiesSubChain.add(a5);
  GenericReverseChainedChangePartMove move=new GenericReverseChainedChangePartMove(entitiesSubChain,variableDescriptor,a2,null,null);
  move.doMove(scoreDirector);
  assertEquals(a0,a1.getChainedObject());
  assertEquals(a1,a2.getChainedObject());
  assertEquals(a2,a5.getChainedObject());
  assertEquals(a5,a4.getChainedObject());
  assertEquals(a4,a3.getChainedObject());
  verify(scoreDirector).beforeVariableChanged(a5,"chainedObject");
  verify(scoreDirector).afterVariableChanged(a5,"chainedObject");
  verify(scoreDirector).beforeVariableChanged(a4,"chainedObject");
  verify(scoreDirector).afterVariableChanged(a4,"chainedObject");
  verify(scoreDirector).beforeVariableChanged(a3,"chainedObject");
  verify(scoreDirector).afterVariableChanged(a3,"chainedObject");
}
