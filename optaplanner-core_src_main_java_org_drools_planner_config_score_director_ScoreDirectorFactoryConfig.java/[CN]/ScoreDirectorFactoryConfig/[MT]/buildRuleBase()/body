{
  if (ruleBase != null) {
    if (!CollectionUtils.isEmpty(scoreDrlList)) {
      throw new IllegalArgumentException("If ruleBase is not null, the scoreDrlList (" + scoreDrlList + ") must be empty.");
    }
    return ruleBase;
  }
 else {
    PackageBuilder packageBuilder=new PackageBuilder();
    for (    String scoreDrl : scoreDrlList) {
      InputStream scoreDrlIn=getClass().getResourceAsStream(scoreDrl);
      if (scoreDrlIn == null) {
        throw new IllegalArgumentException("The scoreDrl (" + scoreDrl + ") does not exist as a classpath resource.");
      }
      try {
        packageBuilder.addPackageFromDrl(new InputStreamReader(scoreDrlIn,"UTF-8"));
      }
 catch (      DroolsParserException e) {
        throw new IllegalArgumentException("The scoreDrl (" + scoreDrl + ") could not be loaded.",e);
      }
catch (      IOException e) {
        throw new IllegalArgumentException("The scoreDrl (" + scoreDrl + ") could not be loaded.",e);
      }
 finally {
        IOUtils.closeQuietly(scoreDrlIn);
      }
    }
    RuleBaseConfiguration ruleBaseConfiguration=new RuleBaseConfiguration();
    RuleBase ruleBase=RuleBaseFactory.newRuleBase(ruleBaseConfiguration);
    if (packageBuilder.hasErrors()) {
      throw new IllegalStateException("There are errors in the scoreDrl's:\n" + packageBuilder.getErrors().toString());
    }
    ruleBase.addPackage(packageBuilder.getPackage());
    return ruleBase;
  }
}
