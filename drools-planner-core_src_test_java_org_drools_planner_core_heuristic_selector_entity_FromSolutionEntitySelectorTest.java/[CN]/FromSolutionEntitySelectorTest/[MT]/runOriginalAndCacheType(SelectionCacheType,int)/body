{
  TestdataSolution workingSolution=new TestdataSolution();
  final List<Object> entityList=Arrays.<Object>asList(new TestdataEntity("e1"),new TestdataEntity("e2"),new TestdataEntity("e3"));
  PlanningEntityDescriptor entityDescriptor=mock(PlanningEntityDescriptor.class);
  when(entityDescriptor.extractEntities(workingSolution)).thenReturn(entityList);
  FromSolutionEntitySelector entitySelector=new FromSolutionEntitySelector(entityDescriptor,cacheType,false);
  DefaultSolverScope solverScope=mock(DefaultSolverScope.class);
  when(solverScope.getWorkingSolution()).thenReturn(workingSolution);
  entitySelector.solvingStarted(solverScope);
  AbstractSolverPhaseScope phaseScopeA=mock(AbstractSolverPhaseScope.class);
  when(phaseScopeA.getSolverScope()).thenReturn(solverScope);
  entitySelector.phaseStarted(phaseScopeA);
  AbstractStepScope stepScopeA1=mock(AbstractStepScope.class);
  when(stepScopeA1.getSolverPhaseScope()).thenReturn(phaseScopeA);
  entitySelector.stepStarted(stepScopeA1);
  runOriginalAsserts(entitySelector,"e1","e2","e3");
  entitySelector.stepEnded(stepScopeA1);
  AbstractStepScope stepScopeA2=mock(AbstractStepScope.class);
  when(stepScopeA2.getSolverPhaseScope()).thenReturn(phaseScopeA);
  entitySelector.stepStarted(stepScopeA2);
  runOriginalAsserts(entitySelector,"e1","e2","e3");
  entitySelector.stepEnded(stepScopeA2);
  entitySelector.phaseEnded(phaseScopeA);
  AbstractSolverPhaseScope phaseScopeB=mock(AbstractSolverPhaseScope.class);
  when(phaseScopeB.getSolverScope()).thenReturn(solverScope);
  entitySelector.phaseStarted(phaseScopeB);
  AbstractStepScope stepScopeB1=mock(AbstractStepScope.class);
  when(stepScopeB1.getSolverPhaseScope()).thenReturn(phaseScopeB);
  entitySelector.stepStarted(stepScopeB1);
  runOriginalAsserts(entitySelector,"e1","e2","e3");
  entitySelector.stepEnded(stepScopeB1);
  AbstractStepScope stepScopeB2=mock(AbstractStepScope.class);
  when(stepScopeB2.getSolverPhaseScope()).thenReturn(phaseScopeB);
  entitySelector.stepStarted(stepScopeB2);
  runOriginalAsserts(entitySelector,"e1","e2","e3");
  entitySelector.stepEnded(stepScopeB2);
  AbstractStepScope stepScopeB3=mock(AbstractStepScope.class);
  when(stepScopeB3.getSolverPhaseScope()).thenReturn(phaseScopeB);
  entitySelector.stepStarted(stepScopeB3);
  runOriginalAsserts(entitySelector,"e1","e2","e3");
  entitySelector.stepEnded(stepScopeB3);
  entitySelector.phaseEnded(phaseScopeB);
  entitySelector.solvingEnded(solverScope);
  verify(entityDescriptor,times(timesCalled)).extractEntities(workingSolution);
}
