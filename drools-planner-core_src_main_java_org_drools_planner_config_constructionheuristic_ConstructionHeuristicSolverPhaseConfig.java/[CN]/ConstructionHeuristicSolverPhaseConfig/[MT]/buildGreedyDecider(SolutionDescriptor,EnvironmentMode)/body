{
  DefaultGreedyDecider greedyDecider=new DefaultGreedyDecider();
  Set<Class<?>> planningEntityClassSet=solutionDescriptor.getPlanningEntityClassSet();
  if (planningEntityClassSet.size() != 1) {
    throw new UnsupportedOperationException("Currently the greedyFit implementation only supports " + "1 planningEntityClass.");
  }
  Class<?> planningEntityClass=planningEntityClassSet.iterator().next();
  PlanningEntityDescriptor planningEntityDescriptor=solutionDescriptor.getPlanningEntityDescriptor(planningEntityClass);
  PlanningVariableWalker planningVariableWalker=new PlanningVariableWalker(planningEntityDescriptor);
  List<PlanningValueWalker> planningValueWalkerList=new ArrayList<PlanningValueWalker>();
  for (  PlanningVariableDescriptor planningVariableDescriptor : planningEntityDescriptor.getPlanningVariableDescriptors()) {
    PlanningValueSelector planningValueSelector=new PlanningValueSelector(planningVariableDescriptor);
    planningValueSelector.setSelectionOrder(determinePlanningValueSelectionOrder());
    PlanningValueWalker planningValueWalker=new PlanningValueWalker(planningVariableDescriptor,planningValueSelector);
    planningValueWalkerList.add(planningValueWalker);
  }
  planningVariableWalker.setPlanningValueWalkerList(planningValueWalkerList);
  greedyDecider.setPlanningVariableWalker(planningVariableWalker);
  greedyDecider.setForager(buildGreedyForager());
  if (environmentMode == EnvironmentMode.TRACE) {
    greedyDecider.setAssertMoveScoreIsUncorrupted(true);
  }
  if (environmentMode == EnvironmentMode.DEBUG || environmentMode == EnvironmentMode.TRACE) {
    greedyDecider.setAssertUndoMoveIsUncorrupted(true);
  }
  return greedyDecider;
}
