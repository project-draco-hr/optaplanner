{
  if (constructionHeuristicType != null) {
    DefaultGreedyFitSolverPhase greedySolverPhase=new DefaultGreedyFitSolverPhase();
    configureSolverPhase(greedySolverPhase,phaseIndex,environmentMode,scoreDefinition,solverTermination);
    greedySolverPhase.setGreedyPlanningEntitySelector(buildGreedyPlanningEntitySelector(solutionDescriptor));
    greedySolverPhase.setGreedyDecider(buildGreedyDecider(solutionDescriptor,environmentMode));
    if (environmentMode == EnvironmentMode.DEBUG || environmentMode == EnvironmentMode.TRACE) {
      greedySolverPhase.setAssertStepScoreIsUncorrupted(true);
    }
    return greedySolverPhase;
  }
 else   if (!CollectionUtils.isEmpty(entityPlacerConfigList)) {
    if (constructionHeuristicPickEarlyType != null) {
      throw new UnsupportedOperationException();
    }
    DefaultConstructionHeuristicSolverPhase phase=new DefaultConstructionHeuristicSolverPhase();
    configureSolverPhase(phase,phaseIndex,environmentMode,scoreDefinition,solverTermination);
    List<EntityPlacer> entityPlacerList=new ArrayList<EntityPlacer>(entityPlacerConfigList.size());
    for (    EntityPlacerConfig entityPlacerConfig : entityPlacerConfigList) {
      EntityPlacer entityPlacer=entityPlacerConfig.buildEntityPlacer(environmentMode,solutionDescriptor,phase.getTermination());
      entityPlacerList.add(entityPlacer);
    }
    phase.setEntityPlacerList(entityPlacerList);
    if (environmentMode == EnvironmentMode.DEBUG || environmentMode == EnvironmentMode.TRACE) {
      phase.setAssertStepScoreIsUncorrupted(true);
    }
    return phase;
  }
 else {
    throw new IllegalArgumentException("A constructionHeuristic requires configuration, " + "for example a constructionHeuristicType.");
  }
}
