{
  boolean blockDistributionEnabled=blockDistributionBlockSizeMinimum != null || blockDistributionBlockSizeMaximum != null || blockDistributionBlockRatio != null || blockDistributionUniformDistributionProbability != null;
  boolean betaDistributionEnabled=betaDistributionAlpha != null || betaDistributionBeta != null;
  if (blockDistributionEnabled && betaDistributionEnabled) {
    throw new IllegalArgumentException("The nearbySelectorConfig (" + this + ") has both blockDistribution and betaDistribution parameters.");
  }
  if (blockDistributionEnabled) {
    int blockSizeMinimum=blockDistributionBlockSizeMinimum == null ? 0 : blockDistributionBlockSizeMinimum;
    int blockSizeMaximum=blockDistributionBlockSizeMaximum == null ? Integer.MAX_VALUE : blockDistributionBlockSizeMaximum;
    double blockRatio=blockDistributionBlockRatio == null ? 1.0 : blockDistributionBlockRatio;
    double uniformDistributionProbability=blockDistributionUniformDistributionProbability == null ? 0.0 : blockDistributionUniformDistributionProbability;
    return new BlockDistributionNearbyRandom(blockSizeMinimum,blockSizeMaximum,blockRatio,uniformDistributionProbability);
  }
 else   if (betaDistributionEnabled) {
    double alpha=betaDistributionAlpha == null ? 1.0 : betaDistributionAlpha;
    double beta=betaDistributionBeta == null ? 5.0 : betaDistributionBeta;
    return new BetaDistributionNearbyRandom(alpha,beta);
  }
 else {
    return new BetaDistributionNearbyRandom(1.0,5.0);
  }
}
