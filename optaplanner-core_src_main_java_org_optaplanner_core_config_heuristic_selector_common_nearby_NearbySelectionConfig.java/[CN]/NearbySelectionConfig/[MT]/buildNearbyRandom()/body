{
  boolean blockDistributionEnabled=nearbySelectionDistributionType == NearbySelectionDistributionType.BLOCK_DISTRIBUTION || blockDistributionSizeMinimum != null || blockDistributionSizeMaximum != null || blockDistributionSizeRatio != null || blockDistributionUniformDistributionProbability != null;
  boolean linearDistributionEnabled=nearbySelectionDistributionType == NearbySelectionDistributionType.LINEAR_DISTRIBUTION || linearDistributionSizeMaximum != null;
  boolean parabolicDistributionEnabled=nearbySelectionDistributionType == NearbySelectionDistributionType.PARABOLIC_DISTRIBUTION || parabolicDistributionSizeMaximum != null;
  boolean betaDistributionEnabled=nearbySelectionDistributionType == NearbySelectionDistributionType.BETA_DISTRIBUTION || betaDistributionAlpha != null || betaDistributionBeta != null;
  if (blockDistributionEnabled && linearDistributionEnabled) {
    throw new IllegalArgumentException("The nearbySelectorConfig (" + this + ") has both blockDistribution and linearDistribution parameters.");
  }
  if (blockDistributionEnabled && parabolicDistributionEnabled) {
    throw new IllegalArgumentException("The nearbySelectorConfig (" + this + ") has both blockDistribution and parabolicDistribution parameters.");
  }
  if (blockDistributionEnabled && betaDistributionEnabled) {
    throw new IllegalArgumentException("The nearbySelectorConfig (" + this + ") has both blockDistribution and betaDistribution parameters.");
  }
  if (linearDistributionEnabled && parabolicDistributionEnabled) {
    throw new IllegalArgumentException("The nearbySelectorConfig (" + this + ") has both linearDistribution and parabolicDistribution parameters.");
  }
  if (linearDistributionEnabled && betaDistributionEnabled) {
    throw new IllegalArgumentException("The nearbySelectorConfig (" + this + ") has both linearDistribution and betaDistribution parameters.");
  }
  if (parabolicDistributionEnabled && betaDistributionEnabled) {
    throw new IllegalArgumentException("The nearbySelectorConfig (" + this + ") has both parabolicDistribution and betaDistribution parameters.");
  }
  if (blockDistributionEnabled) {
    int sizeMinimum=blockDistributionSizeMinimum == null ? 1 : blockDistributionSizeMinimum;
    int sizeMaximum=blockDistributionSizeMaximum == null ? Integer.MAX_VALUE : blockDistributionSizeMaximum;
    double sizeRatio=blockDistributionSizeRatio == null ? 1.0 : blockDistributionSizeRatio;
    double uniformDistributionProbability=blockDistributionUniformDistributionProbability == null ? 0.0 : blockDistributionUniformDistributionProbability;
    return new BlockDistributionNearbyRandom(sizeMinimum,sizeMaximum,sizeRatio,uniformDistributionProbability);
  }
 else   if (linearDistributionEnabled) {
    int sizeMaximum=linearDistributionSizeMaximum == null ? Integer.MAX_VALUE : linearDistributionSizeMaximum;
    return new LinearDistributionNearbyRandom(sizeMaximum);
  }
 else   if (parabolicDistributionEnabled) {
    int sizeMaximum=parabolicDistributionSizeMaximum == null ? Integer.MAX_VALUE : parabolicDistributionSizeMaximum;
    return new ParabolicDistributionNearbyRandom(sizeMaximum);
  }
 else   if (betaDistributionEnabled) {
    double alpha=betaDistributionAlpha == null ? 1.0 : betaDistributionAlpha;
    double beta=betaDistributionBeta == null ? 5.0 : betaDistributionBeta;
    return new BetaDistributionNearbyRandom(alpha,beta);
  }
 else {
    return new BetaDistributionNearbyRandom(1.0,5.0);
  }
}
