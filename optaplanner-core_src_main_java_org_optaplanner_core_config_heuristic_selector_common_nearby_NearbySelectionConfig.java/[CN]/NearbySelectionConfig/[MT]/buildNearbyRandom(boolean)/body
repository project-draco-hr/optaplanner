{
  boolean blockDistributionEnabled=nearbySelectionDistributionType == NearbySelectionDistributionType.BLOCK_DISTRIBUTION || blockDistributionSizeMinimum != null || blockDistributionSizeMaximum != null || blockDistributionSizeRatio != null || blockDistributionUniformDistributionProbability != null;
  boolean linearDistributionEnabled=nearbySelectionDistributionType == NearbySelectionDistributionType.LINEAR_DISTRIBUTION || linearDistributionSizeMaximum != null;
  boolean parabolicDistributionEnabled=nearbySelectionDistributionType == NearbySelectionDistributionType.PARABOLIC_DISTRIBUTION || parabolicDistributionSizeMaximum != null;
  boolean betaDistributionEnabled=nearbySelectionDistributionType == NearbySelectionDistributionType.BETA_DISTRIBUTION || betaDistributionAlpha != null || betaDistributionBeta != null;
  if (!randomSelection) {
    if (blockDistributionEnabled || linearDistributionEnabled || parabolicDistributionEnabled|| betaDistributionEnabled) {
      throw new IllegalArgumentException("The nearbySelectorConfig (" + this + ") with randomSelection ("+ randomSelection+ ") has distribution parameters.");
    }
    return null;
  }
  if (blockDistributionEnabled && linearDistributionEnabled) {
    throw new IllegalArgumentException("The nearbySelectorConfig (" + this + ") has both blockDistribution and linearDistribution parameters.");
  }
  if (blockDistributionEnabled && parabolicDistributionEnabled) {
    throw new IllegalArgumentException("The nearbySelectorConfig (" + this + ") has both blockDistribution and parabolicDistribution parameters.");
  }
  if (blockDistributionEnabled && betaDistributionEnabled) {
    throw new IllegalArgumentException("The nearbySelectorConfig (" + this + ") has both blockDistribution and betaDistribution parameters.");
  }
  if (linearDistributionEnabled && parabolicDistributionEnabled) {
    throw new IllegalArgumentException("The nearbySelectorConfig (" + this + ") has both linearDistribution and parabolicDistribution parameters.");
  }
  if (linearDistributionEnabled && betaDistributionEnabled) {
    throw new IllegalArgumentException("The nearbySelectorConfig (" + this + ") has both linearDistribution and betaDistribution parameters.");
  }
  if (parabolicDistributionEnabled && betaDistributionEnabled) {
    throw new IllegalArgumentException("The nearbySelectorConfig (" + this + ") has both parabolicDistribution and betaDistribution parameters.");
  }
  if (blockDistributionEnabled) {
    int sizeMinimum=defaultIfNull(blockDistributionSizeMinimum,1);
    int sizeMaximum=defaultIfNull(blockDistributionSizeMaximum,Integer.MAX_VALUE);
    double sizeRatio=defaultIfNull(blockDistributionSizeRatio,1.0);
    double uniformDistributionProbability=defaultIfNull(blockDistributionUniformDistributionProbability,0.0);
    return new BlockDistributionNearbyRandom(sizeMinimum,sizeMaximum,sizeRatio,uniformDistributionProbability);
  }
 else   if (linearDistributionEnabled) {
    int sizeMaximum=defaultIfNull(linearDistributionSizeMaximum,Integer.MAX_VALUE);
    return new LinearDistributionNearbyRandom(sizeMaximum);
  }
 else   if (parabolicDistributionEnabled) {
    int sizeMaximum=defaultIfNull(parabolicDistributionSizeMaximum,Integer.MAX_VALUE);
    return new ParabolicDistributionNearbyRandom(sizeMaximum);
  }
 else   if (betaDistributionEnabled) {
    double alpha=defaultIfNull(betaDistributionAlpha,1.0);
    double beta=defaultIfNull(betaDistributionBeta,5.0);
    return new BetaDistributionNearbyRandom(alpha,beta);
  }
 else {
    return new LinearDistributionNearbyRandom(Integer.MAX_VALUE);
  }
}
