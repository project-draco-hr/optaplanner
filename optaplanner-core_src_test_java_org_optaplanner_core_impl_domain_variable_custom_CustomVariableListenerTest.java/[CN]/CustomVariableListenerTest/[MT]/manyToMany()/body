{
  EntityDescriptor entityDescriptor=TestdataManyToManyShadowedEntity.buildEntityDescriptor();
  GenuineVariableDescriptor primaryVariableDescriptor=entityDescriptor.getGenuineVariableDescriptor("primaryValue");
  GenuineVariableDescriptor secondaryVariableDescriptor=entityDescriptor.getGenuineVariableDescriptor("secondaryValue");
  InnerScoreDirector scoreDirector=PlannerTestUtils.mockScoreDirector(primaryVariableDescriptor.getEntityDescriptor().getSolutionDescriptor());
  TestdataValue val1=new TestdataValue("1");
  TestdataValue val2=new TestdataValue("2");
  TestdataValue val3=new TestdataValue("3");
  TestdataValue val4=new TestdataValue("4");
  TestdataManyToManyShadowedEntity a=new TestdataManyToManyShadowedEntity("a",null,null);
  TestdataManyToManyShadowedEntity b=new TestdataManyToManyShadowedEntity("b",null,null);
  TestdataManyToManyShadowedEntity c=new TestdataManyToManyShadowedEntity("c",null,null);
  TestdataManyToManyShadowedSolution solution=new TestdataManyToManyShadowedSolution("solution");
  solution.setEntityList(Arrays.asList(a,b,c));
  solution.setValueList(Arrays.asList(val1,val2,val3,val4));
  scoreDirector.setWorkingSolution(solution);
  scoreDirector.beforeVariableChanged(primaryVariableDescriptor,a);
  a.setPrimaryValue(val1);
  scoreDirector.afterVariableChanged(primaryVariableDescriptor,a);
  scoreDirector.triggerVariableListeners();
  assertEquals(null,a.getComposedCode());
  assertEquals(null,a.getReverseComposedCode());
  scoreDirector.beforeVariableChanged(secondaryVariableDescriptor,a);
  a.setSecondaryValue(val3);
  scoreDirector.afterVariableChanged(secondaryVariableDescriptor,a);
  scoreDirector.triggerVariableListeners();
  assertEquals("1-3",a.getComposedCode());
  assertEquals("3-1",a.getReverseComposedCode());
  scoreDirector.beforeVariableChanged(secondaryVariableDescriptor,a);
  a.setSecondaryValue(val4);
  scoreDirector.afterVariableChanged(secondaryVariableDescriptor,a);
  scoreDirector.triggerVariableListeners();
  assertEquals("1-4",a.getComposedCode());
  assertEquals("4-1",a.getReverseComposedCode());
  scoreDirector.beforeVariableChanged(primaryVariableDescriptor,a);
  a.setPrimaryValue(val2);
  scoreDirector.afterVariableChanged(primaryVariableDescriptor,a);
  scoreDirector.triggerVariableListeners();
  assertEquals("2-4",a.getComposedCode());
  assertEquals("4-2",a.getReverseComposedCode());
  scoreDirector.beforeVariableChanged(primaryVariableDescriptor,a);
  a.setPrimaryValue(null);
  scoreDirector.afterVariableChanged(primaryVariableDescriptor,a);
  scoreDirector.triggerVariableListeners();
  assertEquals(null,a.getComposedCode());
  assertEquals(null,a.getReverseComposedCode());
  scoreDirector.beforeVariableChanged(primaryVariableDescriptor,c);
  c.setPrimaryValue(val1);
  scoreDirector.afterVariableChanged(primaryVariableDescriptor,c);
  scoreDirector.beforeVariableChanged(secondaryVariableDescriptor,c);
  c.setSecondaryValue(val3);
  scoreDirector.afterVariableChanged(secondaryVariableDescriptor,c);
  scoreDirector.triggerVariableListeners();
  assertEquals("1-3",c.getComposedCode());
  assertEquals("3-1",c.getReverseComposedCode());
}
