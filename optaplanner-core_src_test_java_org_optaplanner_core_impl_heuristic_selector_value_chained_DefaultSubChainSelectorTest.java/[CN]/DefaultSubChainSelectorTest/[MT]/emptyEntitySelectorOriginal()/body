{
  GenuineVariableDescriptor variableDescriptor=SelectorTestUtils.mockVariableDescriptor(TestdataChainedEntity.class,"chainedObject");
  when(variableDescriptor.isChained()).thenReturn(true);
  ScoreDirector scoreDirector=mock(ScoreDirector.class);
  TestdataChainedAnchor a0=new TestdataChainedAnchor("a0");
  TestdataChainedAnchor b0=new TestdataChainedAnchor("b0");
  SelectorTestUtils.mockMethodGetTrailingEntity(scoreDirector,variableDescriptor,new TestdataChainedEntity[]{});
  EntityIndependentValueSelector valueSelector=SelectorTestUtils.mockEntityIndependentValueSelector(variableDescriptor,a0,b0);
  DefaultSubChainSelector subChainSelector=new DefaultSubChainSelector(valueSelector,false,1,Integer.MAX_VALUE);
  DefaultSolverScope solverScope=mock(DefaultSolverScope.class);
  when(solverScope.getScoreDirector()).thenReturn(scoreDirector);
  subChainSelector.solvingStarted(solverScope);
  AbstractSolverPhaseScope phaseScopeA=mock(AbstractSolverPhaseScope.class);
  when(phaseScopeA.getSolverScope()).thenReturn(solverScope);
  subChainSelector.phaseStarted(phaseScopeA);
  AbstractStepScope stepScopeA1=mock(AbstractStepScope.class);
  when(stepScopeA1.getPhaseScope()).thenReturn(phaseScopeA);
  subChainSelector.stepStarted(stepScopeA1);
  assertAllCodesOfSubChainSelector(subChainSelector);
  subChainSelector.stepEnded(stepScopeA1);
  AbstractStepScope stepScopeA2=mock(AbstractStepScope.class);
  when(stepScopeA2.getPhaseScope()).thenReturn(phaseScopeA);
  subChainSelector.stepStarted(stepScopeA2);
  assertAllCodesOfSubChainSelector(subChainSelector);
  subChainSelector.stepEnded(stepScopeA2);
  subChainSelector.phaseEnded(phaseScopeA);
  AbstractSolverPhaseScope phaseScopeB=mock(AbstractSolverPhaseScope.class);
  when(phaseScopeB.getSolverScope()).thenReturn(solverScope);
  subChainSelector.phaseStarted(phaseScopeB);
  AbstractStepScope stepScopeB1=mock(AbstractStepScope.class);
  when(stepScopeB1.getPhaseScope()).thenReturn(phaseScopeB);
  subChainSelector.stepStarted(stepScopeB1);
  assertAllCodesOfSubChainSelector(subChainSelector);
  subChainSelector.stepEnded(stepScopeB1);
  subChainSelector.phaseEnded(phaseScopeB);
  subChainSelector.solvingEnded(solverScope);
  verifySolverPhaseLifecycle(valueSelector,1,2,3);
}
