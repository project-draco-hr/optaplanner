{
  ArrayList<MoveSelector> childMoveSelectorList=new ArrayList<MoveSelector>();
  Map<Selector,Double> fixedProbabilityWeightMap=new HashMap<Selector,Double>();
  childMoveSelectorList.add(SelectorTestUtils.mockMoveSelector(DummyMove.class,new DummyMove("a1"),new DummyMove("a2"),new DummyMove("a3")));
  fixedProbabilityWeightMap.put(childMoveSelectorList.get(0),1000.0);
  childMoveSelectorList.add(SelectorTestUtils.mockMoveSelector(DummyMove.class,new DummyMove("b1"),new DummyMove("b2")));
  fixedProbabilityWeightMap.put(childMoveSelectorList.get(1),20.0);
  UnionMoveSelector moveSelector=new UnionMoveSelector(childMoveSelectorList,true,new FixedSelectorProbabilityWeightFactory(fixedProbabilityWeightMap));
  Random workingRandom=mock(Random.class);
  when(workingRandom.nextDouble()).thenReturn(1.0 / 1020.0,1019.0 / 1020.0,1000.0 / 1020.0,0.0,999.0 / 1020.0);
  DefaultSolverScope solverScope=mock(DefaultSolverScope.class);
  when(solverScope.getWorkingRandom()).thenReturn(workingRandom);
  moveSelector.solvingStarted(solverScope);
  AbstractSolverPhaseScope phaseScopeA=mock(AbstractSolverPhaseScope.class);
  when(phaseScopeA.getSolverScope()).thenReturn(solverScope);
  when(phaseScopeA.getWorkingRandom()).thenReturn(workingRandom);
  moveSelector.phaseStarted(phaseScopeA);
  AbstractStepScope stepScopeA1=mock(AbstractStepScope.class);
  when(stepScopeA1.getPhaseScope()).thenReturn(phaseScopeA);
  when(stepScopeA1.getWorkingRandom()).thenReturn(workingRandom);
  moveSelector.stepStarted(stepScopeA1);
  assertAllCodesOfEndingMoveSelector(moveSelector,"a1","b1","b2","a2","a3");
  moveSelector.stepEnded(stepScopeA1);
  moveSelector.phaseEnded(phaseScopeA);
  moveSelector.solvingEnded(solverScope);
  verifySolverPhaseLifecycle(childMoveSelectorList.get(0),1,1,1);
  verifySolverPhaseLifecycle(childMoveSelectorList.get(1),1,1,1);
}
