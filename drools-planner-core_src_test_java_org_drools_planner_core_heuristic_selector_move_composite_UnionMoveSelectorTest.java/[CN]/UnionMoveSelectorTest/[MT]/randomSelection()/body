{
  ArrayList<MoveSelector> childMoveSelectorList=new ArrayList<MoveSelector>();
  Map<Selector,Double> fixedProbabilityWeightMap=new HashMap<Selector,Double>();
  DummyMoveSelector moveSelector1=new DummyMoveSelector(Arrays.<Move>asList(new DummyMove("a1"),new DummyMove("a2"),new DummyMove("a3")));
  childMoveSelectorList.add(moveSelector1);
  fixedProbabilityWeightMap.put(moveSelector1,1000.0);
  DummyMoveSelector moveSelector2=new DummyMoveSelector(Arrays.<Move>asList(new DummyMove("a4"),new DummyMove("a5")));
  childMoveSelectorList.add(moveSelector2);
  fixedProbabilityWeightMap.put(moveSelector2,20.0);
  UnionMoveSelector moveSelector=new UnionMoveSelector(childMoveSelectorList,true,new FixedSelectorProbabilityWeightFactory(fixedProbabilityWeightMap));
  Random workingRandom=mock(Random.class);
  when(workingRandom.nextDouble()).thenReturn(1.0 / 1020.0,1019.0 / 1020.0,1000.0 / 1020.0,0.0,999.0 / 1020.0);
  DefaultSolverScope solverScope=mock(DefaultSolverScope.class);
  when(solverScope.getWorkingRandom()).thenReturn(workingRandom);
  moveSelector.solvingStarted(solverScope);
  AbstractSolverPhaseScope phaseScopeA=mock(AbstractSolverPhaseScope.class);
  when(phaseScopeA.getSolverScope()).thenReturn(solverScope);
  when(phaseScopeA.getWorkingRandom()).thenReturn(workingRandom);
  moveSelector.phaseStarted(phaseScopeA);
  AbstractStepScope stepScopeA1=mock(AbstractStepScope.class);
  when(stepScopeA1.getSolverPhaseScope()).thenReturn(phaseScopeA);
  when(stepScopeA1.getWorkingRandom()).thenReturn(workingRandom);
  moveSelector.stepStarted(stepScopeA1);
  assertEquals(false,moveSelector.isContinuous());
  assertEquals(false,moveSelector.isNeverEnding());
  assertEquals(5L,moveSelector.getSize());
  Iterator<Move> iterator=moveSelector.iterator();
  assertTrue(iterator.hasNext());
  assertCode("a1",iterator.next());
  assertTrue(iterator.hasNext());
  assertCode("a4",iterator.next());
  assertTrue(iterator.hasNext());
  assertCode("a5",iterator.next());
  assertTrue(iterator.hasNext());
  assertCode("a2",iterator.next());
  assertTrue(iterator.hasNext());
  assertCode("a3",iterator.next());
  assertFalse(iterator.hasNext());
  moveSelector.stepEnded(stepScopeA1);
  moveSelector.phaseEnded(phaseScopeA);
  moveSelector.solvingEnded(solverScope);
}
