{
  List<Employee> employeeList=solution.getEmployeeList();
  List<TaskType> taskTypeList=new ArrayList<>(taskTypeListSize);
  Set<String> codeSet=new LinkedHashSet<>(taskTypeListSize);
  for (int i=0; i < taskTypeListSize; i++) {
    TaskType taskType=new TaskType();
    taskType.setId((long)i);
    String title=taskTypeNameGenerator.generateNextValue();
    taskType.setTitle(title);
    String code=title.replaceAll("(\\w)\\w* (\\w)\\w* (\\w)\\w*","$1$2$3");
    if (codeSet.contains(code)) {
      int codeSuffixNumber=1;
      while (codeSet.contains(code + codeSuffixNumber)) {
        codeSuffixNumber++;
      }
      code=code + codeSuffixNumber;
    }
    codeSet.add(code);
    taskType.setCode(code);
    taskType.setBaseDuration(BASE_DURATION_MINIMUM + random.nextInt(BASE_DURATION_MAXIMUM - BASE_DURATION_MINIMUM));
    Employee randomEmployee=employeeList.get(random.nextInt(employeeList.size()));
    ArrayList<Skill> randomSkillList=new ArrayList<>(randomEmployee.getSkillSet());
    Collections.shuffle(randomSkillList,random);
    int requiredSkillListSize=1 + random.nextInt(randomSkillList.size() - 1);
    taskType.setRequiredSkillList(new ArrayList<>(randomSkillList.subList(0,requiredSkillListSize)));
    logger.trace("Created taskType with title ({}).",title);
    taskTypeList.add(taskType);
  }
  solution.setTaskTypeList(taskTypeList);
}
