{
  GenuineVariableDescriptor variableDescriptor=TestdataChainedEntity.buildVariableDescriptorForChainedObject();
  ScoreDirector scoreDirector=mock(ScoreDirector.class);
  ExternalizedSingletonInverseVariableSupply nextVariableSupply=new ExternalizedSingletonInverseVariableSupply(variableDescriptor);
  ExternalizedAnchorVariableSupply supply=new ExternalizedAnchorVariableSupply(variableDescriptor,nextVariableSupply);
  TestdataChainedAnchor a0=new TestdataChainedAnchor("a0");
  TestdataChainedEntity a1=new TestdataChainedEntity("a1",a0);
  TestdataChainedEntity a2=new TestdataChainedEntity("a2",a1);
  TestdataChainedEntity a3=new TestdataChainedEntity("a3",a2);
  TestdataChainedAnchor b0=new TestdataChainedAnchor("b0");
  TestdataChainedEntity b1=new TestdataChainedEntity("b1",b0);
  TestdataChainedSolution solution=new TestdataChainedSolution("solution");
  solution.setChainedAnchorList(Arrays.asList(a0,b0));
  solution.setChainedEntityList(Arrays.asList(a1,a2,a3,b1));
  when(scoreDirector.getWorkingSolution()).thenReturn(solution);
  nextVariableSupply.resetWorkingSolution(scoreDirector);
  supply.resetWorkingSolution(scoreDirector);
  assertSame(a0,supply.getAnchor(a1));
  assertSame(a0,supply.getAnchor(a2));
  assertSame(a0,supply.getAnchor(a3));
  assertSame(b0,supply.getAnchor(b1));
  nextVariableSupply.beforeVariableChanged(scoreDirector,a3);
  supply.beforeVariableChanged(scoreDirector,a3);
  a3.setChainedObject(b1);
  nextVariableSupply.afterVariableChanged(scoreDirector,a3);
  supply.afterVariableChanged(scoreDirector,a3);
  assertSame(a0,supply.getAnchor(a1));
  assertSame(a0,supply.getAnchor(a2));
  assertSame(b0,supply.getAnchor(a3));
  assertSame(b0,supply.getAnchor(b1));
  nextVariableSupply.clearWorkingSolution(scoreDirector);
  supply.clearWorkingSolution(scoreDirector);
}
