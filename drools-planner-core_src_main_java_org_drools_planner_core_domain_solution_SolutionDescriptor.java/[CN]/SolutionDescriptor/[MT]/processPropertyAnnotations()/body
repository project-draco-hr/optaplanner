{
  boolean noPlanningEntityPropertyAnnotation=true;
  for (  PropertyDescriptor propertyDescriptor : solutionBeanInfo.getPropertyDescriptors()) {
    propertyDescriptorMap.put(propertyDescriptor.getName(),propertyDescriptor);
    Method propertyGetter=propertyDescriptor.getReadMethod();
    if (propertyGetter.isAnnotationPresent(PlanningEntityProperty.class)) {
      noPlanningEntityPropertyAnnotation=false;
      entityPropertyDescriptorMap.put(propertyDescriptor.getName(),propertyDescriptor);
    }
 else     if (propertyGetter.isAnnotationPresent(PlanningEntityCollectionProperty.class)) {
      noPlanningEntityPropertyAnnotation=false;
      if (!Collection.class.isAssignableFrom(propertyDescriptor.getPropertyType())) {
        throw new IllegalStateException("The solutionClass (" + solutionClass + ") has a PlanningEntityCollection annotated property ("+ propertyDescriptor.getName()+ ") that does not return a Collection.");
      }
      entityCollectionPropertyDescriptorMap.put(propertyDescriptor.getName(),propertyDescriptor);
    }
  }
  if (noPlanningEntityPropertyAnnotation) {
    throw new IllegalStateException("The solutionClass (" + solutionClass + ") should have at least 1 getter with a PlanningEntityCollection or PlanningEntityProperty"+ " annotation.");
  }
}
