{
  CurriculumCourseSchedule schedule=new CurriculumCourseSchedule();
  schedule.setId(0L);
  schedule.setName(readStringValue("Name:"));
  int courseListSize=readIntegerValue("Courses:");
  int roomListSize=readIntegerValue("Rooms:");
  int dayListSize=readIntegerValue("Days:");
  int timeslotListSize=readIntegerValue("Periods_per_day:");
  int curriculumListSize=readIntegerValue("Curricula:");
  int unavailablePeriodPenaltyListSize=readIntegerValue("Constraints:");
  Map<String,Course> courseMap=readCourseListAndTeacherList(schedule,courseListSize);
  readRoomList(schedule,roomListSize);
  Map<List<Integer>,Period> periodMap=createPeriodListAndDayListAndTimeslotList(schedule,dayListSize,timeslotListSize);
  readCurriculumList(schedule,courseMap,curriculumListSize);
  readUnavailablePeriodPenaltyList(schedule,courseMap,periodMap,unavailablePeriodPenaltyListSize);
  readEmptyLine();
  readConstantLine("END.");
  createLectureList(schedule);
  logger.info("CurriculumCourseSchedule with {} teachers, {} curricula, {} courses, {} periods, {} rooms" + " and {} unavailable period constraints.",new Object[]{schedule.getTeacherList().size(),schedule.getCurriculumList().size(),schedule.getCourseList().size(),schedule.getPeriodList().size(),schedule.getRoomList().size(),schedule.getUnavailablePeriodPenaltyList().size()});
  int possibleForOneLectureSize=schedule.getPeriodList().size() * schedule.getRoomList().size();
  BigInteger possibleSolutionSize=BigInteger.valueOf(possibleForOneLectureSize).pow(schedule.getLectureList().size());
  String flooredPossibleSolutionSize="10^" + (possibleSolutionSize.toString().length() - 1);
  logger.info("CurriculumCourseSchedule with flooredPossibleSolutionSize ({}) and possibleSolutionSize ({}).",flooredPossibleSolutionSize,possibleSolutionSize);
  return schedule;
}
