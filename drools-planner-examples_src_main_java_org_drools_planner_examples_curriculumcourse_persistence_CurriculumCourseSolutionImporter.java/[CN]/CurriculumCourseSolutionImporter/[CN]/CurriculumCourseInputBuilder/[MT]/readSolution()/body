{
  CurriculumCourseSchedule schedule=new CurriculumCourseSchedule();
  schedule.setId(0L);
  schedule.setName(readParam("Name:"));
  int courseListSize=Integer.parseInt(readParam("Courses:"));
  int roomListSize=Integer.parseInt(readParam("Rooms:"));
  int dayListSize=Integer.parseInt(readParam("Days:"));
  int timeslotListSize=Integer.parseInt(readParam("Periods_per_day:"));
  int curriculumListSize=Integer.parseInt(readParam("Curricula:"));
  int unavailablePeriodConstraintListSize=Integer.parseInt(readParam("Constraints:"));
  Map<String,Course> courseMap=readCourseListAndTeacherList(schedule,courseListSize);
  readRoomList(schedule,roomListSize);
  Map<List<Integer>,Period> periodMap=createPeriodListAndDayListAndTimeslotList(schedule,dayListSize,timeslotListSize);
  readCurriculumList(schedule,courseMap,curriculumListSize);
  readUnavailablePeriodConstraintList(schedule,courseMap,periodMap,unavailablePeriodConstraintListSize);
  readHeader("END.");
  schedule.setLectureList(createLectureList(schedule.getCourseList()));
  logger.info("CurriculumCourseSchedule with {} teachers, {} curricula, {} courses, {} periods, {} rooms" + " and {} unavailable period constraints.",new Object[]{schedule.getTeacherList().size(),schedule.getCurriculumList().size(),schedule.getCourseList().size(),schedule.getPeriodList().size(),schedule.getRoomList().size(),schedule.getUnavailablePeriodConstraintList().size()});
  int possibleForOneLectureSize=schedule.getPeriodList().size() * schedule.getRoomList().size();
  BigInteger possibleSolutionSize=BigInteger.valueOf(possibleForOneLectureSize).pow(schedule.getLectureList().size());
  String flooredPossibleSolutionSize="10^" + (possibleSolutionSize.toString().length() - 1);
  logger.info("CurriculumCourseSchedule with flooredPossibleSolutionSize ({}) and possibleSolutionSize({}).",flooredPossibleSolutionSize,possibleSolutionSize);
  return schedule;
}
