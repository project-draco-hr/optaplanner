{
  PlanningEntityDescriptor entityDescriptor=deduceEntityDescriptor(solutionDescriptor,planningEntityClass);
  SubChainSelectorConfig subChainSelectorConfig_=subChainSelectorConfig == null ? new SubChainSelectorConfig() : subChainSelectorConfig;
  SubChainSelector subChainSelector=subChainSelectorConfig_.buildSubChainSelector(environmentMode,solutionDescriptor,entityDescriptor,minimumCacheType,SelectionOrder.fromRandomSelectionBoolean(randomSelection));
  ValueSelectorConfig valueSelectorConfig_=valueSelectorConfig == null ? new ValueSelectorConfig() : valueSelectorConfig;
  ValueSelector valueSelector=valueSelectorConfig_.buildValueSelector(environmentMode,solutionDescriptor,entityDescriptor,minimumCacheType,SelectionOrder.fromRandomSelectionBoolean(randomSelection));
  if (!(valueSelector instanceof EntityIndependentValueSelector)) {
    throw new IllegalArgumentException("The moveSelectorConfig (" + this + ") needs to be based on a EntityIndependentValueSelector."+ " Check your @"+ ValueRange.class.getSimpleName()+ " annotations.");
  }
  return new SubChainChangeMoveSelector(subChainSelector,(EntityIndependentValueSelector)valueSelector,randomSelection,selectReversingMoveToo == null ? true : selectReversingMoveToo);
}
