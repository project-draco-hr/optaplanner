{
  EntitySelector childEntitySelector=SelectorTestUtils.mockEntitySelector(TestdataEntity.class,new TestdataEntity("e1"),new TestdataEntity("e2"),new TestdataEntity("e3"),new TestdataEntity("e4"));
  SelectionFilter<TestdataEntity> filter=new SelectionFilter<TestdataEntity>(){
    public boolean accept(    ScoreDirector scoreDirector,    TestdataEntity entity){
      return !entity.getCode().equals("e3");
    }
  }
;
  List<SelectionFilter> filterList=Arrays.<SelectionFilter>asList(filter);
  EntitySelector entitySelector=new FilteringEntitySelector(childEntitySelector,filterList);
  if (cacheType.isCached()) {
    entitySelector=new CachingEntitySelector(entitySelector,cacheType,false);
  }
  DefaultSolverScope solverScope=mock(DefaultSolverScope.class);
  entitySelector.solvingStarted(solverScope);
  AbstractSolverPhaseScope phaseScopeA=mock(AbstractSolverPhaseScope.class);
  when(phaseScopeA.getSolverScope()).thenReturn(solverScope);
  entitySelector.phaseStarted(phaseScopeA);
  AbstractStepScope stepScopeA1=mock(AbstractStepScope.class);
  when(stepScopeA1.getPhaseScope()).thenReturn(phaseScopeA);
  entitySelector.stepStarted(stepScopeA1);
  assertAllCodesOfEntitySelector(entitySelector,(cacheType.isNotCached() ? 4L : 3L),"e1","e2","e4");
  entitySelector.stepEnded(stepScopeA1);
  AbstractStepScope stepScopeA2=mock(AbstractStepScope.class);
  when(stepScopeA2.getPhaseScope()).thenReturn(phaseScopeA);
  entitySelector.stepStarted(stepScopeA2);
  assertAllCodesOfEntitySelector(entitySelector,(cacheType.isNotCached() ? 4L : 3L),"e1","e2","e4");
  entitySelector.stepEnded(stepScopeA2);
  entitySelector.phaseEnded(phaseScopeA);
  AbstractSolverPhaseScope phaseScopeB=mock(AbstractSolverPhaseScope.class);
  when(phaseScopeB.getSolverScope()).thenReturn(solverScope);
  entitySelector.phaseStarted(phaseScopeB);
  AbstractStepScope stepScopeB1=mock(AbstractStepScope.class);
  when(stepScopeB1.getPhaseScope()).thenReturn(phaseScopeB);
  entitySelector.stepStarted(stepScopeB1);
  assertAllCodesOfEntitySelector(entitySelector,(cacheType.isNotCached() ? 4L : 3L),"e1","e2","e4");
  entitySelector.stepEnded(stepScopeB1);
  AbstractStepScope stepScopeB2=mock(AbstractStepScope.class);
  when(stepScopeB2.getPhaseScope()).thenReturn(phaseScopeB);
  entitySelector.stepStarted(stepScopeB2);
  assertAllCodesOfEntitySelector(entitySelector,(cacheType.isNotCached() ? 4L : 3L),"e1","e2","e4");
  entitySelector.stepEnded(stepScopeB2);
  AbstractStepScope stepScopeB3=mock(AbstractStepScope.class);
  when(stepScopeB3.getPhaseScope()).thenReturn(phaseScopeB);
  entitySelector.stepStarted(stepScopeB3);
  assertAllCodesOfEntitySelector(entitySelector,(cacheType.isNotCached() ? 4L : 3L),"e1","e2","e4");
  entitySelector.stepEnded(stepScopeB3);
  entitySelector.phaseEnded(phaseScopeB);
  entitySelector.solvingEnded(solverScope);
  verifySolverPhaseLifecycle(childEntitySelector,1,2,5);
  verify(childEntitySelector,times(timesCalled)).iterator();
  verify(childEntitySelector,times(timesCalled)).getSize();
}
