{
  if (score.compareTo(endScore) > 0) {
    return 1.0;
  }
 else   if (score.compareTo(startScore) < 0) {
    return 0.0;
  }
  double timeGradient=0.0;
  double levelTimeGradientWeight=1.0;
  int scoresSize=hardScoresSize + softScoresSize;
  for (int i=0; i < scoresSize; i++) {
    if (i != (scoresSize - 1)) {
      levelTimeGradientWeight*=recursiveTimeGradientWeight;
    }
    int startScoreLevel=(i < hardScoresSize) ? startScore.getHardScore(i) : startScore.getSoftScore(i);
    int endScoreLevel=(i < hardScoresSize) ? endScore.getHardScore(i) : endScore.getSoftScore(i);
    int scoreLevel=(i < hardScoresSize) ? score.getHardScore(i) : score.getSoftScore(i);
    if (scoreLevel >= endScoreLevel) {
      timeGradient+=levelTimeGradientWeight;
    }
 else {
      if (scoreLevel <= startScoreLevel) {
      }
 else {
        int levelTotal=endScoreLevel - startScoreLevel;
        int levelDelta=scoreLevel - startScoreLevel;
        double levelTimeGradient=(double)levelDelta / (double)levelTotal;
        timeGradient+=levelTimeGradient * levelTimeGradientWeight;
      }
    }
  }
  if (timeGradient > 1.0) {
    timeGradient=1.0;
  }
  return timeGradient;
}
