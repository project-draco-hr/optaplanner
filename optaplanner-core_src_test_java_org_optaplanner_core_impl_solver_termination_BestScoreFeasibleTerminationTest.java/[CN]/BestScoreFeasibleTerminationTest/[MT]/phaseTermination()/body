{
  FeasibilityScoreDefinition scoreDefinition=mock(FeasibilityScoreDefinition.class);
  when(scoreDefinition.getFeasibleLevelCount()).thenReturn(1);
  Termination termination=new BestScoreFeasibleTermination(scoreDefinition,new double[]{});
  AbstractSolverPhaseScope phaseScope=mock(AbstractSolverPhaseScope.class);
  when(phaseScope.getScoreDefinition()).thenReturn(new HardSoftScoreDefinition());
  when(phaseScope.getStartingScore()).thenReturn(HardSoftScore.valueOf(-100,-100));
  when(phaseScope.getBestScore()).thenReturn(HardSoftScore.valueOf(-100,-100));
  assertEquals(false,termination.isPhaseTerminated(phaseScope));
  assertEquals(0.0,termination.calculatePhaseTimeGradient(phaseScope),0.0);
  when(phaseScope.getBestScore()).thenReturn(HardSoftScore.valueOf(-80,-100));
  assertEquals(false,termination.isPhaseTerminated(phaseScope));
  assertEquals(0.2,termination.calculatePhaseTimeGradient(phaseScope),0.0);
  when(phaseScope.getBestScore()).thenReturn(HardSoftScore.valueOf(-60,-100));
  assertEquals(false,termination.isPhaseTerminated(phaseScope));
  assertEquals(0.4,termination.calculatePhaseTimeGradient(phaseScope),0.0);
  when(phaseScope.getBestScore()).thenReturn(HardSoftScore.valueOf(-40,-100));
  assertEquals(false,termination.isPhaseTerminated(phaseScope));
  assertEquals(0.6,termination.calculatePhaseTimeGradient(phaseScope),0.0);
  when(phaseScope.getBestScore()).thenReturn(HardSoftScore.valueOf(-20,-100));
  assertEquals(false,termination.isPhaseTerminated(phaseScope));
  assertEquals(0.8,termination.calculatePhaseTimeGradient(phaseScope),0.0);
  when(phaseScope.getBestScore()).thenReturn(HardSoftScore.valueOf(0,-100));
  assertEquals(true,termination.isPhaseTerminated(phaseScope));
  assertEquals(1.0,termination.calculatePhaseTimeGradient(phaseScope),0.0);
}
