{
  BendableLongScoreHolder scoreHolder=new BendableLongScoreHolder(constraintMatchEnabled,1,2);
  long value1=1000000000000L;
  long value2=1000000000001L;
  long value3=1000000000002L;
  long value4=1000000000003L;
  long value5=-1000000000004L;
  scoreHolder.addHardConstraintMatch(createRuleContext("scoreRule1"),0,value1);
  RuleContext ruleContext2=createRuleContext("scoreRule2");
  scoreHolder.addHardConstraintMatch(ruleContext2,0,value2);
  callUnMatch(ruleContext2);
  RuleContext ruleContext3=createRuleContext("scoreRule3");
  scoreHolder.addSoftConstraintMatch(ruleContext3,0,value3);
  scoreHolder.addSoftConstraintMatch(ruleContext3,0,value4);
  scoreHolder.addSoftConstraintMatch(createRuleContext("scoreRule4"),1,value5);
  assertEquals(BendableLongScore.valueOf(new long[]{value1},new long[]{value4,value5}),scoreHolder.extractScore());
  if (constraintMatchEnabled) {
    assertEquals(4,scoreHolder.getConstraintMatchTotals().size());
  }
}
