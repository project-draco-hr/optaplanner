{
  BendableLongScoreHolder scoreHolder=new BendableLongScoreHolder(constraintMatchEnabled,1,2);
  scoreHolder.addHardConstraintMatch(mockRuleContext("scoreRule1"),0,1000000000001L);
  RuleContext ruleContext2=mockRuleContext("scoreRule2");
  scoreHolder.addHardConstraintMatch(ruleContext2,0,1000000000020L);
  callUnMatch(ruleContext2);
  RuleContext ruleContext3=mockRuleContext("scoreRule3");
  scoreHolder.addSoftConstraintMatch(ruleContext3,0,1000000000300L);
  scoreHolder.addSoftConstraintMatch(ruleContext3,0,1000000040000L);
  scoreHolder.addHardConstraintMatch(ruleContext3,0,1000000000300L);
  scoreHolder.addHardConstraintMatch(ruleContext3,0,1000000000400L);
  scoreHolder.addSoftConstraintMatch(mockRuleContext("scoreRule4"),1,-1000000500000L);
  RuleContext ruleContext5=mockRuleContext("scoreRule5");
  scoreHolder.addHardConstraintMatch(ruleContext5,0,1000000000001L);
  scoreHolder.addSoftConstraintMatch(ruleContext5,0,1000000000001L);
  callUnMatch(ruleContext5);
  assertEquals(BendableLongScore.valueOf(new long[]{2000000000401L},new long[]{1000000040000L,-1000000500000L}),scoreHolder.extractScore());
  if (constraintMatchEnabled) {
    assertEquals(7,scoreHolder.getConstraintMatchTotals().size());
  }
}
