{
  failureCount=0;
  boolean firstNonFailure=true;
  totalScore=null;
  uninitializedSolutionCount=0;
  totalUninitializedVariableCount=0;
  infeasibleScoreCount=0;
  List<SubSingleBenchmarkResult> successResultList=new ArrayList<SubSingleBenchmarkResult>(subSingleBenchmarkResultList);
  for (Iterator<SubSingleBenchmarkResult> it=successResultList.iterator(); it.hasNext(); ) {
    SubSingleBenchmarkResult subSingleBenchmarkResult=it.next();
    if (subSingleBenchmarkResult.isFailure()) {
      failureCount++;
      it.remove();
    }
 else {
      if (!subSingleBenchmarkResult.isInitialized()) {
        uninitializedSolutionCount++;
        totalUninitializedVariableCount+=subSingleBenchmarkResult.getUninitializedVariableCount();
      }
 else       if (!subSingleBenchmarkResult.isScoreFeasible()) {
        infeasibleScoreCount++;
      }
      if (firstNonFailure) {
        totalScore=subSingleBenchmarkResult.getScore();
        firstNonFailure=false;
      }
 else {
        totalScore=totalScore.add(subSingleBenchmarkResult.getScore());
      }
    }
  }
  if (!firstNonFailure) {
    averageScore=totalScore.divide(getSuccessCount());
  }
  determineRanking(successResultList);
}
