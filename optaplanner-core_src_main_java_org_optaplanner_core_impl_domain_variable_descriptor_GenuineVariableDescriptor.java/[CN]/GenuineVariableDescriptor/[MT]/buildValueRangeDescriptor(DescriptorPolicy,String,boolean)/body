{
  if (descriptorPolicy.hasFromSolutionValueRangeProvider(valueRangeProviderRef)) {
    Method readMethod=descriptorPolicy.getFromSolutionValueRangeProvider(valueRangeProviderRef);
    return new FromSolutionPropertyValueRangeDescriptor(this,addNullInValueRange,readMethod);
  }
 else   if (descriptorPolicy.hasFromEntityValueRangeProvider(valueRangeProviderRef)) {
    Method readMethod=descriptorPolicy.getFromEntityValueRangeProvider(valueRangeProviderRef);
    return new FromEntityPropertyValueRangeDescriptor(this,addNullInValueRange,readMethod);
  }
 else {
    Collection<String> providerIds=descriptorPolicy.getValueRangeProviderIds();
    throw new IllegalArgumentException("The entityClass (" + entityDescriptor.getEntityClass() + ") has a @"+ PlanningVariable.class.getSimpleName()+ " property ("+ variablePropertyAccessor.getName()+ ") with a valueRangeProviderRef ("+ valueRangeProviderRef+ ") that does not exist in a @"+ ValueRangeProvider.class.getSimpleName()+ " on the solution class ("+ entityDescriptor.getSolutionDescriptor().getSolutionClass().getSimpleName()+ ") or on that entityClass.\n"+ "The valueRangeProviderRef ("+ valueRangeProviderRef+ ") does not appear in the valueRangeProvideIds ("+ providerIds+ ")."+ (!providerIds.isEmpty() ? "" : "\nMaybe a @" + ValueRangeProvider.class.getSimpleName() + " annotation is missing on a method in the solution class ("+ entityDescriptor.getSolutionDescriptor().getSolutionClass().getSimpleName()+ ")."));
  }
}
