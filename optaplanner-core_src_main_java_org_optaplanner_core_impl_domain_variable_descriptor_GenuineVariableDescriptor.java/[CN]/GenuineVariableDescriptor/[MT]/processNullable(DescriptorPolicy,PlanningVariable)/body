{
  nullable=planningVariableAnnotation.nullable();
  if (nullable && variableMemberAccessor.getType().isPrimitive()) {
    throw new IllegalArgumentException("The entityClass (" + entityDescriptor.getEntityClass() + ") has a PlanningVariable annotated property ("+ variableMemberAccessor.getName()+ ") with nullable ("+ nullable+ "), which is not compatible with the primitive propertyType ("+ variableMemberAccessor.getType()+ ").");
  }
  Class<? extends SelectionFilter> reinitializeVariableEntityFilterClass=planningVariableAnnotation.reinitializeVariableEntityFilter();
  if (reinitializeVariableEntityFilterClass == PlanningVariable.NullReinitializeVariableEntityFilter.class) {
    reinitializeVariableEntityFilterClass=null;
  }
  if (reinitializeVariableEntityFilterClass != null) {
    reinitializeVariableEntityFilter=ConfigUtils.newInstance(this,"reinitializeVariableEntityFilterClass",reinitializeVariableEntityFilterClass);
  }
 else {
    reinitializeVariableEntityFilter=new NullValueReinitializeVariableEntityFilter(this);
  }
}
