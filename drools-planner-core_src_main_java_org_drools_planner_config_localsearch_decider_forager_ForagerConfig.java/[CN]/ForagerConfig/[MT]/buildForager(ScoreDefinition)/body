{
  if (forager != null) {
    return forager;
  }
 else   if (foragerClass != null) {
    try {
      return foragerClass.newInstance();
    }
 catch (    InstantiationException e) {
      throw new IllegalArgumentException("foragerClass (" + foragerClass.getName() + ") does not have a public no-arg constructor",e);
    }
catch (    IllegalAccessException e) {
      throw new IllegalArgumentException("foragerClass (" + foragerClass.getName() + ") does not have a public no-arg constructor",e);
    }
  }
  PickEarlyType pickEarlyType=(this.pickEarlyType == null) ? PickEarlyType.NEVER : this.pickEarlyType;
  int minimalAcceptedSelection=(this.minimalAcceptedSelection == null) ? Integer.MAX_VALUE : this.minimalAcceptedSelection;
  AcceptedForager forager=new AcceptedForager(pickEarlyType,minimalAcceptedSelection);
  forager.setDeciderScoreComparatorFactory(deciderScoreComparatorFactoryConfig.buildDeciderScoreComparatorFactory());
  return forager;
}
