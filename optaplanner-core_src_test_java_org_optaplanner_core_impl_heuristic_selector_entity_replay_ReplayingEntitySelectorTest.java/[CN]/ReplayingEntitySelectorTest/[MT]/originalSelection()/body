{
  EntitySelector childEntitySelector=SelectorTestUtils.mockEntitySelector(TestdataEntity.class,new TestdataEntity("e1"),new TestdataEntity("e2"),new TestdataEntity("e3"));
  RecordingEntitySelector recordingEntitySelector=new RecordingEntitySelector(childEntitySelector);
  ReplayingEntitySelector replayingEntitySelector=new ReplayingEntitySelector(recordingEntitySelector);
  DefaultSolverScope solverScope=mock(DefaultSolverScope.class);
  recordingEntitySelector.solvingStarted(solverScope);
  replayingEntitySelector.solvingStarted(solverScope);
  AbstractSolverPhaseScope phaseScopeA=mock(AbstractSolverPhaseScope.class);
  when(phaseScopeA.getSolverScope()).thenReturn(solverScope);
  recordingEntitySelector.phaseStarted(phaseScopeA);
  replayingEntitySelector.phaseStarted(phaseScopeA);
  AbstractStepScope stepScopeA1=mock(AbstractStepScope.class);
  when(stepScopeA1.getPhaseScope()).thenReturn(phaseScopeA);
  recordingEntitySelector.stepStarted(stepScopeA1);
  replayingEntitySelector.stepStarted(stepScopeA1);
  runOriginalAsserts(recordingEntitySelector,replayingEntitySelector);
  recordingEntitySelector.stepEnded(stepScopeA1);
  replayingEntitySelector.stepEnded(stepScopeA1);
  AbstractStepScope stepScopeA2=mock(AbstractStepScope.class);
  when(stepScopeA2.getPhaseScope()).thenReturn(phaseScopeA);
  recordingEntitySelector.stepStarted(stepScopeA2);
  replayingEntitySelector.stepStarted(stepScopeA2);
  runOriginalAsserts(recordingEntitySelector,replayingEntitySelector);
  recordingEntitySelector.stepEnded(stepScopeA2);
  replayingEntitySelector.stepEnded(stepScopeA2);
  recordingEntitySelector.phaseEnded(phaseScopeA);
  replayingEntitySelector.phaseEnded(phaseScopeA);
  AbstractSolverPhaseScope phaseScopeB=mock(AbstractSolverPhaseScope.class);
  when(phaseScopeB.getSolverScope()).thenReturn(solverScope);
  recordingEntitySelector.phaseStarted(phaseScopeB);
  replayingEntitySelector.phaseStarted(phaseScopeB);
  AbstractStepScope stepScopeB1=mock(AbstractStepScope.class);
  when(stepScopeB1.getPhaseScope()).thenReturn(phaseScopeB);
  recordingEntitySelector.stepStarted(stepScopeB1);
  replayingEntitySelector.stepStarted(stepScopeB1);
  runOriginalAsserts(recordingEntitySelector,replayingEntitySelector);
  recordingEntitySelector.stepEnded(stepScopeB1);
  replayingEntitySelector.stepEnded(stepScopeB1);
  recordingEntitySelector.phaseEnded(phaseScopeB);
  replayingEntitySelector.phaseEnded(phaseScopeB);
  recordingEntitySelector.solvingEnded(solverScope);
  replayingEntitySelector.solvingEnded(solverScope);
  verifySolverPhaseLifecycle(childEntitySelector,1,2,3);
  verify(childEntitySelector,times(3)).iterator();
}
