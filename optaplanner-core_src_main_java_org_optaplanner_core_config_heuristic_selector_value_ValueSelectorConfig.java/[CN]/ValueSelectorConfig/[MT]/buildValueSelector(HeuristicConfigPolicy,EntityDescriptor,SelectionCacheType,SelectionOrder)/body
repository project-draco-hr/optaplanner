{
  if (downcastEntityClass != null) {
    Class<?> parentEntityClass=entityDescriptor.getEntityClass();
    if (!parentEntityClass.isAssignableFrom(downcastEntityClass)) {
      throw new IllegalStateException("The downcastEntityClass (" + downcastEntityClass + ") is not a subclass of the parentEntityClass ("+ parentEntityClass+ ") configured by the "+ EntitySelector.class.getSimpleName()+ ".");
    }
    entityDescriptor=configPolicy.getSolutionDescriptor().getEntityDescriptorStrict(downcastEntityClass);
  }
  GenuineVariableDescriptor variableDescriptor=deduceVariableDescriptor(entityDescriptor,variableName);
  SelectionCacheType resolvedCacheType=SelectionCacheType.resolve(cacheType,minimumCacheType);
  SelectionOrder resolvedSelectionOrder=SelectionOrder.resolve(selectionOrder,inheritedSelectionOrder);
  validateCacheTypeVersusSelectionOrder(resolvedCacheType,resolvedSelectionOrder);
  validateSorting(resolvedSelectionOrder);
  validateProbability(resolvedSelectionOrder);
  validateSelectedLimit(minimumCacheType);
  ValueSelector valueSelector=buildBaseValueSelector(configPolicy,variableDescriptor,SelectionCacheType.max(minimumCacheType,resolvedCacheType),determineBaseRandomSelection(variableDescriptor,resolvedCacheType,resolvedSelectionOrder));
  valueSelector=applyInitializedChainedValueFilter(configPolicy,variableDescriptor,resolvedCacheType,resolvedSelectionOrder,valueSelector);
  valueSelector=applySorting(resolvedCacheType,resolvedSelectionOrder,valueSelector);
  valueSelector=applyProbability(resolvedCacheType,resolvedSelectionOrder,valueSelector);
  valueSelector=applyShuffling(resolvedCacheType,resolvedSelectionOrder,valueSelector);
  valueSelector=applyCaching(resolvedCacheType,resolvedSelectionOrder,valueSelector);
  valueSelector=applySelectedLimit(resolvedCacheType,resolvedSelectionOrder,valueSelector);
  valueSelector=applyReinitializeVariableFiltering(configPolicy,valueSelector);
  valueSelector=applyDowncasting(configPolicy,valueSelector);
  return valueSelector;
}
