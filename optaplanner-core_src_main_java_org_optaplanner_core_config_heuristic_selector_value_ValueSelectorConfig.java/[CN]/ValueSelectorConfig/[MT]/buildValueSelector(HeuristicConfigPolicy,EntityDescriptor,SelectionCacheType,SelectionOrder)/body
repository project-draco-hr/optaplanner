{
  entityDescriptor=downcastEntityDescriptor(configPolicy,entityDescriptor);
  GenuineVariableDescriptor variableDescriptor=deduceVariableDescriptor(entityDescriptor,variableName);
  SelectionCacheType resolvedCacheType=SelectionCacheType.resolve(cacheType,minimumCacheType);
  SelectionOrder resolvedSelectionOrder=SelectionOrder.resolve(selectionOrder,inheritedSelectionOrder);
  validateNearby(resolvedCacheType,resolvedSelectionOrder);
  validateCacheTypeVersusSelectionOrder(resolvedCacheType,resolvedSelectionOrder);
  validateSorting(resolvedSelectionOrder);
  validateProbability(resolvedSelectionOrder);
  validateSelectedLimit(minimumCacheType);
  ValueSelector valueSelector=buildBaseValueSelector(configPolicy,variableDescriptor,SelectionCacheType.max(minimumCacheType,resolvedCacheType),determineBaseRandomSelection(variableDescriptor,resolvedCacheType,resolvedSelectionOrder));
  valueSelector=applyNearby(configPolicy,minimumCacheType,resolvedCacheType,resolvedSelectionOrder,valueSelector);
  valueSelector=applyInitializedChainedValueFilter(configPolicy,variableDescriptor,resolvedCacheType,resolvedSelectionOrder,valueSelector);
  valueSelector=applySorting(resolvedCacheType,resolvedSelectionOrder,valueSelector);
  valueSelector=applyProbability(resolvedCacheType,resolvedSelectionOrder,valueSelector);
  valueSelector=applyShuffling(resolvedCacheType,resolvedSelectionOrder,valueSelector);
  valueSelector=applyCaching(resolvedCacheType,resolvedSelectionOrder,valueSelector);
  valueSelector=applySelectedLimit(resolvedCacheType,resolvedSelectionOrder,valueSelector);
  valueSelector=applyReinitializeVariableFiltering(configPolicy,valueSelector);
  valueSelector=applyDowncasting(configPolicy,valueSelector);
  return valueSelector;
}
