{
  if (resolvedSelectionOrder == SelectionOrder.SORTED) {
    SelectionSorter sorter;
    if (sorterManner != null) {
      sorter=sorterManner.determineSorter(valueSelector.getVariableDescriptor());
    }
 else     if (sorterComparatorClass != null) {
      Comparator<Object> sorterComparator=ConfigUtils.newInstance(this,"sorterComparatorClass",sorterComparatorClass);
      sorter=new ComparatorSelectionSorter(sorterComparator,SelectionSorterOrder.resolve(sorterOrder));
    }
 else     if (sorterWeightFactoryClass != null) {
      SelectionSorterWeightFactory sorterWeightFactory=ConfigUtils.newInstance(this,"sorterWeightFactoryClass",sorterWeightFactoryClass);
      sorter=new WeightFactorySelectionSorter(sorterWeightFactory,SelectionSorterOrder.resolve(sorterOrder));
    }
 else     if (sorterClass != null) {
      sorter=ConfigUtils.newInstance(this,"sorterClass",sorterClass);
    }
 else {
      throw new IllegalArgumentException("The valueSelectorConfig (" + this + ") with resolvedSelectionOrder ("+ resolvedSelectionOrder+ ") needs a sorterManner ("+ sorterManner+ ") or a sorterComparatorClass ("+ sorterComparatorClass+ ") or a sorterWeightFactoryClass ("+ sorterWeightFactoryClass+ ") or a sorterClass ("+ sorterClass+ ").");
    }
    if (!valueSelector.getVariableDescriptor().isValueRangeEntityIndependent() && resolvedCacheType == SelectionCacheType.STEP) {
      valueSelector=new EntityDependentSortingValueSelector(valueSelector,resolvedCacheType,sorter);
    }
 else {
      if (!(valueSelector instanceof EntityIndependentValueSelector)) {
        throw new IllegalArgumentException("The valueSelectorConfig (" + this + ") with resolvedCacheType ("+ resolvedCacheType+ ") and resolvedSelectionOrder ("+ resolvedSelectionOrder+ ") needs to be based on a EntityIndependentValueSelector ("+ valueSelector+ ")."+ " Check your @"+ ValueRangeProvider.class.getSimpleName()+ " annotations.");
      }
      valueSelector=new SortingValueSelector((EntityIndependentValueSelector)valueSelector,resolvedCacheType,sorter);
    }
  }
  return valueSelector;
}
