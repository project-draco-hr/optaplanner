{
  super.phaseStarted(phaseScope);
  long originSize=originEntitySelector.getSize();
  if (originSize > (long)Integer.MAX_VALUE) {
    throw new IllegalStateException("The originEntitySelector (" + originEntitySelector + ") has an entitySize ("+ originSize+ ") which is higher than Integer.MAX_VALUE.");
  }
  originToDestinationsMap=new HashMap<Object,Object[]>((int)originSize);
  for (Iterator originIt=originEntitySelector.endingIterator(); originIt.hasNext(); ) {
    final Object origin=originIt.next();
    long childSize=childValueSelector.getSize(origin);
    if (childSize > (long)Integer.MAX_VALUE) {
      throw new IllegalStateException("The childEntitySelector (" + childValueSelector + ") has an entitySize ("+ childSize+ ") which is higher than Integer.MAX_VALUE.");
    }
    Object[] destinations=new Object[(int)childSize];
    int i=0;
    for (Iterator childIt=childValueSelector.endingIterator(origin); childIt.hasNext(); i++) {
      destinations[i]=childIt.next();
    }
    Arrays.sort(destinations,new Comparator<Object>(){
      @Override public int compare(      Object a,      Object b){
        double aDistance=nearbyDistanceMeter.getNearbyDistance(origin,a);
        double bDistance=nearbyDistanceMeter.getNearbyDistance(origin,b);
        if (aDistance < bDistance) {
          return -1;
        }
 else         if (aDistance > bDistance) {
          return 1;
        }
 else {
          return 0;
        }
      }
    }
);
    originToDestinationsMap.put(origin,destinations);
  }
}
