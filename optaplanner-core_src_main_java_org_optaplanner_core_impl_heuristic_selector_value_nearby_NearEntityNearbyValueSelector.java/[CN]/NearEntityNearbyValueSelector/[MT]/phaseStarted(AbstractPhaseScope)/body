{
  super.phaseStarted(phaseScope);
  long originSize=originEntitySelector.getSize();
  if (originSize > (long)Integer.MAX_VALUE) {
    throw new IllegalStateException("The originEntitySelector (" + originEntitySelector + ") has an entitySize ("+ originSize+ ") which is higher than Integer.MAX_VALUE.");
  }
  nearbyDistanceMatrix=new NearbyDistanceMatrix(nearbyDistanceMeter,(int)originSize);
  for (Iterator originIt=originEntitySelector.endingIterator(); originIt.hasNext(); ) {
    final Object origin=originIt.next();
    long childSize=childValueSelector.getSize(origin);
    if (childSize > (long)Integer.MAX_VALUE) {
      throw new IllegalStateException("The childEntitySelector (" + childValueSelector + ") has an entitySize ("+ childSize+ ") which is higher than Integer.MAX_VALUE.");
    }
    int destinationSize=(int)childSize;
    if (randomSelection) {
      int overallSizeMaximum=nearbyRandom.getOverallSizeMaximum();
      if (discardNearbyIndexZero && overallSizeMaximum < Integer.MAX_VALUE) {
        overallSizeMaximum++;
      }
      if (destinationSize > overallSizeMaximum) {
        destinationSize=overallSizeMaximum;
      }
    }
    nearbyDistanceMatrix.addAllDestinations(origin,childValueSelector.endingIterator(origin),destinationSize);
  }
}
