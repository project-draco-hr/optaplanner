{
  PlanningEntityTabuAcceptor acceptor=new PlanningEntityTabuAcceptor();
  acceptor.setTabuSizer(new FixedTabuSizer(2));
  acceptor.setAspirationEnabled(true);
  TestdataEntity e0=new TestdataEntity("e0");
  TestdataEntity e1=new TestdataEntity("e1");
  TestdataEntity e2=new TestdataEntity("e2");
  TestdataEntity e3=new TestdataEntity("e3");
  TestdataEntity e4=new TestdataEntity("e4");
  DefaultSolverScope solverScope=new DefaultSolverScope();
  solverScope.setBestScore(SimpleScore.valueOf(0));
  LocalSearchSolverPhaseScope phaseScope=new LocalSearchSolverPhaseScope(solverScope);
  acceptor.phaseStarted(phaseScope);
  LocalSearchStepScope stepScope0=new LocalSearchStepScope(phaseScope);
  stepScope0.setStepIndex(0);
  LocalSearchMoveScope moveScope1=buildMoveScope(stepScope0,e1);
  assertEquals(true,acceptor.isAccepted(buildMoveScope(stepScope0,e0)));
  assertEquals(true,acceptor.isAccepted(moveScope1));
  assertEquals(true,acceptor.isAccepted(buildMoveScope(stepScope0,e2)));
  assertEquals(true,acceptor.isAccepted(buildMoveScope(stepScope0,e3)));
  assertEquals(true,acceptor.isAccepted(buildMoveScope(stepScope0,e4)));
  assertEquals(true,acceptor.isAccepted(buildMoveScope(stepScope0,e2)));
  stepScope0.setStep(moveScope1.getMove());
  acceptor.stepEnded(stepScope0);
  LocalSearchStepScope stepScope1=new LocalSearchStepScope(phaseScope);
  stepScope1.setStepIndex(1);
  LocalSearchMoveScope moveScope2=buildMoveScope(stepScope1,e2);
  assertEquals(true,acceptor.isAccepted(buildMoveScope(stepScope1,e0)));
  assertEquals(false,acceptor.isAccepted(buildMoveScope(stepScope1,e1)));
  assertEquals(true,acceptor.isAccepted(moveScope2));
  assertEquals(true,acceptor.isAccepted(buildMoveScope(stepScope1,e3)));
  assertEquals(true,acceptor.isAccepted(buildMoveScope(stepScope1,e4)));
  assertEquals(true,acceptor.isAccepted(buildMoveScope(stepScope1,e2)));
  stepScope1.setStep(moveScope2.getMove());
  acceptor.stepEnded(stepScope1);
  LocalSearchStepScope stepScope2=new LocalSearchStepScope(phaseScope);
  stepScope2.setStepIndex(2);
  LocalSearchMoveScope moveScope4=buildMoveScope(stepScope2,e4);
  assertEquals(true,acceptor.isAccepted(buildMoveScope(stepScope2,e0)));
  assertEquals(false,acceptor.isAccepted(buildMoveScope(stepScope2,e1)));
  assertEquals(false,acceptor.isAccepted(buildMoveScope(stepScope2,e2)));
  assertEquals(true,acceptor.isAccepted(buildMoveScope(stepScope2,e3)));
  assertEquals(true,acceptor.isAccepted(moveScope4));
  assertEquals(false,acceptor.isAccepted(buildMoveScope(stepScope2,e2)));
  stepScope2.setStep(moveScope4.getMove());
  acceptor.stepEnded(stepScope2);
  LocalSearchStepScope stepScope3=new LocalSearchStepScope(phaseScope);
  stepScope3.setStepIndex(3);
  LocalSearchMoveScope moveScope3=buildMoveScope(stepScope3,e3);
  assertEquals(true,acceptor.isAccepted(buildMoveScope(stepScope3,e0)));
  assertEquals(true,acceptor.isAccepted(buildMoveScope(stepScope3,e1)));
  assertEquals(false,acceptor.isAccepted(buildMoveScope(stepScope3,e2)));
  assertEquals(true,acceptor.isAccepted(moveScope3));
  assertEquals(false,acceptor.isAccepted(buildMoveScope(stepScope3,e4)));
  assertEquals(false,acceptor.isAccepted(buildMoveScope(stepScope3,e2)));
  stepScope3.setStep(moveScope3.getMove());
  acceptor.stepEnded(stepScope3);
  LocalSearchStepScope stepScope4=new LocalSearchStepScope(phaseScope);
  stepScope4.setStepIndex(4);
  LocalSearchMoveScope moveScope1Again=buildMoveScope(stepScope4,e1);
  assertEquals(true,acceptor.isAccepted(buildMoveScope(stepScope4,e0)));
  assertEquals(true,acceptor.isAccepted(moveScope1Again));
  assertEquals(true,acceptor.isAccepted(buildMoveScope(stepScope4,e2)));
  assertEquals(false,acceptor.isAccepted(buildMoveScope(stepScope4,e3)));
  assertEquals(false,acceptor.isAccepted(buildMoveScope(stepScope4,e4)));
  assertEquals(true,acceptor.isAccepted(buildMoveScope(stepScope4,e2)));
  stepScope4.setStep(moveScope1Again.getMove());
  acceptor.stepEnded(stepScope4);
  acceptor.phaseEnded(phaseScope);
}
