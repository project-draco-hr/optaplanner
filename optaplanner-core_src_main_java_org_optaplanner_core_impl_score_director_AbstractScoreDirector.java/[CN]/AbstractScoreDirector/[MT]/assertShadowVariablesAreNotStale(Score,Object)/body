{
  SolutionDescriptor<Solution_> solutionDescriptor=getSolutionDescriptor();
  Map<Object,Map<ShadowVariableDescriptor,Object>> entityToShadowVariableValuesMap=new IdentityHashMap<>();
  for (Iterator<Object> it=solutionDescriptor.extractAllEntitiesIterator(workingSolution); it.hasNext(); ) {
    Object entity=it.next();
    EntityDescriptor<Solution_> entityDescriptor=solutionDescriptor.findEntityDescriptorOrFail(entity.getClass());
    Collection<ShadowVariableDescriptor<Solution_>> shadowVariableDescriptors=entityDescriptor.getShadowVariableDescriptors();
    Map<ShadowVariableDescriptor,Object> shadowVariableValuesMap=new HashMap<>(shadowVariableDescriptors.size());
    for (    ShadowVariableDescriptor shadowVariableDescriptor : shadowVariableDescriptors) {
      Object value=shadowVariableDescriptor.getValue(entity);
      shadowVariableValuesMap.put(shadowVariableDescriptor,value);
    }
    entityToShadowVariableValuesMap.put(entity,shadowVariableValuesMap);
  }
  variableListenerSupport.triggerAllVariableListeners();
  for (Iterator<Object> it=solutionDescriptor.extractAllEntitiesIterator(workingSolution); it.hasNext(); ) {
    Object entity=it.next();
    EntityDescriptor<Solution_> entityDescriptor=solutionDescriptor.findEntityDescriptorOrFail(entity.getClass());
    Collection<ShadowVariableDescriptor<Solution_>> shadowVariableDescriptors=entityDescriptor.getShadowVariableDescriptors();
    Map<ShadowVariableDescriptor,Object> shadowVariableValuesMap=entityToShadowVariableValuesMap.get(entity);
    for (    ShadowVariableDescriptor shadowVariableDescriptor : shadowVariableDescriptors) {
      Object newValue=shadowVariableDescriptor.getValue(entity);
      Object originalValue=shadowVariableValuesMap.get(shadowVariableDescriptor);
      if (!Objects.equals(originalValue,newValue)) {
        throw new IllegalStateException(VariableListener.class.getSimpleName() + " corruption:" + " the entity ("+ entity+ ")'s shadow variable ("+ shadowVariableDescriptor.getSimpleEntityAndVariableName()+ ")'s corrupted value ("+ originalValue+ ") changed to uncorrupted value ("+ newValue+ ") after all "+ VariableListener.class.getSimpleName()+ "s were triggered without changes to the genuine variables.\n"+ "Probably the "+ VariableListener.class.getSimpleName()+ " class ("+ shadowVariableDescriptor.getVariableListenerClass().getSimpleName()+ ") for that shadow variable ("+ shadowVariableDescriptor.getSimpleEntityAndVariableName()+ ") forgot to update it when one of its sources changed"+ " after completedAction ("+ completedAction+ ").");
      }
    }
  }
  Score workingScore=calculateScore();
  if (!expectedWorkingScore.equals(workingScore)) {
    throw new IllegalStateException("Impossible " + VariableListener.class.getSimpleName() + " corruption:"+ " the expectedWorkingScore ("+ expectedWorkingScore+ ") is not the workingScore  ("+ workingScore+ ") after all "+ VariableListener.class.getSimpleName()+ "s were triggered without changes to the genuine variables.\n"+ "But all the shadow variable values are still the same, so this is impossible.");
  }
}
