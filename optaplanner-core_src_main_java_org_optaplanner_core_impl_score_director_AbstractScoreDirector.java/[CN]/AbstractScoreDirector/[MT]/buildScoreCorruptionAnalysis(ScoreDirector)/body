{
  if (!isConstraintMatchEnabled() || !uncorruptedScoreDirector.isConstraintMatchEnabled()) {
    return "  Score corruption analysis could not be generated because" + " either corrupted constraintMatchEnabled (" + isConstraintMatchEnabled() + " or uncorrupted constraintMatchEnabled ("+ uncorruptedScoreDirector.isConstraintMatchEnabled()+ ") is disabled.\n"+ "  Check your score constraints.";
  }
  Collection<ScoreConstraintMatchTotal> corruptedConstraintMatchTotals=getConstraintMatchTotals();
  Collection<ScoreConstraintMatchTotal> uncorruptedConstraintMatchTotals=uncorruptedScoreDirector.getConstraintMatchTotals();
  Map<List<Object>,ScoreConstraintMatch> corruptedMap=createConstraintMatchMap(corruptedConstraintMatchTotals);
  Map<List<Object>,ScoreConstraintMatch> excessMap=new LinkedHashMap<List<Object>,ScoreConstraintMatch>(corruptedMap);
  Map<List<Object>,ScoreConstraintMatch> lackingMap=createConstraintMatchMap(uncorruptedConstraintMatchTotals);
  excessMap.keySet().removeAll(lackingMap.keySet());
  lackingMap.keySet().removeAll(corruptedMap.keySet());
  final int CONSTRAINT_MATCH_DISPLAY_LIMIT=8;
  StringBuilder analysis=new StringBuilder();
  if (!excessMap.isEmpty()) {
    analysis.append("  The corrupted scoreDirector has ").append(excessMap.size()).append(" ScoreConstraintMatch(s) in excess (too many):\n");
    int count=0;
    for (    ScoreConstraintMatch constraintMatch : excessMap.values()) {
      if (count >= CONSTRAINT_MATCH_DISPLAY_LIMIT) {
        analysis.append("    ... ").append(excessMap.size() - CONSTRAINT_MATCH_DISPLAY_LIMIT).append(" more\n");
        break;
      }
      analysis.append("    ").append(constraintMatch).append("\n");
      count++;
    }
  }
  if (!lackingMap.isEmpty()) {
    analysis.append("  The corrupted scoreDirector has ").append(lackingMap.size()).append(" ScoreConstraintMatch(s) lacking (too little):\n");
    int count=0;
    for (    ScoreConstraintMatch constraintMatch : lackingMap.values()) {
      if (count >= CONSTRAINT_MATCH_DISPLAY_LIMIT) {
        analysis.append("    ... ").append(lackingMap.size() - CONSTRAINT_MATCH_DISPLAY_LIMIT).append(" more\n");
        break;
      }
      analysis.append("    ").append(constraintMatch).append("\n");
      count++;
    }
  }
  if (excessMap.isEmpty() && lackingMap.isEmpty()) {
    analysis.append("  The corrupted scoreDirector has no ScoreConstraintMatch(s) in excess or lacking." + " That could be a bug in this class (").append(getClass()).append(").\n");
  }
  analysis.append("  Check your score constraints.");
  return analysis.toString();
}
