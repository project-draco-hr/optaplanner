{
  List<Move> moveList=new ArrayList<Move>();
  Examination examination=(Examination)localSearchSolver.getCurrentSolution();
  List<Period> periodList=examination.getPeriodList();
  int firstPeriodIndex=periodList.get(0).getPeriodIndex();
  int lastPeriodIndex=periodList.get(Math.max(periodList.size() - PERIOD_JUMP,0)).getPeriodIndex();
  List<Room> roomList=examination.getRoomList();
  long firstRoomId=roomList.get(0).getId();
  long lastRoomId=roomList.get(Math.max(roomList.size() - PERIOD_JUMP,0)).getId();
  for (  Exam exam : examination.getExamList()) {
    for (    Period period : periodList) {
      if ((Math.abs(period.getPeriodIndex() - exam.getPeriod().getPeriodIndex()) <= PERIOD_JUMP) || (period.getPeriodIndex() == firstPeriodIndex && exam.getPeriod().getPeriodIndex() == lastPeriodIndex) || (period.getPeriodIndex() == lastPeriodIndex && exam.getPeriod().getPeriodIndex() == firstPeriodIndex)) {
        moveList.add(new PeriodChangeMove(exam,period));
      }
    }
    for (    Room room : roomList) {
      if ((Math.abs(room.getId() - exam.getRoom().getId()) <= ROOM_JUMP) || (room.getId() == firstRoomId && exam.getRoom().getId() == lastRoomId) || (room.getId() == lastRoomId && exam.getRoom().getId() == firstRoomId)) {
        moveList.add(new RoomChangeMove(exam,room));
      }
    }
  }
  return moveList.iterator();
}
