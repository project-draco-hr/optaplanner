{
  DefaultDecider decider=new DefaultDecider();
  decider.setTermination(phaseTermination);
  MoveSelector moveSelector=buildMoveSelector(environmentMode,solutionDescriptor);
  decider.setMoveSelector(moveSelector);
  AcceptorConfig acceptorConfig_=acceptorConfig == null ? new AcceptorConfig() : acceptorConfig;
  decider.setAcceptor(acceptorConfig_.buildAcceptor(environmentMode,scoreDefinition));
  ForagerConfig foragerConfig_=foragerConfig == null ? new ForagerConfig() : foragerConfig;
  Forager forager=foragerConfig_.buildForager(scoreDefinition);
  decider.setForager(forager);
  if (moveSelector.isNeverEnding() && !forager.supportsNeverEndingMoveSelector()) {
    throw new IllegalStateException("The moveSelector (" + moveSelector + ") has neverEnding ("+ moveSelector.isNeverEnding()+ "), but the forager ("+ forager+ ") does not support it."+ " Configure the <forager> with <minimalAcceptedSelection>.");
  }
  if (environmentMode == EnvironmentMode.FULL_ASSERT) {
    decider.setAssertMoveScoreIsUncorrupted(true);
  }
  if (environmentMode == EnvironmentMode.FAST_ASSERT || environmentMode == EnvironmentMode.FULL_ASSERT) {
    decider.setAssertUndoMoveIsUncorrupted(true);
  }
  return decider;
}
