{
  WorkingMemory workingMemory=solutionDirector.getWorkingMemory();
  List<Journey> journeyList=createJourneyList(travelingSalesmanTour);
  List<Depot> depotList=travelingSalesmanTour.getDepotList();
  List<Journey> initializedJourneyList=new ArrayList<Journey>(journeyList.size());
  List<Terminal> initializedTerminalList=new ArrayList<Terminal>(depotList.size() + journeyList.size());
  initializedTerminalList.addAll(depotList);
  for (  Journey journey : journeyList) {
    FactHandle journeyHandle=workingMemory.insert(journey);
    Score bestScore=DefaultSimpleScore.valueOf(Integer.MIN_VALUE);
    Terminal bestPreviousTerminal=null;
    FactHandle bestPreviousTerminalFactHandle=null;
    for (    Terminal previousTerminal : initializedTerminalList) {
      FactHandle afterJourneyFactHandle=workingMemory.getFactHandle(previousTerminal);
      journey.setPreviousTerminal(previousTerminal);
      workingMemory.update(journeyHandle,journey);
      Journey chainedJourney=getChainedJourney(initializedJourneyList,previousTerminal);
      if (chainedJourney != null) {
        chainedJourney.setPreviousTerminal(journey);
        workingMemory.update(journeyHandle,chainedJourney);
      }
      Score score=solutionDirector.calculateScoreFromWorkingMemory();
      if (score.compareTo(bestScore) > 0) {
        bestScore=score;
        bestPreviousTerminal=previousTerminal;
        bestPreviousTerminalFactHandle=afterJourneyFactHandle;
      }
      if (chainedJourney != null) {
        chainedJourney.setPreviousTerminal(previousTerminal);
        workingMemory.update(journeyHandle,chainedJourney);
      }
      journey.setPreviousTerminal(null);
      workingMemory.update(journeyHandle,journey);
    }
    if (bestPreviousTerminal == null) {
      throw new IllegalStateException("The bestPreviousJourney (" + bestPreviousTerminal + ") cannot be null.");
    }
    journey.setPreviousTerminal(bestPreviousTerminal);
    workingMemory.update(journeyHandle,journey);
    Journey chainedJourney=getChainedJourney(initializedJourneyList,bestPreviousTerminal);
    if (chainedJourney != null) {
      chainedJourney.setPreviousTerminal(journey);
      workingMemory.update(journeyHandle,chainedJourney);
    }
    initializedJourneyList.add(journey);
    initializedTerminalList.add(journey);
    logger.debug("    Journey ({}) initialized.",journey);
  }
  Collections.sort(journeyList,new PersistableIdComparator());
  travelingSalesmanTour.setJourneyList(journeyList);
}
