{
  City startCity=travelingSalesmanTour.getStartCity();
  WorkingMemory workingMemory=solutionDirector.getWorkingMemory();
  List<Journey> journeyList=createJourneyList(travelingSalesmanTour);
  List<Journey> assignedJourneyList=null;
  for (  Journey journey : journeyList) {
    FactHandle journeyHandle=null;
    if (assignedJourneyList == null) {
      assignedJourneyList=new ArrayList<Journey>(journeyList.size());
      journey.setNextJourney(journey);
      journey.setPreviousJourney(journey);
      journeyHandle=workingMemory.insert(journey);
    }
 else {
      Score bestScore=DefaultSimpleScore.valueOf(Integer.MIN_VALUE);
      Journey bestAfterJourney=null;
      FactHandle bestAfterJourneyFactHandle=null;
      Journey bestBeforeJourney=null;
      FactHandle bestBeforeJourneyFactHandle=null;
      for (      Journey afterJourney : assignedJourneyList) {
        Journey beforeJourney=afterJourney.getNextJourney();
        FactHandle afterJourneyFactHandle=workingMemory.getFactHandle(afterJourney);
        FactHandle beforeJourneyFactHandle=workingMemory.getFactHandle(beforeJourney);
        afterJourney.setNextJourney(journey);
        journey.setPreviousJourney(afterJourney);
        journey.setNextJourney(beforeJourney);
        beforeJourney.setPreviousJourney(journey);
        if (journeyHandle == null) {
          journeyHandle=workingMemory.insert(journey);
        }
 else {
          workingMemory.update(journeyHandle,journey);
        }
        workingMemory.update(afterJourneyFactHandle,afterJourney);
        workingMemory.update(beforeJourneyFactHandle,beforeJourney);
        Score score=solutionDirector.calculateScoreFromWorkingMemory();
        if (score.compareTo(bestScore) > 0) {
          bestScore=score;
          bestAfterJourney=afterJourney;
          bestAfterJourneyFactHandle=afterJourneyFactHandle;
          bestBeforeJourney=beforeJourney;
          bestBeforeJourneyFactHandle=beforeJourneyFactHandle;
        }
        afterJourney.setNextJourney(beforeJourney);
        beforeJourney.setPreviousJourney(afterJourney);
        workingMemory.update(afterJourneyFactHandle,afterJourney);
        workingMemory.update(beforeJourneyFactHandle,beforeJourney);
      }
      if (bestAfterJourney == null) {
        throw new IllegalStateException("The bestAfterJourney (" + bestAfterJourney + ") cannot be null.");
      }
      bestAfterJourney.setNextJourney(journey);
      journey.setPreviousJourney(bestAfterJourney);
      journey.setNextJourney(bestBeforeJourney);
      bestBeforeJourney.setPreviousJourney(journey);
      workingMemory.update(journeyHandle,journey);
      workingMemory.update(bestAfterJourneyFactHandle,bestAfterJourney);
      workingMemory.update(bestBeforeJourneyFactHandle,bestBeforeJourney);
    }
    assignedJourneyList.add(journey);
    if (journey.getCity() == startCity) {
      travelingSalesmanTour.setStartJourney(journey);
    }
    logger.debug("    Journey ({}) initialized.",journey);
  }
  Collections.sort(journeyList,new PersistableIdComparator());
  travelingSalesmanTour.setJourneyList(journeyList);
}
