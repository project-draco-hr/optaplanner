{
  readConstantLine("PATIENTS:");
  List<Patient> patientList=new ArrayList<Patient>(patientListSize);
  List<AdmissionPart> admissionPartList=new ArrayList<AdmissionPart>(patientListSize);
  List<RequiredPatientEquipment> requiredPatientEquipmentList=new ArrayList<RequiredPatientEquipment>(patientListSize * equipmentListSize);
  List<PreferredPatientEquipment> preferredPatientEquipmentList=new ArrayList<PreferredPatientEquipment>(patientListSize * equipmentListSize);
  long admissionPartId=0L;
  long requiredPatientEquipmentId=0L;
  long preferredPatientEquipmentId=0L;
  for (int i=0; i < patientListSize; i++) {
    String line=bufferedReader.readLine();
    String[] lineTokens=splitByPipeline(line,6);
    String[] patientTokens=splitBySpace(lineTokens[0],4);
    Patient patient=new Patient();
    patient.setId(Long.parseLong(patientTokens[0]));
    patient.setName(patientTokens[1]);
    patient.setAge(Integer.parseInt(patientTokens[2]));
    patient.setGender(Gender.valueOfCode(patientTokens[3]));
    int preferredMaximumRoomCapacity=Integer.parseInt(lineTokens[3]);
    patient.setPreferredMaximumRoomCapacity(preferredMaximumRoomCapacity == 0 ? null : preferredMaximumRoomCapacity);
    patientList.add(patient);
    String[] nightTokens=splitBySpace(lineTokens[1],2);
    Night firstNight=indexToNightMap.get(Integer.parseInt(nightTokens[0]));
    int lastNightIndex=Integer.parseInt(nightTokens[1]);
    ensureEnoughNights(lastNightIndex);
    Night endNight=indexToNightMap.get(lastNightIndex);
    int patientNightListSize=endNight.getIndex() - firstNight.getIndex();
    if (patientNightListSize != 0) {
      String[] admissionPartTokens=splitBySpace(lineTokens[2]);
      if (admissionPartTokens.length % 2 != 1) {
      }
      int patientAdmissionPartListSize=Integer.parseInt(admissionPartTokens[0]);
      if (admissionPartTokens.length != ((patientAdmissionPartListSize * 2) + 1)) {
        throw new IllegalArgumentException("Read line (" + line + ") is expected to contain "+ ((patientAdmissionPartListSize * 2) + 1)+ " number of tokens after 2th pipeline (|).");
      }
      int nextFirstNightIndex=firstNight.getIndex();
      for (int j=1; j < admissionPartTokens.length; j+=2) {
        long specialismId=Long.parseLong(admissionPartTokens[j]);
        int admissionPartNightListSize=Integer.parseInt(admissionPartTokens[j + 1]);
        AdmissionPart admissionPart=new AdmissionPart();
        admissionPart.setId(admissionPartId);
        admissionPart.setPatient(patient);
        Specialism specialism=(specialismId == 0) ? null : idToSpecialismMap.get(specialismId);
        if (specialism == null) {
          throw new IllegalArgumentException("Read line (" + line + ") has a non existing specialismId ("+ specialismId+ ").");
        }
        admissionPart.setSpecialism(specialism);
        admissionPart.setFirstNight(indexToNightMap.get(nextFirstNightIndex));
        admissionPart.setLastNight(indexToNightMap.get(nextFirstNightIndex + admissionPartNightListSize - 1));
        admissionPartList.add(admissionPart);
        admissionPartId++;
        nextFirstNightIndex+=admissionPartNightListSize;
      }
      if (nextFirstNightIndex != nextFirstNightIndex) {
        throw new IllegalArgumentException("Read line (" + line + ") has patientNightListSize ("+ patientNightListSize+ ") different from the sum of admissionPartNightListSize ("+ nextFirstNightIndex+ ")");
      }
    }
    List<RequiredPatientEquipment> requiredPatientEquipmentOfPatientList=new ArrayList<RequiredPatientEquipment>(equipmentListSize);
    String[] requiredPatientEquipmentTokens=splitBySpace(lineTokens[4]);
    if (requiredPatientEquipmentTokens.length != equipmentListSize) {
      throw new IllegalArgumentException("Read line (" + line + ") is expected to contain equal number of tokens ("+ requiredPatientEquipmentTokens.length+ ") as equipmentListSize ("+ equipmentListSize+ ") after 4th pipeline (|).");
    }
    for (int j=0; j < requiredPatientEquipmentTokens.length; j++) {
      int hasEquipment=Integer.parseInt(requiredPatientEquipmentTokens[j]);
      if (hasEquipment == 1) {
        RequiredPatientEquipment requiredPatientEquipment=new RequiredPatientEquipment();
        requiredPatientEquipment.setId(requiredPatientEquipmentId);
        requiredPatientEquipment.setPatient(patient);
        requiredPatientEquipment.setEquipment(indexToEquipmentMap.get(j));
        requiredPatientEquipmentOfPatientList.add(requiredPatientEquipment);
        requiredPatientEquipmentList.add(requiredPatientEquipment);
        requiredPatientEquipmentId++;
      }
 else       if (hasEquipment != 0) {
        throw new IllegalArgumentException("Read line (" + line + ") is expected to have 0 or 1 hasEquipment ("+ hasEquipment+ ").");
      }
    }
    patient.setRequiredPatientEquipmentList(requiredPatientEquipmentOfPatientList);
    String[] preferredPatientEquipmentTokens=splitBySpace(lineTokens[5]);
    if (preferredPatientEquipmentTokens.length != equipmentListSize) {
      throw new IllegalArgumentException("Read line (" + line + ") is expected to contain equal number of tokens ("+ preferredPatientEquipmentTokens.length+ ") as equipmentListSize ("+ equipmentListSize+ ") after 5th pipeline (|).");
    }
    for (int j=0; j < preferredPatientEquipmentTokens.length; j++) {
      int hasEquipment=Integer.parseInt(preferredPatientEquipmentTokens[j]);
      if (hasEquipment == 1) {
        PreferredPatientEquipment preferredPatientEquipment=new PreferredPatientEquipment();
        preferredPatientEquipment.setId(preferredPatientEquipmentId);
        preferredPatientEquipment.setPatient(patient);
        preferredPatientEquipment.setEquipment(indexToEquipmentMap.get(j));
        preferredPatientEquipmentList.add(preferredPatientEquipment);
        preferredPatientEquipmentId++;
      }
 else       if (hasEquipment != 0) {
        throw new IllegalArgumentException("Read line (" + line + ") is expected to have 0 or 1 hasEquipment ("+ hasEquipment+ ").");
      }
    }
  }
  patientAdmissionSchedule.setPatientList(patientList);
  patientAdmissionSchedule.setAdmissionPartList(admissionPartList);
  patientAdmissionSchedule.setRequiredPatientEquipmentList(requiredPatientEquipmentList);
  patientAdmissionSchedule.setPreferredPatientEquipmentList(preferredPatientEquipmentList);
}
