{
  configContext.validate();
  EnvironmentMode environmentMode_=determineEnvironmentMode();
  boolean daemon_=defaultIfNull(daemon,false);
  RandomFactory randomFactory=buildRandomFactory(environmentMode_);
  SolutionDescriptor<Solution_> solutionDescriptor=buildSolutionDescriptor(configContext);
  ScoreDirectorFactoryConfig scoreDirectorFactoryConfig_=scoreDirectorFactoryConfig == null ? new ScoreDirectorFactoryConfig() : scoreDirectorFactoryConfig;
  InnerScoreDirectorFactory<Solution_> scoreDirectorFactory=scoreDirectorFactoryConfig_.buildScoreDirectorFactory(configContext,environmentMode_,solutionDescriptor);
  boolean constraintMatchEnabledPreference=environmentMode_.isAsserted();
  DefaultSolverScope<Solution_> solverScope=new DefaultSolverScope<>();
  solverScope.setScoreDirector(scoreDirectorFactory.buildScoreDirector(constraintMatchEnabledPreference));
  HeuristicConfigPolicy configPolicy=new HeuristicConfigPolicy(environmentMode_,scoreDirectorFactory);
  TerminationConfig terminationConfig_=terminationConfig == null ? new TerminationConfig() : terminationConfig;
  BasicPlumbingTermination basicPlumbingTermination=new BasicPlumbingTermination(daemon_);
  Termination termination=terminationConfig_.buildTermination(configPolicy,basicPlumbingTermination);
  BestSolutionRecaller<Solution_> bestSolutionRecaller=new BestSolutionRecallerConfig().buildBestSolutionRecaller(environmentMode_);
  List<Phase<Solution_>> phaseList=buildPhaseList(configPolicy,bestSolutionRecaller,termination);
  DefaultSolver<Solution_> solver=new DefaultSolver<>(environmentMode_,randomFactory,basicPlumbingTermination,termination,bestSolutionRecaller,phaseList,solverScope);
  return solver;
}
