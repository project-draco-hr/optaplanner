{
  DefaultSolver solver=new DefaultSolver();
  BasicPlumbingTermination basicPlumbingTermination=new BasicPlumbingTermination();
  solver.setBasicPlumbingTermination(basicPlumbingTermination);
  EnvironmentMode environmentMode=this.environmentMode == null ? EnvironmentMode.REPRODUCIBLE : this.environmentMode;
  RandomFactory randomFactory;
  if (randomFactoryClass != null) {
    if (randomType != null || randomSeed != null) {
      throw new IllegalArgumentException("The solverConfig with randomFactoryClass (" + randomFactoryClass + ") has a non-null randomType ("+ randomType+ ") or a non-null randomSeed ("+ randomSeed+ ").");
    }
    randomFactory=ConfigUtils.newInstance(this,"randomFactoryClass",randomFactoryClass);
  }
 else {
    RandomType randomType_=randomType == null ? RandomType.JDK : randomType;
    Long randomSeed_=randomSeed;
    if (randomSeed == null && environmentMode != EnvironmentMode.PRODUCTION) {
      randomSeed_=DEFAULT_RANDOM_SEED;
    }
    randomFactory=new DefaultRandomFactory(randomType_,randomSeed_);
  }
  solver.setRandomFactory(randomFactory);
  SolutionDescriptor solutionDescriptor=buildSolutionDescriptor();
  ScoreDirectorFactoryConfig scoreDirectorFactoryConfig_=scoreDirectorFactoryConfig == null ? new ScoreDirectorFactoryConfig() : scoreDirectorFactoryConfig;
  ScoreDirectorFactory scoreDirectorFactory=scoreDirectorFactoryConfig_.buildScoreDirectorFactory(environmentMode,solutionDescriptor);
  solver.setScoreDirectorFactory(scoreDirectorFactory);
  ScoreDefinition scoreDefinition=scoreDirectorFactory.getScoreDefinition();
  HeuristicConfigPolicy configPolicy=new HeuristicConfigPolicy(environmentMode,solutionDescriptor,scoreDefinition);
  TerminationConfig terminationConfig_=terminationConfig == null ? new TerminationConfig() : terminationConfig;
  Termination termination=terminationConfig_.buildTermination(configPolicy,basicPlumbingTermination);
  solver.setTermination(termination);
  BestSolutionRecaller bestSolutionRecaller=buildBestSolutionRecaller(environmentMode);
  solver.setBestSolutionRecaller(bestSolutionRecaller);
  if (solverPhaseConfigList == null || solverPhaseConfigList.isEmpty()) {
    throw new IllegalArgumentException("Configure at least 1 phase (for example <localSearch>) in the solver configuration.");
  }
  List<SolverPhase> solverPhaseList=new ArrayList<SolverPhase>(solverPhaseConfigList.size());
  int phaseIndex=0;
  for (  SolverPhaseConfig solverPhaseConfig : solverPhaseConfigList) {
    SolverPhase solverPhase=solverPhaseConfig.buildSolverPhase(phaseIndex,configPolicy,termination);
    ((AbstractSolverPhase)solverPhase).setBestSolutionRecaller(bestSolutionRecaller);
    solverPhaseList.add(solverPhase);
    phaseIndex++;
  }
  solver.setSolverPhaseList(solverPhaseList);
  return solver;
}
