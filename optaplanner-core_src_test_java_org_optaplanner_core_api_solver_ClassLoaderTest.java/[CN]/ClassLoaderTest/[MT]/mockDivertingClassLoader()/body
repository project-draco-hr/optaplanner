{
  final String divertedPrefix="divertThroughClassLoader";
  final ClassLoader realClassLoader=getClass().getClassLoader();
  ClassLoader divertingClassLoader=mock(ClassLoader.class);
  when(divertingClassLoader.loadClass(anyString())).thenAnswer(new Answer<Class<?>>(){
    @Override public Class<?> answer(    InvocationOnMock invocation) throws Throwable {
      String className=(String)invocation.getArguments()[0];
      if (className.startsWith(divertedPrefix + ".")) {
        className=className.substring(divertedPrefix.length() + 1);
      }
      return realClassLoader.loadClass(className);
    }
  }
);
  when(divertingClassLoader.getResource(anyString())).thenAnswer(new Answer<URL>(){
    @Override public URL answer(    InvocationOnMock invocation){
      String resourceName=(String)invocation.getArguments()[0];
      if (resourceName.startsWith(divertedPrefix + "/")) {
        resourceName=resourceName.substring(divertedPrefix.length() + 1);
      }
      return realClassLoader.getResource(resourceName);
    }
  }
);
  when(divertingClassLoader.getResourceAsStream(anyString())).thenAnswer(new Answer<InputStream>(){
    @Override public InputStream answer(    InvocationOnMock invocation){
      String resourceName=(String)invocation.getArguments()[0];
      if (resourceName.startsWith(divertedPrefix + "/")) {
        resourceName=resourceName.substring(divertedPrefix.length() + 1);
      }
      return realClassLoader.getResourceAsStream(resourceName);
    }
  }
);
  when(divertingClassLoader.getResources(anyString())).thenAnswer(new Answer<Enumeration<URL>>(){
    @Override public Enumeration<URL> answer(    InvocationOnMock invocation) throws Throwable {
      String resourceName=(String)invocation.getArguments()[0];
      if (resourceName.startsWith(divertedPrefix + "/")) {
        resourceName=resourceName.substring(divertedPrefix.length() + 1);
      }
      return realClassLoader.getResources(resourceName);
    }
  }
);
  return divertingClassLoader;
}
