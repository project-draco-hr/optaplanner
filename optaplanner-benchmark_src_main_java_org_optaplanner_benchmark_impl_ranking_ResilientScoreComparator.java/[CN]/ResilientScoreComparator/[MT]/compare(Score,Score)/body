{
  if (a == null) {
    return b == null ? 0 : -1;
  }
 else   if (b == null) {
    return 1;
  }
  if (!a.isCompatibleArithmeticArgument(b)) {
    Number[] aNumbers=a.toLevelNumbers();
    Number[] bNumbers=b.toLevelNumbers();
    for (int i=0; i < aNumbers.length || i < bNumbers.length; i++) {
      Number aToken=i < aNumbers.length ? aNumbers[i] : 0;
      Number bToken=i < bNumbers.length ? bNumbers[i] : 0;
      int comparison;
      if (aToken.getClass().equals(bToken.getClass())) {
        comparison=((Comparable)aToken).compareTo(bToken);
      }
 else {
        comparison=Double.valueOf(aToken.doubleValue()).compareTo(bToken.doubleValue());
      }
      if (comparison != 0) {
        return comparison;
      }
    }
    return 0;
  }
  return a.compareTo(b);
}
