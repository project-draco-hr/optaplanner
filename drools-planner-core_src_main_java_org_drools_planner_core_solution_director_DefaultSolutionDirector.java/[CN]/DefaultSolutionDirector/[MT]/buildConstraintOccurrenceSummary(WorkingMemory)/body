{
  logger.trace("Building ConstraintOccurrence summary");
  if (summaryWorkingMemory == null) {
    return "  The workingMemory is null.";
  }
  Map<String,SummaryLine> summaryLineMap=new TreeMap<String,SummaryLine>();
  Iterator<ConstraintOccurrence> it=(Iterator<ConstraintOccurrence>)summaryWorkingMemory.iterateObjects(new ClassObjectFilter(ConstraintOccurrence.class));
  while (it.hasNext()) {
    ConstraintOccurrence occurrence=it.next();
    logger.trace("    Adding ConstraintOccurrence ({})",occurrence);
    SummaryLine summaryLine=summaryLineMap.get(occurrence.getRuleId());
    if (summaryLine == null) {
      summaryLine=new SummaryLine();
      summaryLineMap.put(occurrence.getRuleId(),summaryLine);
    }
    summaryLine.increment();
    if (occurrence instanceof IntConstraintOccurrence) {
      summaryLine.addWeight(((IntConstraintOccurrence)occurrence).getWeight());
    }
 else     if (occurrence instanceof DoubleConstraintOccurrence) {
      summaryLine.addWeight(((DoubleConstraintOccurrence)occurrence).getWeight());
    }
 else     if (occurrence instanceof UnweightedConstraintOccurrence) {
      summaryLine.addWeight(1);
    }
 else {
      throw new IllegalStateException("Cannot determine occurrenceScore of ConstraintOccurrence class: " + occurrence.getClass());
    }
  }
  StringBuilder summary=new StringBuilder();
  for (  Map.Entry<String,SummaryLine> summaryLineEntry : summaryLineMap.entrySet()) {
    SummaryLine summaryLine=summaryLineEntry.getValue();
    summary.append("  Score rule (").append(summaryLineEntry.getKey()).append(") has count (").append(summaryLine.getCount()).append(") and weight total (").append(summaryLine.getWeightTotal()).append(").\n");
  }
  return summary.toString();
}
