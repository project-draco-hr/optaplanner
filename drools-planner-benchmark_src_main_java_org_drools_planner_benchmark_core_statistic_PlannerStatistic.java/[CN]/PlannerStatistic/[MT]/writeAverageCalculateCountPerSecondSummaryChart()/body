{
  NumberAxis xAxis=new NumberAxis("Problem scale");
  NumberAxis yAxis=new NumberAxis("Average calculate count per second");
  XYPlot plot=new XYPlot(null,xAxis,yAxis,null);
  int seriesIndex=0;
  for (  SolverBenchmark solverBenchmark : plannerBenchmark.getSolverBenchmarkList()) {
    String solverLabel=solverBenchmark.getNameWithFavoriteSuffix();
    XYSeries series=new XYSeries(solverLabel);
    for (    SingleBenchmark singleBenchmark : solverBenchmark.getSingleBenchmarkList()) {
      if (singleBenchmark.isSuccess()) {
        long problemScale=singleBenchmark.getProblemBenchmark().getProblemScale();
        long averageCalculateCountPerSecond=singleBenchmark.getAverageCalculateCountPerSecond();
        series.add((Long)problemScale,(Long)averageCalculateCountPerSecond);
      }
    }
    XYSeriesCollection seriesCollection=new XYSeriesCollection();
    seriesCollection.addSeries(series);
    plot.setDataset(seriesIndex,seriesCollection);
    XYItemRenderer renderer=new StandardXYItemRenderer(StandardXYItemRenderer.SHAPES_AND_LINES);
    renderer.setSeriesStroke(0,new BasicStroke(1.0f,BasicStroke.CAP_ROUND,BasicStroke.JOIN_ROUND,1.0f,new float[]{2.0f,6.0f},0.0f));
    plot.setRenderer(seriesIndex,renderer);
    seriesIndex++;
  }
  plot.setOrientation(PlotOrientation.VERTICAL);
  JFreeChart chart=new JFreeChart("Average calculate count summary (higher is better)",JFreeChart.DEFAULT_TITLE_FONT,plot,true);
  BufferedImage chartImage=chart.createBufferedImage(1024,768);
  averageCalculateCountSummaryChartFile=new File(plannerBenchmark.getBenchmarkReportDirectory(),"averageCalculateCountSummary.png");
  OutputStream out=null;
  try {
    out=new FileOutputStream(averageCalculateCountSummaryChartFile);
    ImageIO.write(chartImage,"png",out);
  }
 catch (  IOException e) {
    throw new IllegalArgumentException("Problem writing averageCalculateCountSummaryChartFile: " + averageCalculateCountSummaryChartFile,e);
  }
 finally {
    IOUtils.closeQuietly(out);
  }
}
