{
  DefaultCategoryDataset dataset=new DefaultCategoryDataset();
  for (  SolverBenchmark solverBenchmark : plannerBenchmark.getSolverBenchmarkList()) {
    for (    SingleBenchmark singleBenchmark : solverBenchmark.getSingleBenchmarkList()) {
      if (singleBenchmark.isSuccess()) {
        long timeMillisSpend=singleBenchmark.getTimeMillisSpend();
        String solverLabel=solverBenchmark.getName();
        if (solverBenchmark.isRankingBest()) {
          solverLabel+=" (winner)";
        }
        String planningProblemLabel=singleBenchmark.getProblemBenchmark().getName();
        dataset.addValue(timeMillisSpend,solverLabel,planningProblemLabel);
      }
    }
  }
  CategoryAxis xAxis=new CategoryAxis("Data");
  NumberAxis yAxis=new NumberAxis("Time spend");
  yAxis.setNumberFormatOverride(new MillisecondsSpendNumberFormat());
  BarRenderer renderer=new BarRenderer();
  ItemLabelPosition positiveItemLabelPosition=new ItemLabelPosition(ItemLabelAnchor.OUTSIDE12,TextAnchor.BOTTOM_CENTER);
  renderer.setBasePositiveItemLabelPosition(positiveItemLabelPosition);
  ItemLabelPosition negativeItemLabelPosition=new ItemLabelPosition(ItemLabelAnchor.OUTSIDE6,TextAnchor.TOP_CENTER);
  renderer.setBaseNegativeItemLabelPosition(negativeItemLabelPosition);
  renderer.setBaseItemLabelGenerator(new StandardCategoryItemLabelGenerator(StandardCategoryItemLabelGenerator.DEFAULT_LABEL_FORMAT_STRING,new MillisecondsSpendNumberFormat()));
  renderer.setBaseItemLabelsVisible(true);
  CategoryPlot plot=new CategoryPlot(dataset,xAxis,yAxis,renderer);
  plot.setOrientation(PlotOrientation.VERTICAL);
  JFreeChart chart=new JFreeChart("Time spend summary (lower time is better)",JFreeChart.DEFAULT_TITLE_FONT,plot,true);
  BufferedImage chartImage=chart.createBufferedImage(1024,768);
  timeSpendSummaryFile=new File(plannerBenchmark.getBenchmarkReportDirectory(),"timeSpendSummary.png");
  OutputStream out=null;
  try {
    out=new FileOutputStream(timeSpendSummaryFile);
    ImageIO.write(chartImage,"png",out);
  }
 catch (  IOException e) {
    throw new IllegalArgumentException("Problem writing timeSpendSummaryFile: " + timeSpendSummaryFile,e);
  }
 finally {
    IOUtils.closeQuietly(out);
  }
}
