{
  DefaultCategoryDataset dataset=new DefaultCategoryDataset();
  for (  SolverBenchmark solverBenchmark : plannerBenchmark.getSolverBenchmarkList()) {
    ScoreDefinition scoreDefinition=solverBenchmark.getSolverConfig().getScoreDirectorFactoryConfig().buildScoreDefinition();
    for (    SingleBenchmark singleBenchmark : solverBenchmark.getSingleBenchmarkList()) {
      if (singleBenchmark.isSuccess()) {
        Score score=singleBenchmark.getScore();
        Double scoreGraphValue=scoreDefinition.translateScoreToGraphValue(score);
        String solverLabel=solverBenchmark.getNameWithFavoriteSuffix();
        String planningProblemLabel=singleBenchmark.getProblemBenchmark().getName();
        dataset.addValue(scoreGraphValue,solverLabel,planningProblemLabel);
      }
    }
  }
  CategoryAxis xAxis=new CategoryAxis("Data");
  xAxis.setCategoryMargin(0.40);
  NumberAxis yAxis=new NumberAxis("Score");
  BarRenderer renderer=new BarRenderer();
  ItemLabelPosition positiveItemLabelPosition=new ItemLabelPosition(ItemLabelAnchor.OUTSIDE12,TextAnchor.BOTTOM_CENTER);
  renderer.setBasePositiveItemLabelPosition(positiveItemLabelPosition);
  ItemLabelPosition negativeItemLabelPosition=new ItemLabelPosition(ItemLabelAnchor.OUTSIDE6,TextAnchor.TOP_CENTER);
  renderer.setBaseNegativeItemLabelPosition(negativeItemLabelPosition);
  renderer.setBaseItemLabelGenerator(new StandardCategoryItemLabelGenerator());
  renderer.setBaseItemLabelsVisible(true);
  CategoryPlot plot=new CategoryPlot(dataset,xAxis,yAxis,renderer);
  plot.setOrientation(PlotOrientation.VERTICAL);
  JFreeChart chart=new JFreeChart("Best score summary (higher score is better)",JFreeChart.DEFAULT_TITLE_FONT,plot,true);
  BufferedImage chartImage=chart.createBufferedImage(1024,768);
  bestScoreSummaryFile=new File(plannerBenchmark.getBenchmarkReportDirectory(),"bestScoreSummary.png");
  OutputStream out=null;
  try {
    out=new FileOutputStream(bestScoreSummaryFile);
    ImageIO.write(chartImage,"png",out);
  }
 catch (  IOException e) {
    throw new IllegalArgumentException("Problem writing bestScoreSummaryFile: " + bestScoreSummaryFile,e);
  }
 finally {
    IOUtils.closeQuietly(out);
  }
}
