{
  List<DefaultCategoryDataset> datasetList=new ArrayList<DefaultCategoryDataset>(CHARTED_SCORE_LEVEL_SIZE);
  for (  SolverBenchmark solverBenchmark : plannerBenchmark.getSolverBenchmarkList()) {
    String solverLabel=solverBenchmark.getNameWithFavoriteSuffix();
    for (    SingleBenchmark singleBenchmark : solverBenchmark.getSingleBenchmarkList()) {
      if (singleBenchmark.isSuccess()) {
        Score score=singleBenchmark.getScore();
        double[] scoreLevels=score.toDoubleLevels();
        for (int i=0; i < scoreLevels.length && i < CHARTED_SCORE_LEVEL_SIZE; i++) {
          if (i >= datasetList.size()) {
            datasetList.add(new DefaultCategoryDataset());
          }
          String planningProblemLabel=singleBenchmark.getProblemBenchmark().getName();
          datasetList.get(i).addValue(scoreLevels[i],solverLabel,planningProblemLabel);
        }
      }
    }
  }
  bestScoreSummaryChartFileList=new ArrayList<File>(datasetList.size());
  int scoreLevelIndex=0;
  for (  DefaultCategoryDataset dataset : datasetList) {
    CategoryPlot plot=createBarChartPlot(dataset,"Score level " + scoreLevelIndex,NumberFormat.getInstance());
    JFreeChart chart=new JFreeChart("Best score level " + scoreLevelIndex + " summary (higher is better)",JFreeChart.DEFAULT_TITLE_FONT,plot,true);
    BufferedImage chartImage=chart.createBufferedImage(1024,768);
    File bestScoreSummaryChartFile=new File(plannerBenchmark.getBenchmarkReportDirectory(),"bestScoreSummaryLevel" + scoreLevelIndex + ".png");
    OutputStream out=null;
    try {
      out=new FileOutputStream(bestScoreSummaryChartFile);
      ImageIO.write(chartImage,"png",out);
    }
 catch (    IOException e) {
      throw new IllegalArgumentException("Problem writing bestScoreSummaryChartFile: " + bestScoreSummaryChartFile,e);
    }
 finally {
      IOUtils.closeQuietly(out);
    }
    bestScoreSummaryChartFileList.add(bestScoreSummaryChartFile);
    scoreLevelIndex++;
  }
}
