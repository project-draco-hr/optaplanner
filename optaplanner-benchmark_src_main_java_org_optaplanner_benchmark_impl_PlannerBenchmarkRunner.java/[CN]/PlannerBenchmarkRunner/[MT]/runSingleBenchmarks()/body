{
  Map<SubSingleBenchmarkRunner,Future<SubSingleBenchmarkRunner>> futureMap=new HashMap<SubSingleBenchmarkRunner,Future<SubSingleBenchmarkRunner>>();
  for (  ProblemBenchmarkResult problemBenchmarkResult : plannerBenchmarkResult.getUnifiedProblemBenchmarkResultList()) {
    for (    SingleBenchmarkResult singleBenchmarkResult : problemBenchmarkResult.getSingleBenchmarkResultList()) {
      for (      SubSingleBenchmarkResult subSingleBenchmarkResult : singleBenchmarkResult.getSubSingleBenchmarkResultList()) {
        SubSingleBenchmarkRunner subSingleBenchmarkRunner=new SubSingleBenchmarkRunner(subSingleBenchmarkResult);
        Future<SubSingleBenchmarkRunner> future=executorService.submit(subSingleBenchmarkRunner);
        futureMap.put(subSingleBenchmarkRunner,future);
      }
    }
  }
  for (  Map.Entry<SubSingleBenchmarkRunner,Future<SubSingleBenchmarkRunner>> futureEntry : futureMap.entrySet()) {
    SubSingleBenchmarkRunner subSingleBenchmarkRunner=futureEntry.getKey();
    Future<SubSingleBenchmarkRunner> future=futureEntry.getValue();
    Throwable failureThrowable=null;
    try {
      subSingleBenchmarkRunner=future.get();
      if (subSingleBenchmarkRunner.getSubSingleBenchmarkResult().getAverageScore() == null) {
        throw new IllegalStateException("Score is null. TODO fix PLANNER-46.");
      }
    }
 catch (    InterruptedException e) {
      Thread.currentThread().interrupt();
      singleBenchmarkRunnerExceptionLogger.error("The subSingleBenchmarkRunner ({}) was interrupted.",subSingleBenchmarkRunner,e);
      failureThrowable=e;
    }
catch (    ExecutionException e) {
      Throwable cause=e.getCause();
      singleBenchmarkRunnerExceptionLogger.warn("The subSingleBenchmarkRunner ({}) failed.",subSingleBenchmarkRunner,cause);
      failureThrowable=cause;
    }
catch (    IllegalStateException e) {
      singleBenchmarkRunnerExceptionLogger.warn("The subSingleBenchmarkRunner ({}) failed.",subSingleBenchmarkRunner,e);
      failureThrowable=e;
    }
    if (failureThrowable == null) {
      subSingleBenchmarkRunner.getSubSingleBenchmarkResult().setSucceeded(true);
    }
 else {
      subSingleBenchmarkRunner.getSubSingleBenchmarkResult().setSucceeded(false);
      subSingleBenchmarkRunner.setFailureThrowable(failureThrowable);
      if (firstFailureSubSingleBenchmarkRunner == null) {
        firstFailureSubSingleBenchmarkRunner=subSingleBenchmarkRunner;
      }
    }
  }
}
