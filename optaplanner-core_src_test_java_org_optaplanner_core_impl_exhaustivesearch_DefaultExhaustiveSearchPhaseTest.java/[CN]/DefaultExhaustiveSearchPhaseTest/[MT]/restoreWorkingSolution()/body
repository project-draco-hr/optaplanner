{
  ExhaustiveSearchPhaseScope phaseScope=mock(ExhaustiveSearchPhaseScope.class);
  ExhaustiveSearchStepScope lastCompletedStepScope=mock(ExhaustiveSearchStepScope.class);
  when(phaseScope.getLastCompletedStepScope()).thenReturn(lastCompletedStepScope);
  ExhaustiveSearchStepScope stepScope=mock(ExhaustiveSearchStepScope.class);
  when(stepScope.getPhaseScope()).thenReturn(phaseScope);
  AbstractSolution workingSolution=mock(AbstractSolution.class);
  when(phaseScope.getWorkingSolution()).thenReturn(workingSolution);
  SolutionDescriptor sd=mock(SolutionDescriptor.class);
  when(phaseScope.getSolutionDescriptor()).thenReturn(sd);
  ExhaustiveSearchLayer layer0=new ExhaustiveSearchLayer(0,mock(Object.class),100);
  ExhaustiveSearchLayer layer1=new ExhaustiveSearchLayer(1,mock(Object.class),99);
  ExhaustiveSearchLayer layer2=new ExhaustiveSearchLayer(2,mock(Object.class),98);
  ExhaustiveSearchLayer layer3=new ExhaustiveSearchLayer(3,mock(Object.class),97);
  ExhaustiveSearchLayer layer4=new ExhaustiveSearchLayer(4,mock(Object.class),96);
  ExhaustiveSearchNode node0=new ExhaustiveSearchNode(layer0,null);
  node0.setMove(mock(Move.class));
  node0.setUndoMove(mock(Move.class));
  ExhaustiveSearchNode node1=new ExhaustiveSearchNode(layer1,node0);
  node1.setMove(mock(Move.class));
  node1.setUndoMove(mock(Move.class));
  ExhaustiveSearchNode node2A=new ExhaustiveSearchNode(layer2,node1);
  node2A.setMove(mock(Move.class));
  node2A.setUndoMove(mock(Move.class));
  ExhaustiveSearchNode node3A=new ExhaustiveSearchNode(layer3,node2A);
  node3A.setMove(mock(Move.class));
  node3A.setUndoMove(mock(Move.class));
  ExhaustiveSearchNode node2B=new ExhaustiveSearchNode(layer2,node1);
  node2B.setMove(mock(Move.class));
  node2B.setUndoMove(mock(Move.class));
  ExhaustiveSearchNode node3B=new ExhaustiveSearchNode(layer3,node2B);
  node3B.setMove(mock(Move.class));
  node3B.setUndoMove(mock(Move.class));
  ExhaustiveSearchNode node4B=new ExhaustiveSearchNode(layer4,node3B);
  node4B.setMove(mock(Move.class));
  node4B.setUndoMove(mock(Move.class));
  Score newScore=SimpleScore.valueOf(7);
  node4B.setScore(newScore);
  when(lastCompletedStepScope.getExpandingNode()).thenReturn(node3A);
  when(stepScope.getExpandingNode()).thenReturn(node4B);
  DefaultExhaustiveSearchPhase phase=new DefaultExhaustiveSearchPhase();
  phase.setEntitySelector(mock(EntitySelector.class));
  phase.setDecider(mock(ExhaustiveSearchDecider.class));
  phase.restoreWorkingSolution(stepScope);
  verify(node0.getMove(),times(0)).doMove(any(ScoreDirector.class));
  verify(node0.getUndoMove(),times(0)).doMove(any(ScoreDirector.class));
  verify(node1.getMove(),times(0)).doMove(any(ScoreDirector.class));
  verify(node1.getUndoMove(),times(0)).doMove(any(ScoreDirector.class));
  verify(node2A.getMove(),times(0)).doMove(any(ScoreDirector.class));
  verify(node2A.getUndoMove(),times(1)).doMove(any(ScoreDirector.class));
  verify(node3A.getMove(),times(0)).doMove(any(ScoreDirector.class));
  verify(node3A.getUndoMove(),times(1)).doMove(any(ScoreDirector.class));
  verify(node2B.getMove(),times(1)).doMove(any(ScoreDirector.class));
  verify(node2B.getUndoMove(),times(0)).doMove(any(ScoreDirector.class));
  verify(node3B.getMove(),times(1)).doMove(any(ScoreDirector.class));
  verify(node3B.getUndoMove(),times(0)).doMove(any(ScoreDirector.class));
  verify(node4B.getMove(),times(1)).doMove(any(ScoreDirector.class));
  verify(node4B.getUndoMove(),times(0)).doMove(any(ScoreDirector.class));
}
