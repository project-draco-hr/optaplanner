{
  EntitySelector childEntitySelector=SelectorTestUtils.mockEntitySelector(TestdataEntity.class,new TestdataEntity("e1"),new TestdataEntity("e2"),new TestdataEntity("e3"),new TestdataEntity("e4"));
  SelectionProbabilityWeightFactory<TestdataEntity> probabilityWeightFactory=new SelectionProbabilityWeightFactory<TestdataEntity>(){
    public double createProbabilityWeight(    ScoreDirector scoreDirector,    TestdataEntity entity){
      if (entity.getCode().equals("e1")) {
        return 1000.0;
      }
 else       if (entity.getCode().equals("e2")) {
        return 200.0;
      }
 else       if (entity.getCode().equals("e3")) {
        return 30.0;
      }
 else       if (entity.getCode().equals("e4")) {
        return 4.0;
      }
 else {
        throw new IllegalStateException("Unknown entity (" + entity + ").");
      }
    }
  }
;
  EntitySelector entitySelector=new ProbabilityEntitySelector(childEntitySelector,SelectionCacheType.STEP,probabilityWeightFactory);
  Random workingRandom=mock(Random.class);
  when(workingRandom.nextDouble()).thenReturn(1222.0 / 1234.0,111.0 / 1234.0,0.0,1230.0 / 1234.0,1199.0 / 1234.0);
  DefaultSolverScope solverScope=mock(DefaultSolverScope.class);
  when(solverScope.getWorkingRandom()).thenReturn(workingRandom);
  entitySelector.solvingStarted(solverScope);
  AbstractSolverPhaseScope phaseScopeA=mock(AbstractSolverPhaseScope.class);
  when(phaseScopeA.getSolverScope()).thenReturn(solverScope);
  when(phaseScopeA.getWorkingRandom()).thenReturn(workingRandom);
  entitySelector.phaseStarted(phaseScopeA);
  AbstractStepScope stepScopeA1=mock(AbstractStepScope.class);
  when(stepScopeA1.getPhaseScope()).thenReturn(phaseScopeA);
  when(stepScopeA1.getWorkingRandom()).thenReturn(workingRandom);
  entitySelector.stepStarted(stepScopeA1);
  assertEquals(false,entitySelector.isContinuous());
  assertEquals(true,entitySelector.isNeverEnding());
  assertEquals(4L,entitySelector.getSize());
  Iterator<Object> iterator=entitySelector.iterator();
  assertTrue(iterator.hasNext());
  assertCode("e3",iterator.next());
  assertTrue(iterator.hasNext());
  assertCode("e1",iterator.next());
  assertTrue(iterator.hasNext());
  assertCode("e1",iterator.next());
  assertTrue(iterator.hasNext());
  assertCode("e4",iterator.next());
  assertTrue(iterator.hasNext());
  assertCode("e2",iterator.next());
  assertTrue(iterator.hasNext());
  entitySelector.stepEnded(stepScopeA1);
  entitySelector.phaseEnded(phaseScopeA);
  entitySelector.solvingEnded(solverScope);
  verifySolverPhaseLifecycle(childEntitySelector,1,1,1);
  verify(childEntitySelector,times(1)).iterator();
}
