{
  Iterator<Object> recordingIterator=recordingEntitySelector.iterator();
  assertNotNull(recordingIterator);
  Iterator<Object> replayingIterator=replayingEntitySelector.iterator();
  assertNotNull(replayingIterator);
  assertEquals(true,recordingIterator.hasNext());
  assertEquals(true,replayingIterator.hasNext());
  assertCode("e1",recordingIterator.next());
  assertCode("e1",replayingIterator.next());
  assertEquals(true,recordingIterator.hasNext());
  assertEquals(true,replayingIterator.hasNext());
  assertCode("e2",recordingIterator.next());
  assertCode("e2",replayingIterator.next());
  assertEquals(false,replayingIterator.hasNext());
  assertEquals(true,recordingIterator.hasNext());
  assertEquals(true,replayingIterator.hasNext());
  assertEquals(true,replayingIterator.hasNext());
  assertCode("e3",recordingIterator.next());
  assertCode("e3",replayingIterator.next());
  assertEquals(false,recordingIterator.hasNext());
  assertEquals(false,replayingIterator.hasNext());
  assertEquals(false,replayingIterator.hasNext());
  assertEquals(true,recordingEntitySelector.isCountable());
  assertEquals(true,replayingEntitySelector.isCountable());
  assertEquals(false,recordingEntitySelector.isNeverEnding());
  assertEquals(false,replayingEntitySelector.isNeverEnding());
  assertEquals(3L,recordingEntitySelector.getSize());
  assertEquals(3L,replayingEntitySelector.getSize());
}
