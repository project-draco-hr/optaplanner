{
  Locale locale=benchmarkReport.getLocale();
  NumberAxis xAxis=new NumberAxis("Time spend");
  xAxis.setNumberFormatOverride(new MillisecondsSpendNumberFormat(locale));
  NumberAxis yAxis=new NumberAxis("Memory");
  yAxis.setNumberFormatOverride(NumberFormat.getInstance(locale));
  XYPlot plot=new XYPlot(null,xAxis,yAxis,null);
  plot.setOrientation(PlotOrientation.VERTICAL);
  int seriesIndex=0;
  for (  SingleBenchmarkResult singleBenchmarkResult : problemBenchmarkResult.getSingleBenchmarkResultList()) {
    XYSeries usedSeries=new XYSeries(singleBenchmarkResult.getSolverBenchmarkResult().getNameWithFavoriteSuffix() + " used");
    XYItemRenderer renderer=new XYLineAndShapeRenderer();
    if (singleBenchmarkResult.isSuccess()) {
      MemoryUseSingleStatistic singleStatistic=(MemoryUseSingleStatistic)singleBenchmarkResult.getSingleStatistic(problemStatisticType);
      for (      MemoryUseSingleStatisticPoint point : singleStatistic.getPointList()) {
        long timeMillisSpend=point.getTimeMillisSpend();
        MemoryUseMeasurement memoryUseMeasurement=point.getMemoryUseMeasurement();
        usedSeries.add(timeMillisSpend,memoryUseMeasurement.getUsedMemory());
      }
    }
    XYSeriesCollection seriesCollection=new XYSeriesCollection();
    seriesCollection.addSeries(usedSeries);
    plot.setDataset(seriesIndex,seriesCollection);
    if (singleBenchmarkResult.getSolverBenchmarkResult().isFavorite()) {
      renderer.setSeriesStroke(0,new BasicStroke(2.0f));
    }
    plot.setRenderer(seriesIndex,renderer);
    seriesIndex++;
  }
  JFreeChart chart=new JFreeChart(problemBenchmarkResult.getName() + " memory use statistic",JFreeChart.DEFAULT_TITLE_FONT,plot,true);
  graphFile=writeChartToImageFile(chart,problemBenchmarkResult.getName() + "MemoryUseStatistic");
}
