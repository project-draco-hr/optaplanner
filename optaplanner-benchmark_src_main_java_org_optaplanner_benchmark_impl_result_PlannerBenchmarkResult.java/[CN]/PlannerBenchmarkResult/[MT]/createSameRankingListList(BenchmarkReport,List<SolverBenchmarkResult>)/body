{
  List<List<SolverBenchmarkResult>> sameRankingListList=new ArrayList<List<SolverBenchmarkResult>>(rankableSolverBenchmarkResultList.size());
  if (benchmarkReport.getSolverRankingComparator() != null) {
    Comparator<SolverBenchmarkResult> comparator=Collections.reverseOrder(benchmarkReport.getSolverRankingComparator());
    Collections.sort(rankableSolverBenchmarkResultList,comparator);
    List<SolverBenchmarkResult> sameRankingList=null;
    SolverBenchmarkResult previousSolverBenchmarkResult=null;
    for (    SolverBenchmarkResult solverBenchmarkResult : rankableSolverBenchmarkResultList) {
      if (previousSolverBenchmarkResult == null || comparator.compare(previousSolverBenchmarkResult,solverBenchmarkResult) != 0) {
        sameRankingList=new ArrayList<SolverBenchmarkResult>();
        sameRankingListList.add(sameRankingList);
      }
      sameRankingList.add(solverBenchmarkResult);
      previousSolverBenchmarkResult=solverBenchmarkResult;
    }
  }
 else   if (benchmarkReport.getSolverRankingWeightFactory() != null) {
    SortedMap<Comparable,List<SolverBenchmarkResult>> rankedMap=new TreeMap<Comparable,List<SolverBenchmarkResult>>(new ReverseComparator());
    for (    SolverBenchmarkResult solverBenchmarkResult : rankableSolverBenchmarkResultList) {
      Comparable rankingWeight=benchmarkReport.getSolverRankingWeightFactory().createRankingWeight(rankableSolverBenchmarkResultList,solverBenchmarkResult);
      List<SolverBenchmarkResult> sameRankingList=rankedMap.get(rankingWeight);
      if (sameRankingList == null) {
        sameRankingList=new ArrayList<SolverBenchmarkResult>();
        rankedMap.put(rankingWeight,sameRankingList);
      }
      sameRankingList.add(solverBenchmarkResult);
    }
    for (    Map.Entry<Comparable,List<SolverBenchmarkResult>> entry : rankedMap.entrySet()) {
      sameRankingListList.add(entry.getValue());
    }
  }
 else {
    throw new IllegalStateException("Ranking is impossible" + " because solverRankingComparator and solverRankingWeightFactory are null.");
  }
  return sameRankingListList;
}
