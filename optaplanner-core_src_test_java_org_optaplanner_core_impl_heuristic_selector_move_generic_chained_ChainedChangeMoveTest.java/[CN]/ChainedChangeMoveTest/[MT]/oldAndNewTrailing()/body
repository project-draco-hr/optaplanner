{
  GenuineVariableDescriptor variableDescriptor=TestdataChainedEntity.buildVariableDescriptorForChainedObject();
  InnerScoreDirector scoreDirector=mock(InnerScoreDirector.class);
  TestdataChainedAnchor a0=new TestdataChainedAnchor("a0");
  TestdataChainedEntity a1=new TestdataChainedEntity("a1",a0);
  TestdataChainedEntity a2=new TestdataChainedEntity("a2",a1);
  TestdataChainedEntity a3=new TestdataChainedEntity("a3",a2);
  TestdataChainedAnchor b0=new TestdataChainedAnchor("b0");
  TestdataChainedEntity b1=new TestdataChainedEntity("b1",b0);
  SelectorTestUtils.mockMethodGetTrailingEntity(scoreDirector,variableDescriptor,new TestdataChainedEntity[]{a1,a2,a3,b1});
  ChainedChangeMove move=new ChainedChangeMove(a2,variableDescriptor,b0);
  Move undoMove=move.createUndoMove(scoreDirector);
  move.doMove(scoreDirector);
  SelectorTestUtils.assertChain(a0,a1,a3);
  SelectorTestUtils.assertChain(b0,a2,b1);
  verify(scoreDirector).beforeVariableChanged(variableDescriptor,a2);
  verify(scoreDirector).afterVariableChanged(variableDescriptor,a2);
  verify(scoreDirector).beforeVariableChanged(variableDescriptor,a3);
  verify(scoreDirector).afterVariableChanged(variableDescriptor,a3);
  verify(scoreDirector).beforeVariableChanged(variableDescriptor,b1);
  verify(scoreDirector).afterVariableChanged(variableDescriptor,b1);
  undoMove.doMove(scoreDirector);
  SelectorTestUtils.assertChain(a0,a1,a2,a3);
  SelectorTestUtils.assertChain(b0,b1);
}
