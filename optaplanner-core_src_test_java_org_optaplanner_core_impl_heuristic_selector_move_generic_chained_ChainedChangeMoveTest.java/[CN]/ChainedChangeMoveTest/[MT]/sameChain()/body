{
  GenuineVariableDescriptor variableDescriptor=TestdataChainedEntity.buildVariableDescriptorForChainedObject();
  InnerScoreDirector scoreDirector=PlannerTestUtils.mockScoreDirector(variableDescriptor.getEntityDescriptor().getSolutionDescriptor());
  TestdataChainedAnchor a0=new TestdataChainedAnchor("a0");
  TestdataChainedEntity a1=new TestdataChainedEntity("a1",a0);
  TestdataChainedEntity a2=new TestdataChainedEntity("a2",a1);
  TestdataChainedEntity a3=new TestdataChainedEntity("a3",a2);
  TestdataChainedEntity a4=new TestdataChainedEntity("a4",a3);
  SingletonInverseVariableSupply inverseVariableSupply=SelectorTestUtils.mockSingletonInverseVariableSupply(new TestdataChainedEntity[]{a1,a2,a3,a4});
  ChainedChangeMove move=new ChainedChangeMove(a2,variableDescriptor,inverseVariableSupply,a3);
  Move undoMove=move.createUndoMove(scoreDirector);
  move.doMove(scoreDirector);
  SelectorTestUtils.assertChain(a0,a1,a3,a2,a4);
  verify(scoreDirector).changeVariableFacade(variableDescriptor,a2,a3);
  verify(scoreDirector).changeVariableFacade(variableDescriptor,a3,a1);
  verify(scoreDirector).changeVariableFacade(variableDescriptor,a4,a2);
  undoMove.doMove(scoreDirector);
  SelectorTestUtils.assertChain(a0,a1,a2,a3,a4);
}
