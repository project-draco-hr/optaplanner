{
  Score maxScore=stepScope.getPhaseScope().getScoreDefinition().getPerfectMinimumScore();
  ConstructionHeuristicMoveScope maxMoveScope=null;
  Object entity=stepScope.getEntity();
  int selectedCount=0;
  int moveIndex=0;
  for (  Object value : valueSelector) {
    ConstructionHeuristicMoveScope moveScope=new ConstructionHeuristicMoveScope(stepScope);
    moveScope.setMoveIndex(moveIndex);
    ChangeMove move=new ChangeMove(entity,variableDescriptor,value);
    moveScope.setMove(move);
    if (!move.isMoveDoable(stepScope.getScoreDirector())) {
      logger.trace("        Ignoring not doable move ({}).",move);
    }
 else {
      doMove(moveScope);
      if (moveScope.getScore().compareTo(maxScore) > 0) {
        maxScore=moveScope.getScore();
        maxMoveScope=moveScope;
      }
      if (selectedCount >= selectedCountLimit) {
        break;
      }
    }
    moveIndex++;
    if (termination.isPhaseTerminated(stepScope.getPhaseScope())) {
      break;
    }
  }
  if (maxMoveScope != null) {
    Move step=maxMoveScope.getMove();
    stepScope.setStep(step);
    if (logger.isDebugEnabled()) {
      stepScope.setStepString(step.toString());
    }
    stepScope.setUndoStep(maxMoveScope.getUndoMove());
    stepScope.setScore(maxMoveScope.getScore());
  }
}
