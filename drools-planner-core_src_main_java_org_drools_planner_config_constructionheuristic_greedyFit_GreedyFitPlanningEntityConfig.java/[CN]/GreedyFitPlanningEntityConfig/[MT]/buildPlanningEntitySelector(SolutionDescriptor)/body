{
  PlanningEntityDescriptor planningEntityDescriptor;
  Class<?> resolvedEntityClass;
  if (planningEntityClass != null) {
    resolvedEntityClass=planningEntityClass;
  }
 else {
    Set<Class<?>> planningEntityImplementationClassSet=solutionDescriptor.getPlanningEntityImplementationClassSet();
    if (planningEntityImplementationClassSet.size() != 1) {
      throw new IllegalArgumentException("The greedyFitPlanningEntity has no planningEntityClass but there are multiple (" + planningEntityImplementationClassSet.size() + ") planningEntityClasses.");
    }
    resolvedEntityClass=planningEntityImplementationClassSet.iterator().next();
  }
  if (!solutionDescriptor.hasPlanningEntityDescriptor(planningEntityClass)) {
    throw new IllegalArgumentException("The greedyFitPlanningEntity has a planningEntityClass (" + planningEntityClass + ") that has not been configured as a planningEntity.");
  }
  planningEntityDescriptor=solutionDescriptor.getPlanningEntityDescriptor(planningEntityClass);
  PlanningEntitySelector planningEntitySelector=new PlanningEntitySelector(planningEntityDescriptor);
  planningEntitySelector.setSelectionOrder(selectionOrder != null ? selectionOrder : PlanningEntitySelectionOrder.ORIGINAL);
  planningEntitySelector.setResetInitializedPlanningEntities(resetInitializedPlanningEntities != null ? resetInitializedPlanningEntities.booleanValue() : false);
  return planningEntitySelector;
}
