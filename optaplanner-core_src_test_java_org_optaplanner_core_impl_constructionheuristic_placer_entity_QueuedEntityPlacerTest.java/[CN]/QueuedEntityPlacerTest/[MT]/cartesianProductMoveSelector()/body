{
  EntitySelector entitySelector=SelectorTestUtils.mockEntitySelector(TestdataMultiVarEntity.class,new TestdataMultiVarEntity("a"),new TestdataMultiVarEntity("b"));
  MimicRecordingEntitySelector recordingEntitySelector=new MimicRecordingEntitySelector(entitySelector);
  ValueSelector primaryValueSelector=SelectorTestUtils.mockValueSelector(TestdataMultiVarEntity.class,"primaryValue",new TestdataValue("1"),new TestdataValue("2"),new TestdataValue("3"));
  ValueSelector secondaryValueSelector=SelectorTestUtils.mockValueSelector(TestdataMultiVarEntity.class,"secondaryValue",new TestdataValue("8"),new TestdataValue("9"));
  List<MoveSelector> moveSelectorList=new ArrayList<MoveSelector>(2);
  moveSelectorList.add(new ChangeMoveSelector(new MimicReplayingEntitySelector(recordingEntitySelector),primaryValueSelector,false));
  moveSelectorList.add(new ChangeMoveSelector(new MimicReplayingEntitySelector(recordingEntitySelector),secondaryValueSelector,false));
  MoveSelector moveSelector=new CartesianProductMoveSelector(moveSelectorList,false);
  QueuedEntityPlacer placer=new QueuedEntityPlacer(recordingEntitySelector,Collections.singletonList(moveSelector));
  DefaultSolverScope solverScope=mock(DefaultSolverScope.class);
  placer.solvingStarted(solverScope);
  AbstractSolverPhaseScope phaseScopeA=mock(AbstractSolverPhaseScope.class);
  when(phaseScopeA.getSolverScope()).thenReturn(solverScope);
  placer.phaseStarted(phaseScopeA);
  Iterator<Placement> placementIterator=placer.iterator();
  assertTrue(placementIterator.hasNext());
  AbstractStepScope stepScopeA1=mock(AbstractStepScope.class);
  when(stepScopeA1.getPhaseScope()).thenReturn(phaseScopeA);
  placer.stepStarted(stepScopeA1);
  assertCartesianProductPlacement(placementIterator.next(),"a",new String[][]{{"1","8"},{"1","9"},{"2","8"},{"2","9"},{"3","8"},{"3","9"}});
  placer.stepEnded(stepScopeA1);
  assertTrue(placementIterator.hasNext());
  AbstractStepScope stepScopeA2=mock(AbstractStepScope.class);
  when(stepScopeA2.getPhaseScope()).thenReturn(phaseScopeA);
  placer.stepStarted(stepScopeA2);
  assertCartesianProductPlacement(placementIterator.next(),"b",new String[][]{{"1","8"},{"1","9"},{"2","8"},{"2","9"},{"3","8"},{"3","9"}});
  placer.stepEnded(stepScopeA2);
  assertFalse(placementIterator.hasNext());
  placer.phaseEnded(phaseScopeA);
  placer.solvingEnded(solverScope);
  verifySolverPhaseLifecycle(entitySelector,1,1,2);
  verifySolverPhaseLifecycle(primaryValueSelector,1,1,2);
  verifySolverPhaseLifecycle(secondaryValueSelector,1,1,2);
}
