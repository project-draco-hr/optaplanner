{
  OHLCSeriesCollection seriesCollection=new OHLCSeriesCollection();
  Map<Machine,OHLCSeries> machineSeriesMap=new LinkedHashMap<Machine,OHLCSeries>(solution.getMachineList().size());
  HighLowRenderer renderer=new HighLowRenderer();
  renderer.setTickLength(0.0);
  int seriesIndex=0;
  OHLCSeries unassignedProjectSeries=new OHLCSeries("Unassigned");
  seriesCollection.addSeries(unassignedProjectSeries);
  machineSeriesMap.put(null,unassignedProjectSeries);
  renderer.setSeriesStroke(seriesIndex,new BasicStroke(3.0f));
  renderer.setSeriesPaint(seriesIndex,TangoColorFactory.SCARLET_1);
  seriesIndex++;
  for (  Machine machine : solution.getMachineList()) {
    OHLCSeries machineSeries=new OHLCSeries(machine.getLabel());
    seriesCollection.addSeries(machineSeries);
    machineSeriesMap.put(machine,machineSeries);
    renderer.setSeriesStroke(seriesIndex,new BasicStroke(3.0f));
    renderer.setSeriesPaint(seriesIndex,tangoColorFactory.pickColor(machine));
    seriesIndex++;
  }
  List<TaskAssignment> taskAssignmentList=new ArrayList<TaskAssignment>(solution.getTaskAssignmentList());
  Collections.sort(taskAssignmentList,groupByMachineCheckBox.isSelected() ? groupByMachineTaskAssignmentComparator : stableTaskAssignmentComparator);
  int pixelIndex=0;
  for (  TaskAssignment taskAssignment : taskAssignmentList) {
    Task task=taskAssignment.getTask();
    Integer startPeriod=taskAssignment.getStartPeriod();
    Integer endPeriod=taskAssignment.getEndPeriod();
    if (startPeriod == null) {
      startPeriod=task.getStartPeriodRangeFrom();
      endPeriod=startPeriod + task.getDuration();
    }
    OHLCSeries machineSeries=machineSeriesMap.get(taskAssignment.getMachine());
    machineSeries.add(new FixedMillisecond(pixelIndex),task.getStartPeriodRangeFrom(),startPeriod,endPeriod,task.getStartPeriodRangeTo() + task.getDuration());
    pixelIndex++;
  }
  NumberAxis domainAxis=new NumberAxis("Task");
  domainAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());
  domainAxis.setRange(-0.5,taskAssignmentList.size() - 0.5);
  domainAxis.setInverted(true);
  return new XYPlot(seriesCollection,domainAxis,null,renderer);
}
