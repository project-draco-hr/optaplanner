{
  EntitySelector childEntitySelector=mock(EntitySelector.class);
  final List<Object> entityList=Arrays.<Object>asList(new TestdataEntity("e1"),new TestdataEntity("e2"),new TestdataEntity("e3"),new TestdataEntity("e4"));
  when(childEntitySelector.iterator()).thenAnswer(new Answer<Object>(){
    public Object answer(    InvocationOnMock invocation) throws Throwable {
      return entityList.iterator();
    }
  }
);
  when(childEntitySelector.isContinuous()).thenReturn(false);
  when(childEntitySelector.isNeverEnding()).thenReturn(false);
  when(childEntitySelector.getSize()).thenReturn((long)entityList.size());
  SelectionFilter<TestdataEntity> entityFilter=new SelectionFilter<TestdataEntity>(){
    public boolean accept(    ScoreDirector scoreDirector,    TestdataEntity entity){
      return !entity.getCode().equals("e3");
    }
  }
;
  EntitySelector entitySelector=cacheType == SelectionCacheType.JUST_IN_TIME ? new JustInTimeFilteringEntitySelector(childEntitySelector,cacheType,entityFilter) : new CachingFilteringEntitySelector(childEntitySelector,cacheType,entityFilter);
  DefaultSolverScope solverScope=mock(DefaultSolverScope.class);
  entitySelector.solvingStarted(solverScope);
  AbstractSolverPhaseScope phaseScopeA=mock(AbstractSolverPhaseScope.class);
  when(phaseScopeA.getSolverScope()).thenReturn(solverScope);
  entitySelector.phaseStarted(phaseScopeA);
  AbstractStepScope stepScopeA1=mock(AbstractStepScope.class);
  when(stepScopeA1.getSolverPhaseScope()).thenReturn(phaseScopeA);
  entitySelector.stepStarted(stepScopeA1);
  runAsserts(entitySelector,cacheType);
  entitySelector.stepEnded(stepScopeA1);
  AbstractStepScope stepScopeA2=mock(AbstractStepScope.class);
  when(stepScopeA2.getSolverPhaseScope()).thenReturn(phaseScopeA);
  entitySelector.stepStarted(stepScopeA2);
  runAsserts(entitySelector,cacheType);
  entitySelector.stepEnded(stepScopeA2);
  entitySelector.phaseEnded(phaseScopeA);
  AbstractSolverPhaseScope phaseScopeB=mock(AbstractSolverPhaseScope.class);
  when(phaseScopeB.getSolverScope()).thenReturn(solverScope);
  entitySelector.phaseStarted(phaseScopeB);
  AbstractStepScope stepScopeB1=mock(AbstractStepScope.class);
  when(stepScopeB1.getSolverPhaseScope()).thenReturn(phaseScopeB);
  entitySelector.stepStarted(stepScopeB1);
  runAsserts(entitySelector,cacheType);
  entitySelector.stepEnded(stepScopeB1);
  AbstractStepScope stepScopeB2=mock(AbstractStepScope.class);
  when(stepScopeB2.getSolverPhaseScope()).thenReturn(phaseScopeB);
  entitySelector.stepStarted(stepScopeB2);
  runAsserts(entitySelector,cacheType);
  entitySelector.stepEnded(stepScopeB2);
  AbstractStepScope stepScopeB3=mock(AbstractStepScope.class);
  when(stepScopeB3.getSolverPhaseScope()).thenReturn(phaseScopeB);
  entitySelector.stepStarted(stepScopeB3);
  runAsserts(entitySelector,cacheType);
  entitySelector.stepEnded(stepScopeB3);
  entitySelector.phaseEnded(phaseScopeB);
  entitySelector.solvingEnded(solverScope);
  verify(childEntitySelector,times(1)).solvingStarted(solverScope);
  verify(childEntitySelector,times(2)).phaseStarted(Matchers.<AbstractSolverPhaseScope>any());
  verify(childEntitySelector,times(5)).stepStarted(Matchers.<AbstractStepScope>any());
  verify(childEntitySelector,times(5)).stepEnded(Matchers.<AbstractStepScope>any());
  verify(childEntitySelector,times(2)).phaseEnded(Matchers.<AbstractSolverPhaseScope>any());
  verify(childEntitySelector,times(1)).solvingEnded(solverScope);
  verify(childEntitySelector,times(timesCalled)).iterator();
  verify(childEntitySelector,times(timesCalled)).getSize();
}
