{
  AssetClassAllocation firstFrom;
  AssetClassAllocation secondFrom;
  int nonEmptyAllocationListSize=nonEmptyAllocationList.size();
  if (nonEmptyAllocationListSize == 1) {
    firstFrom=nonEmptyAllocationList.get(0);
    secondFrom=firstFrom;
  }
 else {
    firstFrom=nonEmptyAllocationList.get(workingRandom.nextInt(nonEmptyAllocationListSize));
    secondFrom=nonEmptyAllocationList.get(workingRandom.nextInt(nonEmptyAllocationListSize));
  }
  int allocationListSize=allocationList.size();
  int toCandidateSize=allocationListSize - (firstFrom == secondFrom ? 1 : 2);
  AssetClassAllocation firstTo=allocationList.get(workingRandom.nextInt(toCandidateSize));
  if (firstTo == firstFrom) {
    firstTo=allocationList.get(allocationListSize - 1);
  }
 else   if (firstTo == secondFrom) {
    firstTo=allocationList.get(allocationListSize - 2);
  }
  AssetClassAllocation secondTo=allocationList.get(workingRandom.nextInt(toCandidateSize));
  if (secondTo == firstFrom) {
    secondTo=allocationList.get(allocationListSize - 1);
  }
 else   if (secondTo == secondFrom) {
    secondTo=allocationList.get(allocationListSize - 2);
  }
  long firstTransferMillis=RandomUtils.nextLong(workingRandom,firstFrom.getQuantityMillis()) + 1L;
  if (firstFrom == secondFrom && firstFrom.getQuantityMillis() == firstTransferMillis) {
    firstTransferMillis--;
  }
  long secondTransferMillis=RandomUtils.nextLong(workingRandom,secondFrom.getQuantityMillis() - (firstFrom == secondFrom ? firstTransferMillis : 0L)) + 1L;
  return CompositeMove.buildMove(new InvestmentQuantityTransferMove(firstFrom,firstTo,firstTransferMillis),new InvestmentQuantityTransferMove(secondFrom,secondTo,secondTransferMillis));
}
