{
  City startCity=travelingSalesmanTour.getStartCity();
  WorkingMemory workingMemory=solutionDirector.getWorkingMemory();
  List<CityAssignment> cityAssignmentList=createCityAssignmentList(travelingSalesmanTour);
  List<CityAssignment> assignedCityAssignmentList=null;
  for (  CityAssignment cityAssignment : cityAssignmentList) {
    FactHandle cityAssignmentHandle=null;
    if (assignedCityAssignmentList == null) {
      assignedCityAssignmentList=new ArrayList<CityAssignment>(cityAssignmentList.size());
      cityAssignment.setNextCityAssignment(cityAssignment);
      cityAssignment.setPreviousCityAssignment(cityAssignment);
      cityAssignmentHandle=workingMemory.insert(cityAssignment);
    }
 else {
      Score bestScore=DefaultSimpleScore.valueOf(Integer.MIN_VALUE);
      CityAssignment bestAfterCityAssignment=null;
      FactHandle bestAfterCityAssignmentFactHandle=null;
      CityAssignment bestBeforeCityAssignment=null;
      FactHandle bestBeforeCityAssignmentFactHandle=null;
      for (      CityAssignment afterCityAssignment : assignedCityAssignmentList) {
        CityAssignment beforeCityAssignment=afterCityAssignment.getNextCityAssignment();
        FactHandle afterCityAssignmentFactHandle=workingMemory.getFactHandle(afterCityAssignment);
        FactHandle beforeCityAssignmentFactHandle=workingMemory.getFactHandle(beforeCityAssignment);
        afterCityAssignment.setNextCityAssignment(cityAssignment);
        cityAssignment.setPreviousCityAssignment(afterCityAssignment);
        cityAssignment.setNextCityAssignment(beforeCityAssignment);
        beforeCityAssignment.setPreviousCityAssignment(cityAssignment);
        if (cityAssignmentHandle == null) {
          cityAssignmentHandle=workingMemory.insert(cityAssignment);
        }
 else {
          workingMemory.update(cityAssignmentHandle,cityAssignment);
        }
        workingMemory.update(afterCityAssignmentFactHandle,afterCityAssignment);
        workingMemory.update(beforeCityAssignmentFactHandle,beforeCityAssignment);
        Score score=solutionDirector.calculateScoreFromWorkingMemory();
        if (score.compareTo(bestScore) > 0) {
          bestScore=score;
          bestAfterCityAssignment=afterCityAssignment;
          bestAfterCityAssignmentFactHandle=afterCityAssignmentFactHandle;
          bestBeforeCityAssignment=beforeCityAssignment;
          bestBeforeCityAssignmentFactHandle=beforeCityAssignmentFactHandle;
        }
        afterCityAssignment.setNextCityAssignment(beforeCityAssignment);
        beforeCityAssignment.setPreviousCityAssignment(afterCityAssignment);
        workingMemory.update(afterCityAssignmentFactHandle,afterCityAssignment);
        workingMemory.update(beforeCityAssignmentFactHandle,beforeCityAssignment);
      }
      if (bestAfterCityAssignment == null) {
        throw new IllegalStateException("The bestAfterCityAssignment (" + bestAfterCityAssignment + ") cannot be null.");
      }
      bestAfterCityAssignment.setNextCityAssignment(cityAssignment);
      cityAssignment.setPreviousCityAssignment(bestAfterCityAssignment);
      cityAssignment.setNextCityAssignment(bestBeforeCityAssignment);
      bestBeforeCityAssignment.setPreviousCityAssignment(cityAssignment);
      workingMemory.update(cityAssignmentHandle,cityAssignment);
      workingMemory.update(bestAfterCityAssignmentFactHandle,bestAfterCityAssignment);
      workingMemory.update(bestBeforeCityAssignmentFactHandle,bestBeforeCityAssignment);
    }
    assignedCityAssignmentList.add(cityAssignment);
    if (cityAssignment.getCity() == startCity) {
      travelingSalesmanTour.setStartCityAssignment(cityAssignment);
    }
    logger.debug("    CityAssignment ({}) initialized.",cityAssignment);
  }
  Collections.sort(cityAssignmentList,new PersistableIdComparator());
  travelingSalesmanTour.setCityAssignmentList(cityAssignmentList);
}
