{
  if (!subChainIterator.hasNext()) {
    subChainIterator=subChainSelector.iterator();
  }
  SubChain subChain=subChainIterator.next();
  int subChainIteratorCreationCount=0;
  while (!valueIterator.hasNext(subChain)) {
    valueIterator=valueSelector.iterator();
    if (!valueIterator.hasNext(subChain)) {
      if (!subChainIterator.hasNext()) {
        subChainIterator=subChainSelector.iterator();
        subChainIteratorCreationCount++;
        if (subChainIteratorCreationCount >= 2) {
          upcomingSelection=null;
          return;
        }
      }
      subChain=subChainIterator.next();
    }
  }
  Object toValue=valueIterator.next(subChain);
  boolean reversing=selectReversingMoveToo ? workingRandom.nextBoolean() : false;
  upcomingSelection=reversing ? new SubChainReversingChangeMove(subChain,valueSelector.getVariableDescriptor(),toValue) : new SubChainChangeMove(subChain,valueSelector.getVariableDescriptor(),toValue);
}
