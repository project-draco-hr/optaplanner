{
  this.subChainSelector=subChainSelector;
  this.valueSelector=valueSelector;
  this.randomSelection=randomSelection;
  this.selectReversingMoveToo=selectReversingMoveToo;
  if (subChainSelector.getVariableDescriptor() != valueSelector.getVariableDescriptor()) {
    throw new IllegalStateException("The selector (" + this + ") has a subChainSelector ("+ subChainSelector+ ") with variableDescriptor ("+ subChainSelector.getVariableDescriptor()+ ") which is not the same as the valueSelector ("+ valueSelector+ ")'s variableDescriptor("+ valueSelector.getVariableDescriptor()+ ").");
  }
  if (!randomSelection) {
    if (subChainSelector.isNeverEnding()) {
      throw new IllegalStateException("The selector (" + this + ") has a subChainSelector ("+ subChainSelector+ ") with neverEnding ("+ subChainSelector.isNeverEnding()+ ").");
    }
    if (valueSelector.isNeverEnding()) {
      throw new IllegalStateException("The selector (" + this + ") has a valueSelector ("+ valueSelector+ ") with neverEnding ("+ valueSelector.isNeverEnding()+ ").");
    }
  }
  solverPhaseLifecycleSupport.addEventListener(subChainSelector);
  solverPhaseLifecycleSupport.addEventListener(valueSelector);
}
