{
  Forager forager=new AcceptedForager(PickEarlyType.NEVER,Integer.MAX_VALUE);
  ((AcceptedForager)forager).setDeciderScoreComparatorFactory(new NaturalDeciderScoreComparatorFactory());
  LocalSearchSolverPhaseScope phaseScope=createLocalSearchSolverPhaseScope();
  forager.phaseStarted(phaseScope);
  LocalSearchStepScope localSearchStepScope=createStepScope(phaseScope);
  forager.stepStarted(localSearchStepScope);
  LocalSearchMoveScope a=createMoveScope(localSearchStepScope,SimpleScore.valueOf(-20),false);
  LocalSearchMoveScope b=createMoveScope(localSearchStepScope,SimpleScore.valueOf(-1),false);
  LocalSearchMoveScope c=createMoveScope(localSearchStepScope,SimpleScore.valueOf(-20),false);
  LocalSearchMoveScope d=createMoveScope(localSearchStepScope,SimpleScore.valueOf(-2),false);
  LocalSearchMoveScope e=createMoveScope(localSearchStepScope,SimpleScore.valueOf(-300),false);
  forager.addMove(a);
  assertFalse(forager.isQuitEarly());
  forager.addMove(b);
  assertFalse(forager.isQuitEarly());
  forager.addMove(c);
  assertFalse(forager.isQuitEarly());
  forager.addMove(d);
  assertFalse(forager.isQuitEarly());
  forager.addMove(e);
  assertFalse(forager.isQuitEarly());
  LocalSearchMoveScope pickedScope=forager.pickMove(localSearchStepScope);
  assertSame(b,pickedScope);
  forager.phaseEnded(phaseScope);
}
