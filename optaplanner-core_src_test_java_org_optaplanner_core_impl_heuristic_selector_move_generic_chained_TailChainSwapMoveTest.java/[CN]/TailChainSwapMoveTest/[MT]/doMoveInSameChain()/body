{
  GenuineVariableDescriptor variableDescriptor=TestdataChainedEntity.buildVariableDescriptorForChainedObject();
  SolutionDescriptor solutionDescriptor=variableDescriptor.getEntityDescriptor().getSolutionDescriptor();
  InnerScoreDirector scoreDirector=PlannerTestUtils.mockScoreDirector(solutionDescriptor);
  TestdataChainedAnchor a0=new TestdataChainedAnchor("a0");
  TestdataChainedEntity a1=new TestdataChainedEntity("a1",a0);
  TestdataChainedEntity a2=new TestdataChainedEntity("a2",a1);
  TestdataChainedEntity a3=new TestdataChainedEntity("a3",a2);
  TestdataChainedEntity a4=new TestdataChainedEntity("a4",a3);
  TestdataChainedEntity a5=new TestdataChainedEntity("a5",a4);
  TestdataChainedSolution solution=new TestdataChainedSolution("solution");
  solution.setChainedAnchorList(Arrays.asList(a0));
  solution.setChainedEntityList(Arrays.asList(a1,a2,a3,a4,a5));
  scoreDirector.setWorkingSolution(solution);
  SingletonInverseVariableSupply inverseVariableSupply=scoreDirector.getSupplyManager().demand(new SingletonInverseVariableDemand(variableDescriptor));
  AnchorVariableSupply anchorVariableSupply=scoreDirector.getSupplyManager().demand(new AnchorVariableDemand(variableDescriptor));
  SelectorTestUtils.assertChain(a0,a1,a2,a3,a4,a5);
  TailChainSwapMove move=new TailChainSwapMove(variableDescriptor,inverseVariableSupply,anchorVariableSupply,a4,a1);
  Move undoMove=move.createUndoMove(scoreDirector);
  move.doMove(scoreDirector);
  SelectorTestUtils.assertChain(a0,a1,a4,a3,a2,a5);
  undoMove.doMove(scoreDirector);
  SelectorTestUtils.assertChain(a0,a1,a2,a3,a4,a5);
  move=new TailChainSwapMove(variableDescriptor,inverseVariableSupply,anchorVariableSupply,a3,a1);
  undoMove=move.createUndoMove(scoreDirector);
  move.doMove(scoreDirector);
  SelectorTestUtils.assertChain(a0,a1,a3,a2,a4,a5);
  undoMove.doMove(scoreDirector);
  SelectorTestUtils.assertChain(a0,a1,a2,a3,a4,a5);
  move=new TailChainSwapMove(variableDescriptor,inverseVariableSupply,anchorVariableSupply,a5,a1);
  undoMove=move.createUndoMove(scoreDirector);
  move.doMove(scoreDirector);
  SelectorTestUtils.assertChain(a0,a1,a5,a4,a3,a2);
  undoMove.doMove(scoreDirector);
  SelectorTestUtils.assertChain(a0,a1,a2,a3,a4,a5);
  move=new TailChainSwapMove(variableDescriptor,inverseVariableSupply,anchorVariableSupply,a1,a4);
  undoMove=move.createUndoMove(scoreDirector);
  move.doMove(scoreDirector);
  SelectorTestUtils.assertChain(a0,a5,a2,a3,a4,a1);
  undoMove.doMove(scoreDirector);
  SelectorTestUtils.assertChain(a0,a1,a2,a3,a4,a5);
}
