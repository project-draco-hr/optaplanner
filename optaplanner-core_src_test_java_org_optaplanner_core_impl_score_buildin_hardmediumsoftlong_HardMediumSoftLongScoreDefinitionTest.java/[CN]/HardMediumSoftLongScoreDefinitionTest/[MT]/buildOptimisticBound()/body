{
  int scoreSize=new HardMediumSoftLongScoreDefinition().getLevelsSize();
  InitializingScoreTrendLevel[] levels=new InitializingScoreTrendLevel[scoreSize];
  for (int i=0; i < scoreSize; i++) {
    levels[i]=InitializingScoreTrendLevel.ONLY_UP;
  }
  HardMediumSoftLongScore score=HardMediumSoftLongScore.parseScore("-999hard/-999medium/-999soft");
  InitializingScoreTrend scoreTrend=new InitializingScoreTrend(levels);
  HardMediumSoftLongScoreDefinition hardMediumSoftLongScoreDefinition=new HardMediumSoftLongScoreDefinition();
  HardMediumSoftLongScore score2=hardMediumSoftLongScoreDefinition.buildOptimisticBound(scoreTrend,score);
  assertEquals(Long.MAX_VALUE,score2.getHardScore());
  assertEquals(Long.MAX_VALUE,score2.getMediumScore());
  assertEquals(Long.MAX_VALUE,score2.getSoftScore());
  for (int i=0; i < scoreSize; i++) {
    levels[i]=InitializingScoreTrendLevel.ONLY_DOWN;
  }
  score2=hardMediumSoftLongScoreDefinition.buildOptimisticBound(scoreTrend,score);
  assertEquals(-999,score2.getHardScore());
  assertEquals(-999,score2.getMediumScore());
  assertEquals(-999,score2.getSoftScore());
}
