{
  Forager forager=new FirstRandomlyAcceptedForager();
  LocalSearchSolverScope localSearchSolverScope=new LocalSearchSolverScope();
  localSearchSolverScope.setWorkingRandom(new Random(){
    public double nextDouble(){
      return 0.99;
    }
  }
);
  forager.solvingStarted(localSearchSolverScope);
  StepScope stepScope=new StepScope(localSearchSolverScope);
  forager.beforeDeciding(stepScope);
  Move a=new DummyMove();
  Move b=new DummyMove();
  Move c=new DummyMove();
  Move d=new DummyMove();
  forager.addMove(createMoveScope(stepScope,a,-100.0,0.0));
  assertFalse(forager.isQuitEarly());
  forager.addMove(createMoveScope(stepScope,b,-10.0,0.8));
  assertFalse(forager.isQuitEarly());
  forager.addMove(createMoveScope(stepScope,c,-10.0,0.0));
  assertFalse(forager.isQuitEarly());
  forager.addMove(createMoveScope(stepScope,d,-100.0,1.0));
  assertTrue(forager.isQuitEarly());
  MoveScope pickedScope=forager.pickMove(stepScope);
  Move picked=pickedScope.getMove();
  assertTrue(picked == d);
  List<Move> topList=forager.getTopList(2);
  assertTrue(topList.contains(b));
  assertTrue(topList.contains(d));
  forager.solvingEnded(localSearchSolverScope);
}
