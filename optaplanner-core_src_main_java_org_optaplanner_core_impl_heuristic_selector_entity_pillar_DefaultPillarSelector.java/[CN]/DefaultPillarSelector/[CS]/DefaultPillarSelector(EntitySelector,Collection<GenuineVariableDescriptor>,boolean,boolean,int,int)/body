{
  this.entitySelector=entitySelector;
  this.variableDescriptors=variableDescriptors;
  this.randomSelection=randomSelection;
  Class<?> entityClass=entitySelector.getEntityDescriptor().getEntityClass();
  for (  GenuineVariableDescriptor variableDescriptor : variableDescriptors) {
    if (!entityClass.equals(variableDescriptor.getEntityDescriptor().getEntityClass())) {
      throw new IllegalStateException("The selector (" + this + ") has a variableDescriptor ("+ variableDescriptor+ ") with a entityClass ("+ variableDescriptor.getEntityDescriptor().getEntityClass()+ ") which is not equal to the entitySelector's entityClass ("+ entityClass+ ").");
    }
    if (variableDescriptor.isChained()) {
      throw new IllegalStateException("The selector (" + this + ") has a variableDescriptor ("+ variableDescriptor+ ") which is chained ("+ variableDescriptor.isChained()+ ").");
    }
  }
  for (  GenuineVariableDescriptor variableDescriptor : variableDescriptors) {
    if (variableDescriptor.isChained()) {
      throw new IllegalStateException("The selector (" + this + ") cannot have a variableDescriptor ("+ variableDescriptor+ ") which is chained ("+ variableDescriptor.isChained()+ ").");
    }
  }
  if (entitySelector.isNeverEnding()) {
    throw new IllegalStateException("The selector (" + this + ") has an entitySelector ("+ entitySelector+ ") with neverEnding ("+ entitySelector.isNeverEnding()+ ").");
  }
  phaseLifecycleSupport.addEventListener(entitySelector);
  phaseLifecycleSupport.addEventListener(new SelectionCacheLifecycleBridge(CACHE_TYPE,this));
  this.subPillarEnabled=subPillarEnabled;
  this.minimumSubPillarSize=minimumSubPillarSize;
  this.maximumSubPillarSize=maximumSubPillarSize;
  if (minimumSubPillarSize < 1) {
    throw new IllegalStateException("The selector (" + this + ")'s minimumPillarSize ("+ minimumSubPillarSize+ ") must be at least 1.");
  }
  if (minimumSubPillarSize > maximumSubPillarSize) {
    throw new IllegalStateException("The minimumPillarSize (" + minimumSubPillarSize + ") must be at least maximumSubChainSize ("+ maximumSubPillarSize+ ").");
  }
  if (!randomSelection && subPillarEnabled) {
    throw new IllegalStateException("The selector (" + this + ") with randomSelection  ("+ randomSelection+ ") and subPillarEnabled ("+ subPillarEnabled+ ") does not support non random selection with sub pillars"+ " because the number of sub pillars scales exponentially.\n"+ "Either set subPillarEnabled to false or use JIT random selection.");
  }
}
