{
  if (!randomSelection) {
    if (!subPillarEnabled) {
      return cachedBasePillarList.iterator();
    }
 else {
      throw new IllegalStateException("Impossible state because the constructors fails with randomSelection (" + randomSelection + ") and subPillarEnabled ("+ subPillarEnabled+ ").");
    }
  }
 else {
    if (!subPillarEnabled) {
      return new CachedListRandomIterator<>(cachedBasePillarList,workingRandom);
    }
 else {
      return new RandomSubPillarIterator();
    }
  }
}
