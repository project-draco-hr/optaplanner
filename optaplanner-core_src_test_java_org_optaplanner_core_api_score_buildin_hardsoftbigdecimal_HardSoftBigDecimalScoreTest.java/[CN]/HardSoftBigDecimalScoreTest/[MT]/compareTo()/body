{
  PlannerAssert.assertCompareToOrder(HardSoftBigDecimalScore.valueOf(-8,new BigDecimal("0"),new BigDecimal("0")),HardSoftBigDecimalScore.valueOf(-7,new BigDecimal("-20"),new BigDecimal("-20")),HardSoftBigDecimalScore.valueOf(-7,new BigDecimal("-1"),new BigDecimal("-300")),HardSoftBigDecimalScore.valueOf(-7,new BigDecimal("0"),new BigDecimal("0")),HardSoftBigDecimalScore.valueOf(-7,new BigDecimal("0"),new BigDecimal("1")),HardSoftBigDecimalScore.valueOfInitialized(new BigDecimal("-20.06"),new BigDecimal("-20")),HardSoftBigDecimalScore.valueOfInitialized(new BigDecimal("-20.007"),new BigDecimal("-20")),HardSoftBigDecimalScore.valueOfInitialized(new BigDecimal("-20"),new BigDecimal("-20.06")),HardSoftBigDecimalScore.valueOfInitialized(new BigDecimal("-20"),new BigDecimal("-20.007")),HardSoftBigDecimalScore.valueOfInitialized(new BigDecimal("-20"),new BigDecimal("-20")),HardSoftBigDecimalScore.valueOfInitialized(new BigDecimal("-1"),new BigDecimal("-300")),HardSoftBigDecimalScore.valueOfInitialized(new BigDecimal("-1"),new BigDecimal("4000")),HardSoftBigDecimalScore.valueOfInitialized(new BigDecimal("0"),new BigDecimal("-1")),HardSoftBigDecimalScore.valueOfInitialized(new BigDecimal("0"),new BigDecimal("0")),HardSoftBigDecimalScore.valueOfInitialized(new BigDecimal("0"),new BigDecimal("1")));
}
