{
  GenuineVariableDescriptor variableDescriptor=TestdataChainedEntity.buildVariableDescriptorForChainedObject();
  SolutionDescriptor solutionDescriptor=variableDescriptor.getEntityDescriptor().getSolutionDescriptor();
  InnerScoreDirector scoreDirector=PlannerTestUtils.mockScoreDirector(solutionDescriptor);
  TestdataChainedAnchor a0=new TestdataChainedAnchor("a0");
  TestdataChainedEntity a1=new TestdataChainedEntity("a1",a0);
  TestdataChainedEntity a2=new TestdataChainedEntity("a2",a1);
  TestdataChainedEntity a3=new TestdataChainedEntity("a3",a2);
  TestdataChainedEntity a4=new TestdataChainedEntity("a4",a3);
  TestdataChainedAnchor b0=new TestdataChainedAnchor("b0");
  TestdataChainedEntity b1=new TestdataChainedEntity("b1",b0);
  TestdataChainedEntity b2=new TestdataChainedEntity("b2",b1);
  TestdataChainedEntity b3=new TestdataChainedEntity("b3",b2);
  TestdataChainedSolution solution=new TestdataChainedSolution("solution");
  solution.setChainedAnchorList(Arrays.asList(a0,b0));
  solution.setChainedEntityList(Arrays.asList(a1,a2,a3,a4,b1,b2,b3));
  scoreDirector.setWorkingSolution(solution);
  SingletonInverseVariableSupply inverseVariableSupply=scoreDirector.getSupplyManager().demand(new SingletonInverseVariableDemand(variableDescriptor));
  AnchorVariableSupply anchorVariableSupply=scoreDirector.getSupplyManager().demand(new AnchorVariableDemand(variableDescriptor));
  SelectorTestUtils.assertChain(a0,a1,a2,a3,a4);
  SelectorTestUtils.assertChain(b0,b1,b2,b3);
  KOptMove move=new KOptMove(variableDescriptor,inverseVariableSupply,anchorVariableSupply,a4,new Object[]{a1,b2});
  assertEquals(true,move.isMoveDoable(scoreDirector));
  Move undoMove=move.createUndoMove(scoreDirector);
  move.doMove(scoreDirector);
  SelectorTestUtils.assertChain(a0,a1,a4);
  SelectorTestUtils.assertChain(b0,b1,b2,a2,a3,b3);
  assertEquals(true,undoMove.isMoveDoable(scoreDirector));
  undoMove.doMove(scoreDirector);
  SelectorTestUtils.assertChain(a0,a1,a2,a3,a4);
  SelectorTestUtils.assertChain(b0,b1,b2,b3);
  move=new KOptMove(variableDescriptor,inverseVariableSupply,anchorVariableSupply,a2,new Object[]{b2,a3});
  assertEquals(true,move.isMoveDoable(scoreDirector));
  undoMove=move.createUndoMove(scoreDirector);
  move.doMove(scoreDirector);
  SelectorTestUtils.assertChain(a0,a1,a4);
  SelectorTestUtils.assertChain(b0,b1,b2,a2,a3,b3);
  assertEquals(true,undoMove.isMoveDoable(scoreDirector));
  undoMove.doMove(scoreDirector);
  SelectorTestUtils.assertChain(a0,a1,a2,a3,a4);
  SelectorTestUtils.assertChain(b0,b1,b2,b3);
  move=new KOptMove(variableDescriptor,inverseVariableSupply,anchorVariableSupply,b3,new Object[]{a3,a1});
  assertEquals(true,move.isMoveDoable(scoreDirector));
  undoMove=move.createUndoMove(scoreDirector);
  move.doMove(scoreDirector);
  SelectorTestUtils.assertChain(a0,a1,a4);
  SelectorTestUtils.assertChain(b0,b1,b2,a2,a3,b3);
  assertEquals(true,undoMove.isMoveDoable(scoreDirector));
  undoMove.doMove(scoreDirector);
  SelectorTestUtils.assertChain(a0,a1,a2,a3,a4);
  SelectorTestUtils.assertChain(b0,b1,b2,b3);
  move=new KOptMove(variableDescriptor,inverseVariableSupply,anchorVariableSupply,a2,new Object[]{a3,b2});
  assertEquals(false,move.isMoveDoable(scoreDirector));
  move=new KOptMove(variableDescriptor,inverseVariableSupply,anchorVariableSupply,a4,new Object[]{b2,a1});
  assertEquals(false,move.isMoveDoable(scoreDirector));
  move=new KOptMove(variableDescriptor,inverseVariableSupply,anchorVariableSupply,b3,new Object[]{a1,a3});
  assertEquals(false,move.isMoveDoable(scoreDirector));
}
