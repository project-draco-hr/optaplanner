{
  assertTrue(emptyFirst || emptySecond);
  MoveSelector nonEmptyChildMoveSelector=SelectorTestUtils.mockMoveSelector(DummyMove.class,new DummyMove("a1"),new DummyMove("a2"),new DummyMove("a3"));
  ArrayList<MoveSelector> childMoveSelectorList=new ArrayList<>();
  childMoveSelectorList.add(emptyFirst ? SelectorTestUtils.mockMoveSelector(DummyMove.class) : nonEmptyChildMoveSelector);
  childMoveSelectorList.add(emptySecond ? SelectorTestUtils.mockMoveSelector(DummyMove.class) : nonEmptyChildMoveSelector);
  CartesianProductMoveSelector moveSelector=new CartesianProductMoveSelector(childMoveSelectorList,ignoreEmptyChildIterators,false);
  DefaultSolverScope solverScope=mock(DefaultSolverScope.class);
  moveSelector.solvingStarted(solverScope);
  AbstractPhaseScope phaseScopeA=mock(AbstractPhaseScope.class);
  when(phaseScopeA.getSolverScope()).thenReturn(solverScope);
  moveSelector.phaseStarted(phaseScopeA);
  AbstractStepScope stepScopeA1=mock(AbstractStepScope.class);
  when(stepScopeA1.getPhaseScope()).thenReturn(phaseScopeA);
  moveSelector.stepStarted(stepScopeA1);
  if (ignoreEmptyChildIterators && !(emptyFirst && emptySecond)) {
    assertAllCodesOfMoveSelector(moveSelector,"a1","a2","a3");
  }
 else {
    assertAllCodesOfMoveSelector(moveSelector);
  }
  moveSelector.stepEnded(stepScopeA1);
  moveSelector.phaseEnded(phaseScopeA);
  moveSelector.solvingEnded(solverScope);
  verifyPhaseLifecycle(childMoveSelectorList.get(0),1,1,1);
  verifyPhaseLifecycle(childMoveSelectorList.get(1),1,1,1);
}
