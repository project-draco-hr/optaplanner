{
  ArrayList<MoveSelector> childMoveSelectorList=new ArrayList<MoveSelector>();
  childMoveSelectorList.add(SelectorTestUtils.mockMoveSelector(DummyMove.class,new DummyMove("a1"),new DummyMove("a2")));
  childMoveSelectorList.add(SelectorTestUtils.mockMoveSelector(DummyMove.class));
  childMoveSelectorList.add(SelectorTestUtils.mockMoveSelector(DummyMove.class,new DummyMove("c1"),new DummyMove("c2")));
  CartesianProductMoveSelector moveSelector=new CartesianProductMoveSelector(childMoveSelectorList,ignoreEmptyChildIterators,false);
  DefaultSolverScope solverScope=mock(DefaultSolverScope.class);
  moveSelector.solvingStarted(solverScope);
  AbstractPhaseScope phaseScopeA=mock(AbstractPhaseScope.class);
  when(phaseScopeA.getSolverScope()).thenReturn(solverScope);
  moveSelector.phaseStarted(phaseScopeA);
  AbstractStepScope stepScopeA1=mock(AbstractStepScope.class);
  when(stepScopeA1.getPhaseScope()).thenReturn(phaseScopeA);
  moveSelector.stepStarted(stepScopeA1);
  if (ignoreEmptyChildIterators) {
    assertAllCodesOfMoveSelector(moveSelector,"a1+c1","a1+c2","a2+c1","a2+c2");
  }
 else {
    assertAllCodesOfMoveSelector(moveSelector);
  }
  moveSelector.stepEnded(stepScopeA1);
  moveSelector.phaseEnded(phaseScopeA);
  moveSelector.solvingEnded(solverScope);
  verifyPhaseLifecycle(childMoveSelectorList.get(0),1,1,1);
  verifyPhaseLifecycle(childMoveSelectorList.get(1),1,1,1);
}
