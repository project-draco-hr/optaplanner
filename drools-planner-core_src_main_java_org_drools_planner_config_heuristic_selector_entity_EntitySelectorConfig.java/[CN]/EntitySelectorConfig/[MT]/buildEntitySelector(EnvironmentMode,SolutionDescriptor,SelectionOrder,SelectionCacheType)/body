{
  PlanningEntityDescriptor entityDescriptor=fetchEntityDescriptor(solutionDescriptor);
  SelectionOrder resolvedSelectionOrder=SelectionOrder.resolve(selectionOrder,inheritedSelectionOrder);
  SelectionCacheType resolvedCacheType=SelectionCacheType.resolve(cacheType,minimumCacheType);
  minimumCacheType=SelectionCacheType.max(minimumCacheType,resolvedCacheType);
  boolean randomSelection=resolvedSelectionOrder == SelectionOrder.RANDOM && entityProbabilityWeightFactoryClass == null;
  if (minimumCacheType.compareTo(SelectionCacheType.STEP) < 0) {
    minimumCacheType=SelectionCacheType.STEP;
  }
  if (minimumCacheType == SelectionCacheType.SOLVER) {
    throw new IllegalArgumentException("The minimumCacheType (" + minimumCacheType + ") is not yet supported. Please use "+ SelectionCacheType.PHASE+ " instead.");
  }
  EntitySelector entitySelector=new FromSolutionEntitySelector(entityDescriptor,randomSelection,minimumCacheType);
  if (entityFilterClass != null) {
    SelectionFilter entityFilter;
    try {
      entityFilter=entityFilterClass.newInstance();
    }
 catch (    InstantiationException e) {
      throw new IllegalArgumentException("entityFilterClass (" + entityFilterClass.getName() + ") does not have a public no-arg constructor",e);
    }
catch (    IllegalAccessException e) {
      throw new IllegalArgumentException("entityFilterClass (" + entityFilterClass.getName() + ") does not have a public no-arg constructor",e);
    }
    EntitySelector filteringEntitySelector;
    if (resolvedCacheType == SelectionCacheType.JUST_IN_TIME) {
      filteringEntitySelector=new JustInTimeFilteringEntitySelector(entitySelector,resolvedCacheType,entityFilter);
    }
 else {
      filteringEntitySelector=new CachingFilteringEntitySelector(entitySelector,resolvedCacheType,entityFilter);
    }
    entitySelector=filteringEntitySelector;
  }
  if (entityProbabilityWeightFactoryClass != null) {
    if (resolvedSelectionOrder != SelectionOrder.RANDOM) {
      throw new IllegalArgumentException("The entitySelectorConfig (" + this + ") with entityProbabilityWeightFactoryClass ("+ entityProbabilityWeightFactoryClass+ ") has a non-random resolvedSelectionOrder ("+ resolvedSelectionOrder+ ").");
    }
    SelectionProbabilityWeightFactory entityProbabilityWeightFactory;
    try {
      entityProbabilityWeightFactory=entityProbabilityWeightFactoryClass.newInstance();
    }
 catch (    InstantiationException e) {
      throw new IllegalArgumentException("entityProbabilityWeightFactoryClass (" + entityProbabilityWeightFactoryClass.getName() + ") does not have a public no-arg constructor",e);
    }
catch (    IllegalAccessException e) {
      throw new IllegalArgumentException("entityProbabilityWeightFactoryClass (" + entityProbabilityWeightFactoryClass.getName() + ") does not have a public no-arg constructor",e);
    }
    entitySelector=new ProbabilityEntitySelector(entitySelector,resolvedCacheType,entityProbabilityWeightFactory);
  }
  return entitySelector;
}
