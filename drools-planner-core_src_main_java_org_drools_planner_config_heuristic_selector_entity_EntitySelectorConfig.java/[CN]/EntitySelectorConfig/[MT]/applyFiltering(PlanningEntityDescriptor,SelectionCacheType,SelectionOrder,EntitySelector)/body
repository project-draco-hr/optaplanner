{
  if (!CollectionUtils.isEmpty(filterClassList) || entityDescriptor.hasMovableEntitySelectionFilter()) {
    List<SelectionFilter> filterList=new ArrayList<SelectionFilter>(filterClassList == null ? 1 : filterClassList.size() + 1);
    if (filterClassList != null) {
      for (      Class<? extends SelectionFilter> filterClass : filterClassList) {
        filterList.add(ConfigUtils.newInstance(this,"filterClass",filterClass));
      }
    }
    if (entityDescriptor.hasMovableEntitySelectionFilter()) {
      filterList.add(entityDescriptor.getMovableEntitySelectionFilter());
    }
    entitySelector=new FilteringEntitySelector(entitySelector,filterList);
  }
  if (entityComparatorClass != null) {
    if (resolvedSelectionOrder != SelectionOrder.ORIGINAL) {
      throw new IllegalArgumentException("The entitySelectorConfig (" + this + ") with entityComparatorClass ("+ entityComparatorClass+ ") has a resolvedSelectionOrder ("+ resolvedSelectionOrder+ ") that is not "+ SelectionOrder.ORIGINAL+ ".");
    }
    Comparator<Object> entityComparator=ConfigUtils.newInstance(this,"entityComparatorClass",entityComparatorClass);
    SelectionSorter entitySorter=new ComparatorSelectionSorter(entityComparator,SelectionSorterOrder.resolve(entitySorterOrder));
    entitySelector=new SortingEntitySelector(entitySelector,resolvedCacheType,entitySorter);
  }
  return entitySelector;
}
