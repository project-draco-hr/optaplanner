{
  PlanningEntityDescriptor entityDescriptor;
  if (planningEntityClass != null) {
    entityDescriptor=solutionDescriptor.getPlanningEntityDescriptorStrict(planningEntityClass);
    if (entityDescriptor == null) {
      throw new IllegalArgumentException("The entitySelectorConfig (" + this + ") has a planningEntityClass ("+ planningEntityClass+ ") that is not configured as a planningEntity.\n"+ "If that class ("+ planningEntityClass.getSimpleName()+ ") is not a "+ "planningEntityClass ("+ solutionDescriptor.getPlanningEntityClassSet()+ "), check your Solution implementation's annotated methods.\n"+ "If it is, check your solver configuration.");
    }
  }
 else {
    Collection<PlanningEntityDescriptor> planningEntityDescriptors=solutionDescriptor.getPlanningEntityDescriptors();
    if (planningEntityDescriptors.size() != 1) {
      throw new IllegalArgumentException("The entitySelectorConfig (" + this + ") has no configured planningEntityClass ("+ planningEntityClass+ ") and because there are multiple in the planningEntityClassSet ("+ solutionDescriptor.getPlanningEntityClassSet()+ "), it can not be deducted automatically.");
    }
    entityDescriptor=planningEntityDescriptors.iterator().next();
  }
  SelectionOrder resolvedSelectionOrder=SelectionOrder.resolveSelectionOrder(selectionOrder,inheritedResolvedSelectionOrder);
  boolean randomSelection=resolvedSelectionOrder == SelectionOrder.RANDOM && entityProbabilityWeightFactoryClass == null;
  SelectionCacheType resolvedCacheType=cacheType == null ? SelectionCacheType.STEP : cacheType;
  EntitySelector entitySelector=new FromSolutionEntitySelector(entityDescriptor,randomSelection,resolvedCacheType);
  if (entityProbabilityWeightFactoryClass != null) {
    if (resolvedSelectionOrder != SelectionOrder.RANDOM) {
      throw new IllegalArgumentException("The entitySelectorConfig (" + this + ") with entityProbabilityWeightFactoryClass ("+ entityProbabilityWeightFactoryClass+ ") has a non-random resolvedSelectionOrder ("+ resolvedSelectionOrder+ ").");
    }
    SelectionProbabilityWeightFactory entityProbabilityWeightFactory;
    try {
      entityProbabilityWeightFactory=entityProbabilityWeightFactoryClass.newInstance();
    }
 catch (    InstantiationException e) {
      throw new IllegalArgumentException("entityProbabilityWeightFactoryClass (" + entityProbabilityWeightFactoryClass.getName() + ") does not have a public no-arg constructor",e);
    }
catch (    IllegalAccessException e) {
      throw new IllegalArgumentException("entityProbabilityWeightFactoryClass (" + entityProbabilityWeightFactoryClass.getName() + ") does not have a public no-arg constructor",e);
    }
    ProbabilityEntitySelector probabilityEntitySelector=new ProbabilityEntitySelector(resolvedCacheType,entityProbabilityWeightFactory);
    probabilityEntitySelector.setChildEntitySelector(entitySelector);
    entitySelector=probabilityEntitySelector;
  }
  return entitySelector;
}
