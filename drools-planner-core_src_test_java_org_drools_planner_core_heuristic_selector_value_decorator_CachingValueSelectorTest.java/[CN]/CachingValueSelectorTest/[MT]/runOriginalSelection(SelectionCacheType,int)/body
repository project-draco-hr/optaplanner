{
  ValueSelector childValueSelector=SelectorTestUtils.mockValueSelector(TestdataEntity.class,"value",new TestdataValue("e1"),new TestdataValue("e2"),new TestdataValue("e3"));
  CachingValueSelector valueSelector=new CachingValueSelector(childValueSelector,cacheType,false);
  verify(childValueSelector,times(1)).isNeverEnding();
  DefaultSolverScope solverScope=mock(DefaultSolverScope.class);
  valueSelector.solvingStarted(solverScope);
  AbstractSolverPhaseScope phaseScopeA=mock(AbstractSolverPhaseScope.class);
  when(phaseScopeA.getSolverScope()).thenReturn(solverScope);
  valueSelector.phaseStarted(phaseScopeA);
  AbstractStepScope stepScopeA1=mock(AbstractStepScope.class);
  when(stepScopeA1.getSolverPhaseScope()).thenReturn(phaseScopeA);
  valueSelector.stepStarted(stepScopeA1);
  runAsserts(valueSelector);
  valueSelector.stepEnded(stepScopeA1);
  AbstractStepScope stepScopeA2=mock(AbstractStepScope.class);
  when(stepScopeA2.getSolverPhaseScope()).thenReturn(phaseScopeA);
  valueSelector.stepStarted(stepScopeA2);
  runAsserts(valueSelector);
  valueSelector.stepEnded(stepScopeA2);
  valueSelector.phaseEnded(phaseScopeA);
  AbstractSolverPhaseScope phaseScopeB=mock(AbstractSolverPhaseScope.class);
  when(phaseScopeB.getSolverScope()).thenReturn(solverScope);
  valueSelector.phaseStarted(phaseScopeB);
  AbstractStepScope stepScopeB1=mock(AbstractStepScope.class);
  when(stepScopeB1.getSolverPhaseScope()).thenReturn(phaseScopeB);
  valueSelector.stepStarted(stepScopeB1);
  runAsserts(valueSelector);
  valueSelector.stepEnded(stepScopeB1);
  AbstractStepScope stepScopeB2=mock(AbstractStepScope.class);
  when(stepScopeB2.getSolverPhaseScope()).thenReturn(phaseScopeB);
  valueSelector.stepStarted(stepScopeB2);
  runAsserts(valueSelector);
  valueSelector.stepEnded(stepScopeB2);
  AbstractStepScope stepScopeB3=mock(AbstractStepScope.class);
  when(stepScopeB3.getSolverPhaseScope()).thenReturn(phaseScopeB);
  valueSelector.stepStarted(stepScopeB3);
  runAsserts(valueSelector);
  valueSelector.stepEnded(stepScopeB3);
  valueSelector.phaseEnded(phaseScopeB);
  valueSelector.solvingEnded(solverScope);
  verifySolverPhaseLifecycle(childValueSelector,1,2,5);
  verify(childValueSelector,times(timesCalled)).iterator();
  verify(childValueSelector,times(timesCalled)).getSize();
}
