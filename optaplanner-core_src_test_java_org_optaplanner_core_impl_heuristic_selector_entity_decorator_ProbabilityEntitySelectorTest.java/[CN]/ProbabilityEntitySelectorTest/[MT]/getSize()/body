{
  EntitySelector childEntitySelector=SelectorTestUtils.mockEntitySelector(TestdataEntity.class,new TestdataEntity("e1"),new TestdataEntity("e2"),new TestdataEntity("e3"),new TestdataEntity("e4"));
  SelectionProbabilityWeightFactory<TestdataEntity> probabilityWeightFactory=new SelectionProbabilityWeightFactory<TestdataEntity>(){
    public double createProbabilityWeight(    ScoreDirector scoreDirector,    TestdataEntity entity){
      if (entity.getCode().equals("e1")) {
        return 1000.0;
      }
 else       if (entity.getCode().equals("e2")) {
        return 200.0;
      }
 else       if (entity.getCode().equals("e3")) {
        return 30.0;
      }
 else       if (entity.getCode().equals("e4")) {
        return 4.0;
      }
 else {
        throw new IllegalStateException("Unknown entity (" + entity + ").");
      }
    }
  }
;
  ProbabilityEntitySelector entitySelector=new ProbabilityEntitySelector(childEntitySelector,SelectionCacheType.STEP,probabilityWeightFactory);
  entitySelector.constructCache(mock(DefaultSolverScope.class));
  assertEquals(4,entitySelector.getSize());
}
