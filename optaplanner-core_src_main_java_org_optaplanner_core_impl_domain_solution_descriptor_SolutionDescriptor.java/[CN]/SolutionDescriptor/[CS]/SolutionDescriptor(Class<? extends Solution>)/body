{
  this.solutionClass=solutionClass;
  try {
    solutionBeanInfo=Introspector.getBeanInfo(solutionClass);
  }
 catch (  IntrospectionException e) {
    throw new IllegalStateException("The solutionClass (" + solutionClass + ") is not a valid java bean.",e);
  }
  int mapSize=solutionBeanInfo.getPropertyDescriptors().length;
  propertyAccessorMap=new LinkedHashMap<String,PropertyAccessor>(mapSize);
  entityPropertyAccessorMap=new LinkedHashMap<String,PropertyAccessor>(mapSize);
  entityCollectionPropertyAccessorMap=new LinkedHashMap<String,PropertyAccessor>(mapSize);
  entityDescriptorMap=new LinkedHashMap<Class<?>,EntityDescriptor>(mapSize);
  reversedEntityClassList=new ArrayList<Class<?>>(mapSize);
  lowestEntityDescriptorCache=new HashMap<Class<?>,EntityDescriptor>(mapSize);
}
