{
  String memberName=memberAccessor.getName();
  if (entityPropertyAccessorMap.containsKey(memberName) || entityCollectionPropertyAccessorMap.containsKey(memberName)) {
    MemberAccessor duplicate=entityPropertyAccessorMap.get(memberName);
    if (duplicate == null) {
      duplicate=entityCollectionPropertyAccessorMap.get(memberName);
    }
    throw new IllegalStateException("The solutionClass (" + solutionClass + ") has a "+ entityPropertyAnnotationClass.getSimpleName()+ " annotated member ("+ memberAccessor+ ") that is duplicated by another member ("+ duplicate+ ").\n"+ "  Verify that the annotation is not defined on both the field and its getter.");
  }
  if (entityPropertyAnnotationClass.equals(PlanningEntityProperty.class)) {
    entityPropertyAccessorMap.put(memberName,memberAccessor);
  }
 else   if (entityPropertyAnnotationClass.equals(PlanningEntityCollectionProperty.class)) {
    if (!Collection.class.isAssignableFrom(memberAccessor.getType())) {
      throw new IllegalStateException("The solutionClass (" + solutionClass + ") has a "+ PlanningEntityCollectionProperty.class.getSimpleName()+ " annotated member ("+ memberName+ ") that does not return a "+ Collection.class.getSimpleName()+ ".");
    }
    entityCollectionPropertyAccessorMap.put(memberName,memberAccessor);
  }
}
