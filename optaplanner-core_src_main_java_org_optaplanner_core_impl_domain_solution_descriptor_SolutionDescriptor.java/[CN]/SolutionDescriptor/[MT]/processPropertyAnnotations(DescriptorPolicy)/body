{
  boolean noPlanningEntityPropertyAnnotation=true;
  for (  PropertyDescriptor propertyDescriptor : solutionBeanInfo.getPropertyDescriptors()) {
    if (propertyDescriptor.getReadMethod() != null) {
      PropertyAccessor propertyAccessor=new ReflectionPropertyAccessor(propertyDescriptor);
      if (propertyAccessor.isAnnotationPresent(PlanningEntityProperty.class)) {
        noPlanningEntityPropertyAnnotation=false;
        entityPropertyAccessorMap.put(propertyAccessor.getName(),propertyAccessor);
      }
 else       if (propertyAccessor.isAnnotationPresent(PlanningEntityCollectionProperty.class)) {
        noPlanningEntityPropertyAnnotation=false;
        if (!Collection.class.isAssignableFrom(propertyAccessor.getType())) {
          throw new IllegalStateException("The solutionClass (" + solutionClass + ") has a PlanningEntityCollection annotated property ("+ propertyAccessor.getName()+ ") that does not return a Collection.");
        }
        entityCollectionPropertyAccessorMap.put(propertyAccessor.getName(),propertyAccessor);
      }
    }
  }
  if (noPlanningEntityPropertyAnnotation) {
    throw new IllegalStateException("The solutionClass (" + solutionClass + ") should have at least 1 getter with a PlanningEntityCollection or PlanningEntityProperty"+ " annotation.");
  }
}
