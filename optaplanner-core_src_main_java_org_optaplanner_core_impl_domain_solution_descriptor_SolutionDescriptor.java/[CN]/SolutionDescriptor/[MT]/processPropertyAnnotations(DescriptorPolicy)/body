{
  boolean noEntityPropertyAnnotation=true;
  for (  Method method : solutionClass.getMethods()) {
    boolean entityPropertyAnnotated=method.isAnnotationPresent(PlanningEntityProperty.class);
    boolean entityCollectionPropertyAnnotated=method.isAnnotationPresent(PlanningEntityCollectionProperty.class);
    if (entityPropertyAnnotated && entityCollectionPropertyAnnotated) {
      throw new IllegalStateException("The solutionClass (" + solutionClass + ") has a method ("+ method+ ") that has both a "+ PlanningEntityProperty.class.getSimpleName()+ " annotation and a "+ PlanningEntityCollectionProperty.class.getSimpleName()+ " annotation.");
    }
    if (entityPropertyAnnotated || entityCollectionPropertyAnnotated) {
      noEntityPropertyAnnotation=false;
      if (!ReflectionHelper.isGetterMethod(method)) {
        throw new IllegalStateException("The solutionClass (" + solutionClass + ")'s method ("+ method+ ") with a "+ PlanningEntityProperty.class.getSimpleName()+ " or "+ PlanningEntityCollectionProperty.class.getSimpleName()+ " annotation must be a valid getter method.\n"+ "  That annotation can only be used on a JavaBeans getter method or on a field.");
      }
      MemberAccessor memberAccessor=new BeanPropertyMemberAccessor(method);
      if (entityPropertyAnnotated) {
        entityPropertyAccessorMap.put(memberAccessor.getName(),memberAccessor);
      }
 else       if (entityCollectionPropertyAnnotated) {
        noEntityPropertyAnnotation=false;
        if (!Collection.class.isAssignableFrom(memberAccessor.getType())) {
          throw new IllegalStateException("The solutionClass (" + solutionClass + ") has a "+ PlanningEntityCollectionProperty.class.getSimpleName()+ " annotated property ("+ memberAccessor.getName()+ ") that does not return a "+ Collection.class.getSimpleName()+ ".");
        }
        entityCollectionPropertyAccessorMap.put(memberAccessor.getName(),memberAccessor);
      }
    }
  }
  if (noEntityPropertyAnnotation) {
    throw new IllegalStateException("The solutionClass (" + solutionClass + ") should have at least 1 getter with a PlanningEntityCollection or PlanningEntityProperty"+ " annotation.");
  }
}
