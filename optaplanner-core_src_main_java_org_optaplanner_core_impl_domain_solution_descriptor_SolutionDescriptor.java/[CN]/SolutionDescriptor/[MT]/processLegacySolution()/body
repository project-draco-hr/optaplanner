{
  boolean hasFactAnnotation=!(this.factCollectionPropertyAccessorMap.isEmpty() && this.factPropertyAccessorMap.isEmpty());
  if (hasFactAnnotation) {
    throw new IllegalStateException("The solutionClass (" + solutionClass + ") must not have any ProblemFactProperty or ProblemFactCollectionProperty annotations when "+ "implementing the legacy Solution interface.");
  }
 else {
    try {
      Method getProblemFactsMethod=solutionClass.getMethod("getProblemFacts");
      registerFactPropertyAccessor(ProblemFactCollectionProperty.class,new MethodMemberAccessor(getProblemFactsMethod));
    }
 catch (    NoSuchMethodException e) {
      throw new IllegalStateException("Impossible thing just happened. Implementation of Solution " + "interface does not implement all of its methods.");
    }
  }
  boolean hasScoreAnnotation=this.scoreAccessor != null;
  if (hasScoreAnnotation) {
    throw new IllegalStateException("The solutionClass (" + solutionClass + ") must not have any PlanningScore annotation when implementing the legacy Solution interface.");
  }
 else {
    try {
      Method getScoreMethod=solutionClass.getMethod("getScore");
      registerScoreAccessor(new BeanPropertyMemberAccessor(getScoreMethod));
    }
 catch (    NoSuchMethodException e) {
      throw new IllegalStateException("Impossible thing just happened. Implementation of Solution " + "interface does not implement all of its methods.");
    }
  }
}
