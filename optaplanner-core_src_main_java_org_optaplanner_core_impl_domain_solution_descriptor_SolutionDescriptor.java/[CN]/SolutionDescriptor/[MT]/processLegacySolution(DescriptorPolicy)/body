{
  if (!problemFactMemberAccessorMap.isEmpty()) {
    MemberAccessor memberAccessor=problemFactMemberAccessorMap.values().iterator().next();
    throw new IllegalStateException("The solutionClass (" + solutionClass + ") which implements the legacy interface "+ Solution.class.getSimpleName()+ ") must not have a member ("+ memberAccessor.getName()+ ") with a "+ ProblemFactProperty.class.getSimpleName()+ " annotation.\n"+ "Maybe remove the use of the legacy interface.");
  }
  if (!problemFactCollectionMemberAccessorMap.isEmpty()) {
    MemberAccessor memberAccessor=problemFactCollectionMemberAccessorMap.values().iterator().next();
    throw new IllegalStateException("The solutionClass (" + solutionClass + ") which implements the legacy interface "+ Solution.class.getSimpleName()+ ") must not have a member ("+ memberAccessor.getName()+ ") with a "+ ProblemFactCollectionProperty.class.getSimpleName()+ " annotation.\n"+ "Maybe remove the use of the legacy interface.");
  }
  try {
    Method getProblemFactsMethod=solutionClass.getMethod("getProblemFacts");
    registerProblemFactPropertyAccessor(ProblemFactCollectionProperty.class,new MethodMemberAccessor(getProblemFactsMethod));
  }
 catch (  NoSuchMethodException e) {
    throw new IllegalStateException("Impossible situation: the solutionClass (" + solutionClass + ") which implements the legacy interface "+ Solution.class.getSimpleName()+ ", lacks its getProblemFacts() method.",e);
  }
  if (scoreMemberAccessor != null) {
    throw new IllegalStateException("The solutionClass (" + solutionClass + ") which implements the legacy interface "+ Solution.class.getSimpleName()+ ") must not have a member ("+ scoreMemberAccessor.getName()+ ") with a "+ PlanningScore.class.getSimpleName()+ " annotation.\n"+ "Maybe remove the use of the legacy interface.");
  }
  try {
    Method getScoreMethod=solutionClass.getMethod("getScore");
    scoreMemberAccessor=new BeanPropertyMemberAccessor(getScoreMethod);
  }
 catch (  NoSuchMethodException e) {
    throw new IllegalStateException("Impossible situation: the solutionClass (" + solutionClass + ") which implements the legacy interface "+ Solution.class.getSimpleName()+ ", lacks its getScore() method.",e);
  }
}
