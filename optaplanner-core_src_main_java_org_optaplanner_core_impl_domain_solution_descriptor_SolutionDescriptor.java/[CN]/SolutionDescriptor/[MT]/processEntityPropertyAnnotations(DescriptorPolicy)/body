{
  boolean noEntityPropertyAnnotation=true;
  List<Field> fieldList=Arrays.asList(solutionClass.getDeclaredFields());
  Collections.sort(fieldList,new AlphabeticMemberComparator());
  for (  Field field : fieldList) {
    Class<? extends Annotation> entityPropertyAnnotationClass=extractEntityPropertyAnnotationClass(field);
    if (entityPropertyAnnotationClass != null) {
      noEntityPropertyAnnotation=false;
      MemberAccessor memberAccessor=new FieldMemberAccessor(field);
      registerEntityPropertyAccessor(entityPropertyAnnotationClass,memberAccessor);
    }
  }
  List<Method> methodList=Arrays.asList(solutionClass.getDeclaredMethods());
  Collections.sort(methodList,new AlphabeticMemberComparator());
  for (  Method method : methodList) {
    Class<? extends Annotation> entityPropertyAnnotationClass=extractEntityPropertyAnnotationClass(method);
    if (entityPropertyAnnotationClass != null) {
      noEntityPropertyAnnotation=false;
      ReflectionHelper.assertGetterMethod(method,entityPropertyAnnotationClass);
      MemberAccessor memberAccessor=new BeanPropertyMemberAccessor(method);
      registerEntityPropertyAccessor(entityPropertyAnnotationClass,memberAccessor);
    }
  }
  if (noEntityPropertyAnnotation) {
    throw new IllegalStateException("The solutionClass (" + solutionClass + ") should have at least 1 getter with a PlanningEntityCollectionProperty or PlanningEntityProperty"+ " annotation.");
  }
}
