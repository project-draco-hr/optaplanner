{
  boolean noEntityPropertyAnnotation=true;
  List<Field> fieldList=Arrays.asList(solutionClass.getDeclaredFields());
  Collections.sort(fieldList,new AlphabeticMemberComparator());
  for (  Field field : fieldList) {
    boolean entityPropertyAnnotated=field.isAnnotationPresent(PlanningEntityProperty.class);
    boolean entityCollectionPropertyAnnotated=field.isAnnotationPresent(PlanningEntityCollectionProperty.class);
    if (entityPropertyAnnotated || entityCollectionPropertyAnnotated) {
      noEntityPropertyAnnotation=false;
      MemberAccessor memberAccessor=new FieldMemberAccessor(field);
      registerEntityPropertyAccessor(entityPropertyAnnotated,entityCollectionPropertyAnnotated,memberAccessor);
    }
  }
  List<Method> methodList=Arrays.asList(solutionClass.getDeclaredMethods());
  Collections.sort(methodList,new AlphabeticMemberComparator());
  for (  Method method : methodList) {
    boolean entityPropertyAnnotated=method.isAnnotationPresent(PlanningEntityProperty.class);
    boolean entityCollectionPropertyAnnotated=method.isAnnotationPresent(PlanningEntityCollectionProperty.class);
    if (entityPropertyAnnotated || entityCollectionPropertyAnnotated) {
      noEntityPropertyAnnotation=false;
      ReflectionHelper.assertGetterMethod(method,entityPropertyAnnotated ? PlanningEntityProperty.class : PlanningEntityCollectionProperty.class);
      MemberAccessor memberAccessor=new BeanPropertyMemberAccessor(method);
      registerEntityPropertyAccessor(entityPropertyAnnotated,entityCollectionPropertyAnnotated,memberAccessor);
    }
  }
  if (noEntityPropertyAnnotation) {
    throw new IllegalStateException("The solutionClass (" + solutionClass + ") should have at least 1 getter with a PlanningEntityCollection or PlanningEntityProperty"+ " annotation.");
  }
}
