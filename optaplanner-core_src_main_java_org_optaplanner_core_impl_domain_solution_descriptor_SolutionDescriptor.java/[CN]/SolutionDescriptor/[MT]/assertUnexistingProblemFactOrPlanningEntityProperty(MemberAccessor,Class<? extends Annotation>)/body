{
  MemberAccessor duplicate;
  Class<? extends Annotation> otherAnnotationClass;
  String memberName=memberAccessor.getName();
  if (problemFactMemberAccessorMap.containsKey(memberName)) {
    duplicate=problemFactMemberAccessorMap.get(memberName);
    otherAnnotationClass=ProblemFactProperty.class;
  }
 else   if (problemFactCollectionMemberAccessorMap.containsKey(memberName)) {
    duplicate=problemFactCollectionMemberAccessorMap.get(memberName);
    otherAnnotationClass=ProblemFactCollectionProperty.class;
  }
 else   if (entityMemberAccessorMap.containsKey(memberName)) {
    duplicate=entityMemberAccessorMap.get(memberName);
    otherAnnotationClass=PlanningEntityProperty.class;
  }
 else   if (entityCollectionMemberAccessorMap.containsKey(memberName)) {
    duplicate=entityCollectionMemberAccessorMap.get(memberName);
    otherAnnotationClass=PlanningEntityCollectionProperty.class;
  }
 else {
    return;
  }
  throw new IllegalStateException("The solutionClass (" + solutionClass + ") has a "+ annotationClass.getSimpleName()+ " annotated member ("+ memberAccessor+ ") that is duplicated by a "+ otherAnnotationClass.getSimpleName()+ " annotated member ("+ duplicate+ ").\n"+ (annotationClass.equals(otherAnnotationClass) ? "Maybe the annotation is defined on both the field and its getter." : "Maybe 2 mutually exclusive annotations are configured."));
}
