{
  List<Termination> terminationList=new ArrayList<Termination>();
  if (terminationClass != null) {
    Termination termination=ConfigUtils.newInstance(this,"terminationClass",terminationClass);
    terminationList.add(termination);
  }
  Long timeMillisSpentLimit=calculateTimeMillisSpentLimit();
  if (timeMillisSpentLimit != null) {
    terminationList.add(new TimeMillisSpentTermination(timeMillisSpentLimit));
  }
  Long unimprovedTimeMillisSpentLimit=calculateUnimprovedTimeMillisSpentLimit();
  if (unimprovedTimeMillisSpentLimit != null) {
    terminationList.add(new UnimprovedTimeMillisSpentTermination(unimprovedTimeMillisSpentLimit));
  }
  if (bestScoreLimit != null) {
    Score bestScoreLimit_=configPolicy.getScoreDefinition().parseScore(bestScoreLimit);
    terminationList.add(new BestScoreTermination(bestScoreLimit_));
  }
  if (stepCountLimit != null) {
    terminationList.add(new StepCountTermination(stepCountLimit));
  }
  if (unimprovedStepCountLimit != null) {
    terminationList.add(new UnimprovedStepCountTermination(unimprovedStepCountLimit));
  }
  if (bestScoreFeasible != null) {
    Class scoreDefinitionClass=configPolicy.getScoreDefinition().getClass();
    if (!FeasibilityScoreDefinition.class.isAssignableFrom(scoreDefinitionClass)) {
      throw new IllegalStateException("BestScoreFeasible termination is not compatible with supplied score definition class." + " Expected (" + FeasibilityScoreDefinition.class.getName() + "), was ("+ scoreDefinitionClass.getName()+ ").");
    }
    if (bestScoreFeasible) {
      terminationList.add(new BestScoreFeasibleTermination());
    }
  }
  if (!ConfigUtils.isEmptyCollection(terminationConfigList)) {
    for (    TerminationConfig terminationConfig : terminationConfigList) {
      Termination termination=terminationConfig.buildTermination(configPolicy);
      if (termination != null) {
        terminationList.add(termination);
      }
    }
  }
  if (terminationList.size() == 1) {
    return terminationList.get(0);
  }
 else   if (terminationList.size() > 1) {
    AbstractCompositeTermination compositeTermination;
    if (terminationCompositionStyle == null || terminationCompositionStyle == TerminationCompositionStyle.OR) {
      compositeTermination=new OrCompositeTermination(terminationList);
    }
 else     if (terminationCompositionStyle == TerminationCompositionStyle.AND) {
      compositeTermination=new AndCompositeTermination(terminationList);
    }
 else {
      throw new IllegalStateException("The terminationCompositionStyle (" + terminationCompositionStyle + ") is not implemented.");
    }
    return compositeTermination;
  }
 else {
    return null;
  }
}
