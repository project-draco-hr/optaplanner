{
  List<Termination> terminationList=new ArrayList<>();
  if (terminationClass != null) {
    Termination termination=ConfigUtils.newInstance(this,"terminationClass",terminationClass);
    terminationList.add(termination);
  }
  Long timeMillisSpentLimit=calculateTimeMillisSpentLimit();
  if (timeMillisSpentLimit != null) {
    terminationList.add(new TimeMillisSpentTermination(timeMillisSpentLimit));
  }
  Long unimprovedTimeMillisSpentLimit=calculateUnimprovedTimeMillisSpentLimit();
  if (unimprovedTimeMillisSpentLimit != null) {
    terminationList.add(new UnimprovedTimeMillisSpentTermination(unimprovedTimeMillisSpentLimit));
  }
  if (bestScoreLimit != null) {
    Score bestScoreLimit_=configPolicy.getScoreDefinition().parseScore(bestScoreLimit);
    ScoreDefinition scoreDefinition=configPolicy.getScoreDefinition();
    double[] timeGradientWeightNumbers=new double[scoreDefinition.getLevelsSize() - 1];
    for (int i=0; i < timeGradientWeightNumbers.length; i++) {
      timeGradientWeightNumbers[i]=0.50;
    }
    terminationList.add(new BestScoreTermination(scoreDefinition,bestScoreLimit_,timeGradientWeightNumbers));
  }
  if (bestScoreFeasible != null) {
    ScoreDefinition scoreDefinition=configPolicy.getScoreDefinition();
    if (!(scoreDefinition instanceof FeasibilityScoreDefinition)) {
      throw new IllegalStateException("The termination bestScoreFeasible (" + bestScoreFeasible + ") is not compatible with a scoreDefinitionClass ("+ scoreDefinition.getClass()+ ") which does not implement the interface "+ FeasibilityScoreDefinition.class.getSimpleName()+ ".");
    }
    if (!bestScoreFeasible) {
      throw new IllegalArgumentException("The termination bestScoreFeasible (" + bestScoreFeasible + ") cannot be false.");
    }
    FeasibilityScoreDefinition feasibilityScoreDefinition=(FeasibilityScoreDefinition)scoreDefinition;
    double[] timeGradientWeightFeasibleNumbers=new double[feasibilityScoreDefinition.getFeasibleLevelsSize() - 1];
    for (int i=0; i < timeGradientWeightFeasibleNumbers.length; i++) {
      timeGradientWeightFeasibleNumbers[i]=0.50;
    }
    terminationList.add(new BestScoreFeasibleTermination(feasibilityScoreDefinition,timeGradientWeightFeasibleNumbers));
  }
  if (stepCountLimit != null) {
    terminationList.add(new StepCountTermination(stepCountLimit));
  }
  if (calculateCountLimit != null) {
    logger.info("Deprecated use of calculateCountLimit ({}) in solver configuration.",calculateCountLimit);
    if (scoreCalculationCountLimit != null) {
      throw new IllegalStateException("The calculateCountLimit (" + calculateCountLimit + ") and scoreCalculationCountLimit ("+ scoreCalculationCountLimit+ ") cannot be used together.");
    }
    terminationList.add(new ScoreCalculationCountTermination(calculateCountLimit));
  }
  if (scoreCalculationCountLimit != null) {
    terminationList.add(new ScoreCalculationCountTermination(scoreCalculationCountLimit));
  }
  if (unimprovedStepCountLimit != null) {
    terminationList.add(new UnimprovedStepCountTermination(unimprovedStepCountLimit));
  }
  if (!ConfigUtils.isEmptyCollection(terminationConfigList)) {
    for (    TerminationConfig terminationConfig : terminationConfigList) {
      Termination termination=terminationConfig.buildTermination(configPolicy);
      if (termination != null) {
        terminationList.add(termination);
      }
    }
  }
  if (terminationList.size() == 1) {
    return terminationList.get(0);
  }
 else   if (terminationList.size() > 1) {
    AbstractCompositeTermination compositeTermination;
    if (terminationCompositionStyle == null || terminationCompositionStyle == TerminationCompositionStyle.OR) {
      compositeTermination=new OrCompositeTermination(terminationList);
    }
 else     if (terminationCompositionStyle == TerminationCompositionStyle.AND) {
      compositeTermination=new AndCompositeTermination(terminationList);
    }
 else {
      throw new IllegalStateException("The terminationCompositionStyle (" + terminationCompositionStyle + ") is not implemented.");
    }
    return compositeTermination;
  }
 else {
    return null;
  }
}
