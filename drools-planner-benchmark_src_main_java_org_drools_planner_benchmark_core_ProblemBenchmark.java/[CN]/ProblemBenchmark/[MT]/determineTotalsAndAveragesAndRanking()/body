{
  failureCount=0;
  long totalUsedMemoryAfterInputSolution=0L;
  int usedMemoryAfterInputSolutionCount=0;
  List<SingleBenchmark> successSingleBenchmarkList=new ArrayList<SingleBenchmark>(singleBenchmarkList);
  for (Iterator<SingleBenchmark> it=successSingleBenchmarkList.iterator(); it.hasNext(); ) {
    SingleBenchmark singleBenchmark=it.next();
    if (singleBenchmark.isFailure()) {
      failureCount++;
      it.remove();
    }
 else {
      if (singleBenchmark.getUsedMemoryAfterInputSolution() != null) {
        totalUsedMemoryAfterInputSolution+=singleBenchmark.getUsedMemoryAfterInputSolution();
        usedMemoryAfterInputSolutionCount++;
      }
    }
  }
  if (usedMemoryAfterInputSolutionCount > 0) {
    averageUsedMemoryAfterInputSolution=totalUsedMemoryAfterInputSolution / (long)usedMemoryAfterInputSolutionCount;
  }
  determineRanking(successSingleBenchmarkList);
}
