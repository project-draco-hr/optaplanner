{
  EntityIndependentValueSelector childValueSelector=SelectorTestUtils.mockEntityIndependentValueSelector(TestdataValue.class,"value",new TestdataValue("v1"),new TestdataValue("v2"),new TestdataValue("v3"));
  EntityIndependentValueSelector valueSelector=new SelectedCountLimitValueSelector(childValueSelector,5L);
  DefaultSolverScope solverScope=mock(DefaultSolverScope.class);
  valueSelector.solvingStarted(solverScope);
  AbstractSolverPhaseScope phaseScopeA=mock(AbstractSolverPhaseScope.class);
  when(phaseScopeA.getSolverScope()).thenReturn(solverScope);
  valueSelector.phaseStarted(phaseScopeA);
  AbstractStepScope stepScopeA1=mock(AbstractStepScope.class);
  when(stepScopeA1.getPhaseScope()).thenReturn(phaseScopeA);
  valueSelector.stepStarted(stepScopeA1);
  assertAllCodesOfValueSelector(valueSelector,"v1","v2","v3");
  valueSelector.stepEnded(stepScopeA1);
  AbstractStepScope stepScopeA2=mock(AbstractStepScope.class);
  when(stepScopeA2.getPhaseScope()).thenReturn(phaseScopeA);
  valueSelector.stepStarted(stepScopeA2);
  assertAllCodesOfValueSelector(valueSelector,"v1","v2","v3");
  valueSelector.stepEnded(stepScopeA2);
  valueSelector.phaseEnded(phaseScopeA);
  AbstractSolverPhaseScope phaseScopeB=mock(AbstractSolverPhaseScope.class);
  when(phaseScopeB.getSolverScope()).thenReturn(solverScope);
  valueSelector.phaseStarted(phaseScopeB);
  AbstractStepScope stepScopeB1=mock(AbstractStepScope.class);
  when(stepScopeB1.getPhaseScope()).thenReturn(phaseScopeB);
  valueSelector.stepStarted(stepScopeB1);
  assertAllCodesOfValueSelector(valueSelector,"v1","v2","v3");
  valueSelector.stepEnded(stepScopeB1);
  AbstractStepScope stepScopeB2=mock(AbstractStepScope.class);
  when(stepScopeB2.getPhaseScope()).thenReturn(phaseScopeB);
  valueSelector.stepStarted(stepScopeB2);
  assertAllCodesOfValueSelector(valueSelector,"v1","v2","v3");
  valueSelector.stepEnded(stepScopeB2);
  AbstractStepScope stepScopeB3=mock(AbstractStepScope.class);
  when(stepScopeB3.getPhaseScope()).thenReturn(phaseScopeB);
  valueSelector.stepStarted(stepScopeB3);
  assertAllCodesOfValueSelector(valueSelector,"v1","v2","v3");
  valueSelector.stepEnded(stepScopeB3);
  valueSelector.phaseEnded(phaseScopeB);
  valueSelector.solvingEnded(solverScope);
  verifySolverPhaseLifecycle(childValueSelector,1,2,5);
  verify(childValueSelector,times(5)).iterator();
  verify(childValueSelector,times(5)).getSize();
}
