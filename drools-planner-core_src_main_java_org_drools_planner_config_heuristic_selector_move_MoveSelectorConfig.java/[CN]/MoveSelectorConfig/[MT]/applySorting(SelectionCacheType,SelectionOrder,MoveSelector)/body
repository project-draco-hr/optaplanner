{
  if (sorterComparatorClass != null && sorterWeightFactoryClass != null) {
    throw new IllegalArgumentException("The moveSelectorConfig (" + this + ") has both an sorterComparatorClass ("+ sorterComparatorClass+ ") and a sorterWeightFactoryClass ("+ sorterWeightFactoryClass+ ").");
  }
  if (sorterComparatorClass != null && sorterClass != null) {
    throw new IllegalArgumentException("The moveSelectorConfig (" + this + ") has both an sorterComparatorClass ("+ sorterComparatorClass+ ") and a sorterClass ("+ sorterClass+ ").");
  }
  if (sorterWeightFactoryClass != null && sorterClass != null) {
    throw new IllegalArgumentException("The moveSelectorConfig (" + this + ") has both an sorterWeightFactoryClass ("+ sorterWeightFactoryClass+ ") and a sorterClass ("+ sorterClass+ ").");
  }
  if (sorterComparatorClass != null || sorterWeightFactoryClass != null || sorterClass != null) {
    SelectionSorter sorter=null;
    if (sorterComparatorClass != null) {
      if (resolvedSelectionOrder != SelectionOrder.ORIGINAL) {
        throw new IllegalArgumentException("The moveSelectorConfig (" + this + ") with sorterComparatorClass ("+ sorterComparatorClass+ ") has a resolvedSelectionOrder ("+ resolvedSelectionOrder+ ") that is not "+ SelectionOrder.ORIGINAL+ ".");
      }
      Comparator<Object> sorterComparator=ConfigUtils.newInstance(this,"sorterComparatorClass",sorterComparatorClass);
      sorter=new ComparatorSelectionSorter(sorterComparator,SelectionSorterOrder.resolve(sorterOrder));
    }
    if (sorterWeightFactoryClass != null) {
      if (resolvedSelectionOrder != SelectionOrder.ORIGINAL) {
        throw new IllegalArgumentException("The moveSelectorConfig (" + this + ") with sorterWeightFactoryClass ("+ sorterWeightFactoryClass+ ") has a resolvedSelectionOrder ("+ resolvedSelectionOrder+ ") that is not "+ SelectionOrder.ORIGINAL+ ".");
      }
      SelectionSorterWeightFactory sorterWeightFactory=ConfigUtils.newInstance(this,"sorterWeightFactoryClass",sorterWeightFactoryClass);
      sorter=new WeightFactorySelectionSorter(sorterWeightFactory,SelectionSorterOrder.resolve(sorterOrder));
    }
    if (sorterClass != null) {
      if (sorterOrder != null) {
        throw new IllegalArgumentException("The moveSelectorConfig (" + this + ") has both an sorterClass ("+ sorterClass+ ") but the sorterOrder ("+ sorterOrder+ ") should be null.");
      }
      if (resolvedSelectionOrder != SelectionOrder.ORIGINAL) {
        throw new IllegalArgumentException("The moveSelectorConfig (" + this + ") with sorterClass ("+ sorterClass+ ") has a resolvedSelectionOrder ("+ resolvedSelectionOrder+ ") that is not "+ SelectionOrder.ORIGINAL+ ".");
      }
      sorter=ConfigUtils.newInstance(this,"sorterClass",sorterClass);
    }
    moveSelector=new SortingMoveSelector(moveSelector,resolvedCacheType,sorter);
  }
 else {
    if (sorterOrder != null) {
      if (sorterOrder != null) {
        throw new IllegalArgumentException("The moveSelectorConfig (" + this + ") has a sorterOrder ("+ sorterOrder+ "), but no sorterComparatorClass ("+ sorterComparatorClass+ ") or sorterWeightFactoryClass ("+ sorterWeightFactoryClass+ ").");
      }
    }
  }
  return moveSelector;
}
