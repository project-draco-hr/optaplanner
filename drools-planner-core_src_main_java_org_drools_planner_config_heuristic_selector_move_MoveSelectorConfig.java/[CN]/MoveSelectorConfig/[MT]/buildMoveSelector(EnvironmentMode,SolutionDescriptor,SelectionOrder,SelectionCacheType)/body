{
  SelectionOrder resolvedSelectionOrder=SelectionOrder.resolve(selectionOrder,inheritedSelectionOrder);
  SelectionCacheType resolvedCacheType=SelectionCacheType.resolve(cacheType,inheritedCacheType);
  boolean shuffledOrProbability;
  if (resolvedSelectionOrder != SelectionOrder.RANDOM) {
    shuffledOrProbability=false;
  }
 else {
    if (resolvedCacheType.isCached()) {
      shuffledOrProbability=true;
      resolvedSelectionOrder=SelectionOrder.ORIGINAL;
    }
 else {
      shuffledOrProbability=false;
    }
  }
  MoveSelector moveSelector=buildBaseMoveSelector(environmentMode,solutionDescriptor,resolvedSelectionOrder,resolvedCacheType);
  if (moveFilterClass != null) {
    SelectionFilter moveFilter;
    try {
      moveFilter=moveFilterClass.newInstance();
    }
 catch (    InstantiationException e) {
      throw new IllegalArgumentException("moveFilterClass (" + moveFilterClass.getName() + ") does not have a public no-arg constructor",e);
    }
catch (    IllegalAccessException e) {
      throw new IllegalArgumentException("moveFilterClass (" + moveFilterClass.getName() + ") does not have a public no-arg constructor",e);
    }
    MoveSelector filteringMoveSelector;
    if (resolvedCacheType == SelectionCacheType.JUST_IN_TIME) {
      filteringMoveSelector=new JustInTimeFilteringMoveSelector(moveSelector,resolvedCacheType,moveFilter);
    }
 else {
      filteringMoveSelector=new CachingFilteringMoveSelector(moveSelector,resolvedCacheType,moveFilter);
    }
    moveSelector=filteringMoveSelector;
  }
  if (moveProbabilityWeightFactoryClass != null) {
    if (resolvedSelectionOrder != SelectionOrder.RANDOM) {
      throw new IllegalArgumentException("The entitySelectorConfig (" + this + ") with moveProbabilityWeightFactoryClass ("+ moveProbabilityWeightFactoryClass+ ") has a non-random resolvedSelectionOrder ("+ resolvedSelectionOrder+ ").");
    }
    SelectionProbabilityWeightFactory entityProbabilityWeightFactory;
    try {
      entityProbabilityWeightFactory=moveProbabilityWeightFactoryClass.newInstance();
    }
 catch (    InstantiationException e) {
      throw new IllegalArgumentException("moveProbabilityWeightFactoryClass (" + moveProbabilityWeightFactoryClass.getName() + ") does not have a public no-arg constructor",e);
    }
catch (    IllegalAccessException e) {
      throw new IllegalArgumentException("moveProbabilityWeightFactoryClass (" + moveProbabilityWeightFactoryClass.getName() + ") does not have a public no-arg constructor",e);
    }
    moveSelector=new ProbabilityMoveSelector(moveSelector,resolvedCacheType,entityProbabilityWeightFactory);
  }
 else   if (shuffledOrProbability) {
    moveSelector=new ShufflingMoveSelector(moveSelector,resolvedCacheType);
  }
  return moveSelector;
}
