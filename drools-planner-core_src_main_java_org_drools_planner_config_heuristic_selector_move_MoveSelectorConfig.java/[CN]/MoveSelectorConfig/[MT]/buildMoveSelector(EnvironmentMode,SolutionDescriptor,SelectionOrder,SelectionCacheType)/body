{
  SelectionOrder resolvedSelectionOrder=SelectionOrder.resolve(selectionOrder,inheritedSelectionOrder);
  SelectionCacheType resolvedCacheType=SelectionCacheType.resolve(cacheType,minimumCacheType);
  minimumCacheType=SelectionCacheType.max(minimumCacheType,resolvedCacheType);
  MoveSelector moveSelector=buildBaseMoveSelector(environmentMode,solutionDescriptor,resolvedCacheType.isCached() ? SelectionOrder.ORIGINAL : resolvedSelectionOrder,minimumCacheType);
  boolean alreadyCached=false;
  if (moveFilterClass != null) {
    SelectionFilter moveFilter=ConfigUtils.newInstance(this,"moveFilterClass",moveFilterClass);
    MoveSelector filteringMoveSelector;
    if (resolvedCacheType == SelectionCacheType.JUST_IN_TIME) {
      filteringMoveSelector=new JustInTimeFilteringMoveSelector(moveSelector,resolvedCacheType,moveFilter);
    }
 else {
      filteringMoveSelector=new CachingFilteringMoveSelector(moveSelector,resolvedCacheType,moveFilter);
      alreadyCached=true;
    }
    moveSelector=filteringMoveSelector;
  }
  if (moveProbabilityWeightFactoryClass != null) {
    if (resolvedSelectionOrder != SelectionOrder.RANDOM) {
      throw new IllegalArgumentException("The entitySelectorConfig (" + this + ") with moveProbabilityWeightFactoryClass ("+ moveProbabilityWeightFactoryClass+ ") has a non-random resolvedSelectionOrder ("+ resolvedSelectionOrder+ ").");
    }
    SelectionProbabilityWeightFactory entityProbabilityWeightFactory=ConfigUtils.newInstance(this,"moveProbabilityWeightFactoryClass",moveProbabilityWeightFactoryClass);
    moveSelector=new ProbabilityMoveSelector(moveSelector,resolvedCacheType,entityProbabilityWeightFactory);
    alreadyCached=true;
  }
  if (resolvedCacheType.isCached() && !alreadyCached) {
    if (resolvedSelectionOrder != SelectionOrder.RANDOM) {
      moveSelector=new CachingMoveSelector(moveSelector,resolvedCacheType);
    }
 else {
      moveSelector=new ShufflingMoveSelector(moveSelector,resolvedCacheType);
    }
  }
  return moveSelector;
}
