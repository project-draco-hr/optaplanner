{
  SelectionCacheType resolvedCacheType=SelectionCacheType.resolve(cacheType,minimumCacheType);
  minimumCacheType=SelectionCacheType.max(minimumCacheType,resolvedCacheType);
  SelectionOrder resolvedSelectionOrder=SelectionOrder.resolve(selectionOrder,inheritedSelectionOrder);
  MoveSelector moveSelector=buildBaseMoveSelector(environmentMode,solutionDescriptor,minimumCacheType,resolvedCacheType.isCached() ? SelectionOrder.ORIGINAL : resolvedSelectionOrder);
  if (!CollectionUtils.isEmpty(moveFilterClassList)) {
    List<SelectionFilter> moveFilterList=new ArrayList<SelectionFilter>(moveFilterClassList.size());
    for (    Class<? extends SelectionFilter> moveFilterClass : moveFilterClassList) {
      moveFilterList.add(ConfigUtils.newInstance(this,"moveFilterClass",moveFilterClass));
    }
    moveSelector=new FilteringMoveSelector(moveSelector,moveFilterList);
  }
  if (moveProbabilityWeightFactoryClass != null) {
    if (resolvedSelectionOrder != SelectionOrder.RANDOM) {
      throw new IllegalArgumentException("The moveSelectorConfig (" + this + ") with moveProbabilityWeightFactoryClass ("+ moveProbabilityWeightFactoryClass+ ") has a resolvedSelectionOrder ("+ resolvedSelectionOrder+ ") that is not "+ SelectionOrder.RANDOM+ ".");
    }
    SelectionProbabilityWeightFactory entityProbabilityWeightFactory=ConfigUtils.newInstance(this,"moveProbabilityWeightFactoryClass",moveProbabilityWeightFactoryClass);
    moveSelector=new ProbabilityMoveSelector(moveSelector,resolvedCacheType,entityProbabilityWeightFactory);
  }
  if (resolvedSelectionOrder == SelectionOrder.SHUFFLED) {
    if (resolvedCacheType.isNotCached()) {
      throw new IllegalArgumentException("The moveSelectorConfig (" + this + ") with resolvedSelectionOrder ("+ resolvedSelectionOrder+ ") has a resolvedCacheType ("+ resolvedCacheType+ ") that is not cached.");
    }
    moveSelector=new ShufflingMoveSelector(moveSelector,resolvedCacheType);
  }
  if (resolvedCacheType.isCached() && resolvedCacheType.compareTo(moveSelector.getCacheType()) > 0) {
    moveSelector=new CachingMoveSelector(moveSelector,resolvedCacheType,resolvedSelectionOrder == SelectionOrder.RANDOM);
  }
  return moveSelector;
}
