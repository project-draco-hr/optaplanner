{
  validate();
  generateSolverBenchmarkConfigNames();
  inherit();
  PlannerBenchmarkResult plannerBenchmarkResult=new PlannerBenchmarkResult();
  plannerBenchmarkResult.setName(name);
  plannerBenchmarkResult.setAggregation(false);
  PlannerBenchmarkRunner plannerBenchmarkRunner=new PlannerBenchmarkRunner(plannerBenchmarkResult);
  plannerBenchmarkRunner.setBenchmarkDirectory(benchmarkDirectory);
  plannerBenchmarkResult.setParallelBenchmarkCount(resolveParallelBenchmarkCount());
  plannerBenchmarkResult.setWarmUpTimeMillisSpend(calculateWarmUpTimeMillisSpendTotal());
  BenchmarkReportConfig benchmarkReportConfig_=benchmarkReportConfig == null ? new BenchmarkReportConfig() : benchmarkReportConfig;
  plannerBenchmarkRunner.setBenchmarkReport(benchmarkReportConfig_.buildBenchmarkReport(plannerBenchmarkResult));
  List<SolverBenchmarkResult> solverBenchmarkResultList=new ArrayList<SolverBenchmarkResult>(solverBenchmarkConfigList.size());
  List<ProblemBenchmarkResult> unifiedProblemBenchmarkResultList=new ArrayList<ProblemBenchmarkResult>();
  plannerBenchmarkResult.setUnifiedProblemBenchmarkResultList(unifiedProblemBenchmarkResultList);
  for (  SolverBenchmarkConfig solverBenchmarkConfig : solverBenchmarkConfigList) {
    SolverBenchmarkResult solverBenchmarkResult=solverBenchmarkConfig.buildSolverBenchmark(plannerBenchmarkResult);
    solverBenchmarkResultList.add(solverBenchmarkResult);
  }
  plannerBenchmarkResult.setSolverBenchmarkResultList(solverBenchmarkResultList);
  return plannerBenchmarkRunner;
}
