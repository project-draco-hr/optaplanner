{
  NurseRoster nurseRoster=(NurseRoster)solution;
  List<Employee> employeeList=nurseRoster.getEmployeeList();
  List<Assignment> assignmentList=nurseRoster.getAssignmentList();
  Map<Employee,List<AssignmentSequence>> employeeToAssignmentSequenceListMap=new HashMap<Employee,List<AssignmentSequence>>(employeeList.size());
  int assignmentSequenceCapacity=nurseRoster.getShiftDateList().size() + 1 / 2;
  for (  Employee employee : employeeList) {
    employeeToAssignmentSequenceListMap.put(employee,new ArrayList<AssignmentSequence>(assignmentSequenceCapacity));
  }
  for (  Assignment assignment : assignmentList) {
    Employee employee=assignment.getEmployee();
    List<AssignmentSequence> assignmentSequenceList=employeeToAssignmentSequenceListMap.get(employee);
    if (assignmentSequenceList.isEmpty()) {
      AssignmentSequence assignmentSequence=new AssignmentSequence(employee,assignment);
      assignmentSequenceList.add(assignmentSequence);
    }
 else {
      AssignmentSequence lastAssignmentSequence=assignmentSequenceList.get(assignmentSequenceList.size() - 1);
      if (lastAssignmentSequence.belongsHere(assignment)) {
        lastAssignmentSequence.add(assignment);
      }
 else {
        AssignmentSequence assignmentSequence=new AssignmentSequence(employee,assignment);
        assignmentSequenceList.add(assignmentSequence);
      }
    }
  }
  List<Move> moveList=new ArrayList<Move>();
  for (ListIterator<Employee> leftEmployeeIt=employeeList.listIterator(); leftEmployeeIt.hasNext(); ) {
    Employee leftEmployee=leftEmployeeIt.next();
    List<AssignmentSequence> leftAssignmentSequenceList=employeeToAssignmentSequenceListMap.get(leftEmployee);
    for (ListIterator<Employee> rightEmployeeIt=employeeList.listIterator(leftEmployeeIt.nextIndex()); rightEmployeeIt.hasNext(); ) {
      Employee rightEmployee=rightEmployeeIt.next();
      List<AssignmentSequence> rightAssignmentSequenceList=employeeToAssignmentSequenceListMap.get(rightEmployee);
      LowestDayIndexAssignmentSequenceIterator lowestIt=new LowestDayIndexAssignmentSequenceIterator(leftAssignmentSequenceList,rightAssignmentSequenceList);
      while (lowestIt.hasNext()) {
        AssignmentSequence pillarPartAssignmentSequence=lowestIt.next();
        List<Move> moveListByPillarPartDuo=new ArrayList<Move>(leftAssignmentSequenceList.size() + rightAssignmentSequenceList.size());
        int lastDayIndex=pillarPartAssignmentSequence.getLastDayIndex();
        Employee otherEmployee;
        int leftMinimumFirstDayIndex=Integer.MIN_VALUE;
        int rightMinimumFirstDayIndex=Integer.MIN_VALUE;
        if (lowestIt.isLastNextWasLeft()) {
          otherEmployee=rightEmployee;
          leftMinimumFirstDayIndex=lastDayIndex;
        }
 else {
          otherEmployee=leftEmployee;
          rightMinimumFirstDayIndex=lastDayIndex;
        }
        moveListByPillarPartDuo.add(new EmployeeMultipleChangeMove(pillarPartAssignmentSequence.getEmployee(),pillarPartAssignmentSequence.getAssignmentList(),otherEmployee));
        while (lowestIt.hasNextWithMaximumFirstDayIndexes(leftMinimumFirstDayIndex,rightMinimumFirstDayIndex)) {
          pillarPartAssignmentSequence=lowestIt.next();
          lastDayIndex=pillarPartAssignmentSequence.getLastDayIndex();
          if (lowestIt.isLastNextWasLeft()) {
            otherEmployee=rightEmployee;
            leftMinimumFirstDayIndex=Math.max(leftMinimumFirstDayIndex,lastDayIndex);
          }
 else {
            otherEmployee=leftEmployee;
            rightMinimumFirstDayIndex=Math.max(rightMinimumFirstDayIndex,lastDayIndex);
          }
          moveListByPillarPartDuo.add(new EmployeeMultipleChangeMove(pillarPartAssignmentSequence.getEmployee(),pillarPartAssignmentSequence.getAssignmentList(),otherEmployee));
        }
        moveList.add(new CompositeMove(moveListByPillarPartDuo));
      }
    }
  }
  return moveList;
}
