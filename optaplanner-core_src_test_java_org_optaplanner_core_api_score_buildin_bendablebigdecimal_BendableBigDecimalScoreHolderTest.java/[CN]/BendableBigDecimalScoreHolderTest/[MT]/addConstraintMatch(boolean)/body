{
  BendableBigDecimalScoreHolder scoreHolder=new BendableBigDecimalScoreHolder(constraintMatchEnabled,1,2);
  scoreHolder.addHardConstraintMatch(mockRuleContext("scoreRule1"),0,BigDecimal.valueOf(-10000));
  RuleContext ruleContext2=mockRuleContext("scoreRule2");
  scoreHolder.addHardConstraintMatch(ruleContext2,0,BigDecimal.valueOf(-2000));
  callUnMatch(ruleContext2);
  RuleContext ruleContext3=mockRuleContext("scoreRule3");
  scoreHolder.addSoftConstraintMatch(ruleContext3,0,BigDecimal.valueOf(-90));
  scoreHolder.addSoftConstraintMatch(ruleContext3,0,BigDecimal.valueOf(-40));
  scoreHolder.addHardConstraintMatch(ruleContext3,0,BigDecimal.valueOf(-900));
  scoreHolder.addHardConstraintMatch(ruleContext3,0,BigDecimal.valueOf(-300));
  scoreHolder.addSoftConstraintMatch(mockRuleContext("scoreRule4"),1,BigDecimal.valueOf(-5));
  RuleContext ruleContext5=mockRuleContext("scoreRule5");
  scoreHolder.addHardConstraintMatch(ruleContext5,0,BigDecimal.valueOf(-900));
  scoreHolder.addSoftConstraintMatch(ruleContext5,0,BigDecimal.valueOf(-9));
  callUnMatch(ruleContext5);
  assertEquals(BendableBigDecimalScore.valueOf(new BigDecimal[]{BigDecimal.valueOf(-10300)},new BigDecimal[]{BigDecimal.valueOf(-40),BigDecimal.valueOf(-5)}),scoreHolder.extractScore());
  if (constraintMatchEnabled) {
    assertEquals(7,scoreHolder.getConstraintMatchTotals().size());
  }
}
