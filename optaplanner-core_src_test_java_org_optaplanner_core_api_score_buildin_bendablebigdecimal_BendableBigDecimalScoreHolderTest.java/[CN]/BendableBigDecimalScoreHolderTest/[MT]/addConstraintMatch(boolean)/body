{
  BendableBigDecimalScoreHolder scoreHolder=new BendableBigDecimalScoreHolder(constraintMatchEnabled,1,2);
  scoreHolder.addHardConstraintMatch(createRuleContext("scoreRule1"),0,BigDecimal.valueOf(-1000));
  RuleContext ruleContext2=createRuleContext("scoreRule2");
  scoreHolder.addHardConstraintMatch(ruleContext2,0,BigDecimal.valueOf(-200));
  callUnMatch(ruleContext2);
  RuleContext ruleContext3=createRuleContext("scoreRule3");
  scoreHolder.addSoftConstraintMatch(ruleContext3,0,BigDecimal.valueOf(-30));
  scoreHolder.addSoftConstraintMatch(ruleContext3,0,BigDecimal.valueOf(-3));
  scoreHolder.addHardConstraintMatch(ruleContext3,0,BigDecimal.valueOf(-300));
  scoreHolder.addHardConstraintMatch(ruleContext3,0,BigDecimal.valueOf(-400));
  scoreHolder.addSoftConstraintMatch(createRuleContext("scoreRule4"),1,BigDecimal.valueOf(-4));
  RuleContext ruleContext5=createRuleContext("scoreRule5");
  scoreHolder.addHardConstraintMatch(ruleContext5,0,BigDecimal.valueOf(-1));
  scoreHolder.addSoftConstraintMatch(ruleContext5,0,BigDecimal.valueOf(-1));
  callUnMatch(ruleContext5,1);
  assertEquals(BendableBigDecimalScore.valueOf(new BigDecimal[]{BigDecimal.valueOf(-1401)},new BigDecimal[]{BigDecimal.valueOf(-3),BigDecimal.valueOf(-4)}),scoreHolder.extractScore());
  if (constraintMatchEnabled) {
    assertEquals(7,scoreHolder.getConstraintMatchTotals().size());
  }
}
