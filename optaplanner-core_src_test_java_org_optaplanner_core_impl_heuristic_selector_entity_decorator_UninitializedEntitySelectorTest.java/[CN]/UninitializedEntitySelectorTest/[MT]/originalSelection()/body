{
  PlanningEntityDescriptor entityDescriptor=TestdataEntity.buildEntityDescriptor();
  TestdataValue v1=new TestdataValue("v1");
  TestdataValue v2=new TestdataValue("v2");
  TestdataEntity e1=new TestdataEntity("e1");
  TestdataEntity e2=new TestdataEntity("e2");
  TestdataEntity e3=new TestdataEntity("e3",v1);
  TestdataEntity e4=new TestdataEntity("e4");
  EntitySelector childEntitySelector=SelectorTestUtils.mockEntitySelector(entityDescriptor,e1,e2,e3,e4);
  EntitySelector entitySelector=new UninitializedEntitySelector(childEntitySelector,entityDescriptor.getVariableDescriptor("value"));
  DefaultSolverScope solverScope=mock(DefaultSolverScope.class);
  entitySelector.solvingStarted(solverScope);
  AbstractSolverPhaseScope phaseScopeA=mock(AbstractSolverPhaseScope.class);
  when(phaseScopeA.getSolverScope()).thenReturn(solverScope);
  entitySelector.phaseStarted(phaseScopeA);
  AbstractStepScope stepScopeA1=mock(AbstractStepScope.class);
  when(stepScopeA1.getPhaseScope()).thenReturn(phaseScopeA);
  entitySelector.stepStarted(stepScopeA1);
  runAsserts(entitySelector,"e1","e2","e4");
  e1.setValue(v2);
  entitySelector.stepEnded(stepScopeA1);
  AbstractStepScope stepScopeA2=mock(AbstractStepScope.class);
  when(stepScopeA2.getPhaseScope()).thenReturn(phaseScopeA);
  entitySelector.stepStarted(stepScopeA2);
  runAsserts(entitySelector,"e2","e4");
  e3.setValue(null);
  entitySelector.stepEnded(stepScopeA2);
  entitySelector.phaseEnded(phaseScopeA);
  AbstractSolverPhaseScope phaseScopeB=mock(AbstractSolverPhaseScope.class);
  when(phaseScopeB.getSolverScope()).thenReturn(solverScope);
  entitySelector.phaseStarted(phaseScopeB);
  AbstractStepScope stepScopeB1=mock(AbstractStepScope.class);
  when(stepScopeB1.getPhaseScope()).thenReturn(phaseScopeB);
  entitySelector.stepStarted(stepScopeB1);
  runAsserts(entitySelector,"e2","e3","e4");
  e4.setValue(v1);
  entitySelector.stepEnded(stepScopeB1);
  AbstractStepScope stepScopeB2=mock(AbstractStepScope.class);
  when(stepScopeB2.getPhaseScope()).thenReturn(phaseScopeB);
  entitySelector.stepStarted(stepScopeB2);
  runAsserts(entitySelector,"e2","e3");
  entitySelector.stepEnded(stepScopeB2);
  entitySelector.phaseEnded(phaseScopeB);
  entitySelector.solvingEnded(solverScope);
  verifySolverPhaseLifecycle(childEntitySelector,1,2,4);
  verify(childEntitySelector,times(4)).iterator();
}
