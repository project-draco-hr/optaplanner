{
  String[] scoreTokens=scoreString.split("/");
  if (scoreTokens.length != levelSuffixes.length) {
    throw new IllegalArgumentException("The scoreString (" + scoreString + ") for the scoreClass ("+ scoreClass.getSimpleName()+ ") doesn't follow the correct pattern ("+ buildScorePattern(false,levelSuffixes)+ "):"+ " the scoreTokens length ("+ scoreTokens.length+ ") differs from the levelSuffixes length ("+ levelSuffixes.length+ ").");
  }
  String[] levelStrings=new String[levelSuffixes.length];
  for (int i=0; i < levelSuffixes.length; i++) {
    if (!scoreTokens[i].endsWith(levelSuffixes[i])) {
      throw new IllegalArgumentException("The scoreString (" + scoreString + ") for the scoreClass ("+ scoreClass.getSimpleName()+ ") doesn't follow the correct pattern ("+ buildScorePattern(false,levelSuffixes)+ "):"+ " the scoreToken ("+ scoreTokens[i]+ ") does not end with levelSuffix ("+ levelSuffixes[i]+ ").");
    }
    levelStrings[i]=scoreTokens[i].substring(0,scoreTokens[i].length() - levelSuffixes[i].length());
  }
  return levelStrings;
}
