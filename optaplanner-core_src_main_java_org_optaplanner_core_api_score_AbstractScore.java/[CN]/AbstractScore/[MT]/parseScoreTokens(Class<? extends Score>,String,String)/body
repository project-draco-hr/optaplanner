{
  String[] scoreTokens=new String[levelSuffixes.length + 1];
  String[] suffixedScoreTokens=scoreString.split("/");
  int startIndex;
  if (suffixedScoreTokens.length == levelSuffixes.length + 1) {
    String suffixedScoreToken=suffixedScoreTokens[0];
    if (!suffixedScoreToken.endsWith(INIT_LABEL)) {
      throw new IllegalArgumentException("The scoreString (" + scoreString + ") for the scoreClass ("+ scoreClass.getSimpleName()+ ") doesn't follow the correct pattern ("+ buildScorePattern(false,levelSuffixes)+ "):"+ " the suffixedScoreToken ("+ suffixedScoreToken+ ") does not end with levelSuffix ("+ INIT_LABEL+ ").");
    }
    scoreTokens[0]=suffixedScoreToken.substring(0,suffixedScoreToken.length() - INIT_LABEL.length());
    startIndex=1;
  }
 else   if (suffixedScoreTokens.length == levelSuffixes.length) {
    scoreTokens[0]="0";
    startIndex=0;
  }
 else {
    throw new IllegalArgumentException("The scoreString (" + scoreString + ") for the scoreClass ("+ scoreClass.getSimpleName()+ ") doesn't follow the correct pattern ("+ buildScorePattern(false,levelSuffixes)+ "):"+ " the suffixedScoreTokens length ("+ suffixedScoreTokens.length+ ") differs from the levelSuffixes length ("+ levelSuffixes.length+ " or "+ (levelSuffixes.length + 1)+ ").");
  }
  for (int i=0; i < levelSuffixes.length; i++) {
    String suffixedScoreToken=suffixedScoreTokens[startIndex + i];
    String levelSuffix=levelSuffixes[i];
    if (!suffixedScoreToken.endsWith(levelSuffix)) {
      throw new IllegalArgumentException("The scoreString (" + scoreString + ") for the scoreClass ("+ scoreClass.getSimpleName()+ ") doesn't follow the correct pattern ("+ buildScorePattern(false,levelSuffixes)+ "):"+ " the suffixedScoreToken ("+ suffixedScoreToken+ ") does not end with levelSuffix ("+ levelSuffix+ ").");
    }
    scoreTokens[1 + i]=suffixedScoreToken.substring(0,suffixedScoreToken.length() - levelSuffix.length());
  }
  return scoreTokens;
}
