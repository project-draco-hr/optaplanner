{
  Map<String,ScoreDetail> scoreDetailMap=new HashMap<String,ScoreDetail>();
  WorkingMemory workingMemory=localSearchSolverScope.getWorkingMemory();
  if (workingMemory == null) {
    return Collections.emptyList();
  }
  Iterator<ConstraintOccurrence> it=(Iterator<ConstraintOccurrence>)workingMemory.iterateObjects(new ClassObjectFilter(ConstraintOccurrence.class));
  while (it.hasNext()) {
    ConstraintOccurrence occurrence=it.next();
    ScoreDetail scoreDetail=scoreDetailMap.get(occurrence.getRuleId());
    if (scoreDetail == null) {
      scoreDetail=new ScoreDetail(occurrence.getRuleId(),occurrence.getConstraintType());
      scoreDetailMap.put(occurrence.getRuleId(),scoreDetail);
    }
    double occurenceScore;
    if (occurrence instanceof IntConstraintOccurrence) {
      occurenceScore=((IntConstraintOccurrence)occurrence).getWeight();
    }
 else     if (occurrence instanceof DoubleConstraintOccurrence) {
      occurenceScore=((DoubleConstraintOccurrence)occurrence).getWeight();
    }
 else     if (occurrence instanceof UnweightedConstraintOccurrence) {
      occurenceScore=1.0;
    }
 else {
      throw new IllegalStateException("Cannot determine occurrenceScore of ConstraintOccurrence class: " + occurrence.getClass());
    }
    scoreDetail.addOccurenceScore(occurenceScore);
  }
  List<ScoreDetail> scoreDetailList=new ArrayList<ScoreDetail>(scoreDetailMap.values());
  Collections.sort(scoreDetailList);
  return scoreDetailList;
}
