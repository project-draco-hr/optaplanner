{
  LocalSearchSolverPhaseScope localSearchSolverPhaseScope=moveScope.getLocalSearchStepScope().getLocalSearchSolverPhaseScope();
  Score lastStepScore=localSearchSolverPhaseScope.getLastCompletedLocalSearchStepScope().getScore();
  Score moveScore=moveScope.getScore();
  if (moveScore.compareTo(lastStepScore) >= 0) {
    return 1.0;
  }
  Score scoreDifference=lastStepScore.subtract(moveScore);
  double acceptChance=1.0;
  double[] scoreDifferenceParts=scoreDifference.toDoubleArray();
  for (int i=0; i < partsLength; i++) {
    double scoreDifferencePart=scoreDifferenceParts[i];
    double temperaturePart=temperatureParts[i];
    double acceptChancePart;
    if (scoreDifferencePart <= 0.0) {
      acceptChancePart=1.0;
    }
 else {
      acceptChancePart=Math.exp(-scoreDifferencePart / temperaturePart);
    }
    acceptChance*=acceptChancePart;
  }
  if (moveScope.getWorkingRandom().nextDouble() < acceptChance) {
    return 1.0;
  }
 else {
    return 0.0;
  }
}
