{
  if (solutionClass == null) {
    throw new IllegalArgumentException("Configure a <solutionClass> in the solver configuration.");
  }
  BeanInfo solutionBeanInfo;
  try {
    solutionBeanInfo=Introspector.getBeanInfo(solutionClass);
  }
 catch (  IntrospectionException e) {
    throw new IllegalStateException("The solutionClass (" + solutionClass + ") is not a valid java bean.",e);
  }
  boolean noPlanningEntityCollectionAnnotation=true;
  for (  PropertyDescriptor entityCollectionDescriptor : solutionBeanInfo.getPropertyDescriptors()) {
    PlanningEntityCollection planningEntityCollectionAnnotation=entityCollectionDescriptor.getReadMethod().getAnnotation(PlanningEntityCollection.class);
    if (planningEntityCollectionAnnotation != null) {
      noPlanningEntityCollectionAnnotation=false;
      if (!Collection.class.isAssignableFrom(entityCollectionDescriptor.getPropertyType())) {
        throw new IllegalStateException("The solutionClass (" + solutionClass + ") has a PlanningEntityCollection annotated property ("+ entityCollectionDescriptor.getName()+ ") that does not return a Collection.");
      }
      System.out.println("Here we go: " + entityCollectionDescriptor.getName());
    }
  }
  if (noPlanningEntityCollectionAnnotation) {
    throw new IllegalStateException("The solutionClass (" + solutionClass + ") should have at least 1 getter with a PlanningEntityCollection annotation.");
  }
  if (planningEntityClassSet == null) {
    throw new IllegalArgumentException("Configure at least 1 <planningEntityClass> in the solver configuration.");
  }
  for (  Class<?> planningEntityClass : planningEntityClassSet) {
    PlanningEntity planningEntityAnnotation=planningEntityClass.getAnnotation(PlanningEntity.class);
    if (planningEntityAnnotation == null) {
      throw new IllegalStateException("The planningEntityClass (" + planningEntityClass + ") has been specified as a planning entity in the configuration,"+ " but does not have a PlanningEntity annotation.");
    }
    BeanInfo entityBeanInfo;
    try {
      entityBeanInfo=Introspector.getBeanInfo(planningEntityClass);
    }
 catch (    IntrospectionException e) {
      throw new IllegalStateException("The planningEntityClass (" + planningEntityClass + ") is not a valid java bean.",e);
    }
    boolean noPlanningVariableAnnotation=true;
    for (    PropertyDescriptor variableDescriptor : entityBeanInfo.getPropertyDescriptors()) {
      PlanningVariable planningVariableAnnotation=variableDescriptor.getReadMethod().getAnnotation(PlanningVariable.class);
      if (planningVariableAnnotation != null) {
        noPlanningVariableAnnotation=false;
        if (variableDescriptor.getWriteMethod() == null) {
          throw new IllegalStateException("The planningEntityClass (" + planningEntityClass + ") has a PlanningVariable annotated property ("+ variableDescriptor.getName()+ ") that should have a setter.");
        }
        System.out.println("yaay " + variableDescriptor.getName());
        ValueRangeFromSolutionProperty valueRangeFromSolutionPropertyAnnotation=variableDescriptor.getReadMethod().getAnnotation(ValueRangeFromSolutionProperty.class);
        if (valueRangeFromSolutionPropertyAnnotation == null) {
          throw new IllegalArgumentException("The planningEntityClass (" + planningEntityClass + ") has a PlanningVariable annotated property ("+ variableDescriptor.getName()+ ") that has no ValueRangeFromSolutionProperty annotation.");
        }
        String solutionPropertyName=valueRangeFromSolutionPropertyAnnotation.propertyName();
        PropertyDescriptor solutionPropertyDescriptor=findSolutionPropertyDescriptor(solutionBeanInfo,solutionPropertyName);
        if (solutionPropertyDescriptor == null) {
          throw new IllegalArgumentException("The planningEntityClass (" + planningEntityClass + ") has a PlanningVariable annotated property ("+ variableDescriptor.getName()+ ") that refers to a solutionClass ("+ solutionClass+ ") solutionProperty ("+ solutionPropertyName+ ") that does not exist.");
        }
        if (!Collection.class.isAssignableFrom(solutionPropertyDescriptor.getPropertyType())) {
          throw new IllegalArgumentException("The planningEntityClass (" + planningEntityClass + ") has a PlanningVariable annotated property ("+ variableDescriptor.getName()+ ") that refers to a solutionClass ("+ solutionClass+ ") solutionProperty ("+ solutionPropertyName+ ") that does not return a Collection.");
        }
        System.out.println("yes, solutionPropertyDescriptor " + solutionPropertyDescriptor.getName());
      }
    }
    if (noPlanningVariableAnnotation) {
      throw new IllegalStateException("The planningEntityClass (" + planningEntityClass + ") should have at least 1 getter with a PlanningVariable annotation.");
    }
  }
}
