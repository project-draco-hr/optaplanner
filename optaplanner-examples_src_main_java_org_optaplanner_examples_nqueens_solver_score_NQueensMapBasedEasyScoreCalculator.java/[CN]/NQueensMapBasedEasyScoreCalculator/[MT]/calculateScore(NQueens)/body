{
  int n=nQueens.getN();
  List<Queen> queenList=nQueens.getQueenList();
  Map<Integer,Integer> rowIndexCountMap=new HashMap<Integer,Integer>(n);
  Map<Integer,Integer> ascendingDiagonalIndexCountMap=new HashMap<Integer,Integer>(n);
  Map<Integer,Integer> descendingDiagonalIndexCountMap=new HashMap<Integer,Integer>(n);
  int score=0;
  for (  Queen queen : queenList) {
    if (queen.getRow() != null) {
      int rowIndex=queen.getRowIndex();
      Integer rowIndexCount=rowIndexCountMap.get(rowIndex);
      if (rowIndexCount != null) {
        score-=rowIndexCount;
        rowIndexCount++;
      }
 else {
        rowIndexCount=1;
      }
      rowIndexCountMap.put(rowIndex,rowIndexCount);
      int ascendingDiagonalIndex=queen.getAscendingDiagonalIndex();
      Integer ascendingDiagonalIndexCount=ascendingDiagonalIndexCountMap.get(ascendingDiagonalIndex);
      if (ascendingDiagonalIndexCount != null) {
        score-=ascendingDiagonalIndexCount;
        ascendingDiagonalIndexCount++;
      }
 else {
        ascendingDiagonalIndexCount=1;
      }
      ascendingDiagonalIndexCountMap.put(ascendingDiagonalIndex,ascendingDiagonalIndexCount);
      int descendingDiagonalIndex=queen.getDescendingDiagonalIndex();
      Integer descendingDiagonalIndexCount=descendingDiagonalIndexCountMap.get(descendingDiagonalIndex);
      if (descendingDiagonalIndexCount != null) {
        score-=descendingDiagonalIndexCount;
        descendingDiagonalIndexCount++;
      }
 else {
        descendingDiagonalIndexCount=1;
      }
      descendingDiagonalIndexCountMap.put(descendingDiagonalIndex,descendingDiagonalIndexCount);
    }
  }
  return SimpleScore.valueOf(score);
}
