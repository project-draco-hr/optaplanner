{
  XmlSolverConfigurer configurer=new XmlSolverConfigurer();
  configurer.configure(ExaminationApp.SOLVER_CONFIG);
  EvaluationHandler evaluationHandler=configurer.buildSolver().getEvaluationHandler();
  List<Topic> topicList=examination.getTopicList();
  List<Period> periodList=examination.getPeriodList();
  List<Room> roomList=examination.getRoomList();
  List<Exam> examList=new ArrayList<Exam>(topicList.size());
  examination.setExamList(examList);
  evaluationHandler.setSolution(examination);
  evaluationHandler.resetStatefullSession();
  StatefulSession workingMemory=evaluationHandler.getStatefulSession();
  List<Topic> sortedTopicList=new ArrayList<Topic>(topicList);
  Collections.sort(sortedTopicList,new Comparator<Topic>(){
    public int compare(    Topic a,    Topic b){
      return new CompareToBuilder().append(a.getStudentListSize(),b.getStudentListSize()).toComparison();
    }
  }
);
  for (  Topic topic : sortedTopicList) {
    logger.info("Scheduling topic ({}).",topic);
    double unscheduledScore=evaluationHandler.fireAllRulesAndCalculateStepScore();
    Exam exam=new Exam();
    exam.setId(topic.getId());
    exam.setTopic(topic);
    examList.add(exam);
    FactHandle examHandle=null;
    boolean perfectMatch=false;
    double bestScore=Double.NEGATIVE_INFINITY;
    Period bestPeriod=null;
    Room bestRoom=null;
    for (    Period period : periodList) {
      exam.setPeriod(period);
      for (      Room room : roomList) {
        exam.setRoom(room);
        if (examHandle == null) {
          examHandle=workingMemory.insert(exam);
        }
        workingMemory.update(examHandle,exam);
        double score=evaluationHandler.fireAllRulesAndCalculateStepScore();
        if (score < unscheduledScore) {
          if (score > bestScore) {
            bestScore=score;
            bestPeriod=period;
            bestRoom=room;
          }
        }
 else         if (score == unscheduledScore) {
          perfectMatch=true;
          break;
        }
 else {
          throw new IllegalStateException("The score (" + score + ") cannot be higher than unscheduledScore ("+ unscheduledScore+ ").");
        }
      }
      if (perfectMatch) {
        break;
      }
    }
    if (!perfectMatch) {
      if (bestPeriod == null || bestRoom == null) {
        throw new IllegalStateException("The bestPeriod (" + bestPeriod + ") or the bestRoom ("+ bestRoom+ ") cannot be null.");
      }
      exam.setPeriod(bestPeriod);
      exam.setRoom(bestRoom);
      workingMemory.update(examHandle,exam);
    }
  }
  Collections.sort(examList,new PersistableIdComparator());
}
