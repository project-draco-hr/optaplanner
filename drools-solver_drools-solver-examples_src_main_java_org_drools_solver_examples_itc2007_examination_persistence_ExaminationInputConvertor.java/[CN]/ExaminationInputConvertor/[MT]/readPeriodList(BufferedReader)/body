{
  int periodSize=readHeaderWithNumber(bufferedReader,"Periods");
  List<Period> periodList=new ArrayList<Period>(periodSize);
  final DateFormat DATE_FORMAT=new SimpleDateFormat("dd:MM:yyyy HH:mm:ssZ");
  final Date referenceDate;
  try {
    referenceDate=DATE_FORMAT.parse("01:01:2000 12:00:00+0000");
  }
 catch (  ParseException e) {
    throw new IllegalStateException("Illegal referenceDateString.",e);
  }
  final long MILLISECONDS_PER_DAY=1000L * 3600L * 24L;
  for (int i=0; i < periodSize; i++) {
    Period period=new Period();
    period.setId((long)i);
    String line=bufferedReader.readLine();
    String[] lineTokens=line.split("\\,\\ ");
    if (lineTokens.length != 4) {
      throw new IllegalArgumentException("Read line (" + line + ") is expected to contain 4 tokens.");
    }
    String startDateTimeString=lineTokens[0] + " " + lineTokens[1];
    period.setStartDateTimeString(startDateTimeString);
    Date startDateTime;
    try {
      startDateTime=DATE_FORMAT.parse(startDateTimeString + "+0000");
    }
 catch (    ParseException e) {
      throw new IllegalArgumentException("Illegal startDateTimeString (" + startDateTimeString + ").",e);
    }
    long timeDifference=startDateTime.getTime() - referenceDate.getTime();
    period.setDateInDays((int)(timeDifference / MILLISECONDS_PER_DAY));
    period.setStartTimeInMinutes((int)(startDateTime.getTime() % MILLISECONDS_PER_DAY / 60000L));
    if ((timeDifference % 60000L) != 0L) {
      throw new IllegalArgumentException("The startDateTimeString (" + startDateTimeString + ") should not be specified below minutes.");
    }
    period.setDurationInMinutes(Integer.parseInt(lineTokens[2]));
    period.setPenalty(Integer.parseInt(lineTokens[3]));
    periodList.add(period);
  }
  return periodList;
}
