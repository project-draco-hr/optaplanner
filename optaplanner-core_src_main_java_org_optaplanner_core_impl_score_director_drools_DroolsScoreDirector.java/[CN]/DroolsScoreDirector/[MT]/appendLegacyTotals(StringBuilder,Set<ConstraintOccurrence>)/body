{
  Map<List<Object>,Double> scoreTotalMap=new LinkedHashMap<List<Object>,Double>();
  for (  ConstraintOccurrence constraintOccurrence : constraintOccurrenceSet) {
    List<Object> key=Arrays.<Object>asList(constraintOccurrence.getRuleId(),constraintOccurrence.getConstraintType());
    Double scoreTotal=scoreTotalMap.get(key);
    if (scoreTotal == null) {
      scoreTotal=0.0;
    }
    double occurrenceScore;
    if (constraintOccurrence instanceof IntConstraintOccurrence) {
      occurrenceScore=((IntConstraintOccurrence)constraintOccurrence).getWeight();
    }
 else     if (constraintOccurrence instanceof DoubleConstraintOccurrence) {
      occurrenceScore=((DoubleConstraintOccurrence)constraintOccurrence).getWeight();
    }
 else     if (constraintOccurrence instanceof LongConstraintOccurrence) {
      occurrenceScore=((LongConstraintOccurrence)constraintOccurrence).getWeight();
    }
 else     if (constraintOccurrence instanceof UnweightedConstraintOccurrence) {
      occurrenceScore=1.0;
    }
 else {
      throw new IllegalStateException("Cannot determine occurrenceScore of ConstraintOccurrence class: " + constraintOccurrence.getClass());
    }
    scoreTotal+=occurrenceScore;
    scoreTotalMap.put(key,scoreTotal);
  }
  for (  Map.Entry<List<Object>,Double> entry : scoreTotalMap.entrySet()) {
    analysis.append("    ").append(entry.getKey()).append(" = ").append(entry.getValue()).append("\n");
  }
}
