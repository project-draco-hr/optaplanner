{
  List<SolverBenchmark> rankedSolverBenchmarkList=new ArrayList<SolverBenchmark>(solverBenchmarkList);
  for (Iterator<SolverBenchmark> it=rankedSolverBenchmarkList.iterator(); it.hasNext(); ) {
    SolverBenchmark solverBenchmark=it.next();
    if (solverBenchmark.hasAnyFailure()) {
      it.remove();
    }
  }
  if (solverBenchmarkRankingComparator != null) {
    Collections.sort(rankedSolverBenchmarkList,Collections.reverseOrder(solverBenchmarkRankingComparator));
  }
 else   if (solverBenchmarkRankingWeightFactory != null) {
    SortedMap<Comparable,SolverBenchmark> rankedSolverBenchmarkMap=new TreeMap<Comparable,SolverBenchmark>(new ReverseComparator());
    for (    SolverBenchmark solverBenchmark : rankedSolverBenchmarkList) {
      Comparable rankingWeight=solverBenchmarkRankingWeightFactory.createRankingWeight(rankedSolverBenchmarkList,solverBenchmark);
      Object previous=rankedSolverBenchmarkMap.put(rankingWeight,solverBenchmark);
      if (previous != null) {
        throw new IllegalStateException("The solverBenchmarkList contains 2 times" + " the same solverBenchmark (" + previous + ") and ("+ solverBenchmark+ ").");
      }
    }
    rankedSolverBenchmarkList.clear();
    rankedSolverBenchmarkList.addAll(rankedSolverBenchmarkMap.values());
  }
 else {
    throw new IllegalStateException("Ranking is impossible" + " because solverBenchmarkRankingComparator and solverBenchmarkRankingWeightFactory are null.");
  }
  int ranking=0;
  SolverBenchmark previousSolverBenchmark=null;
  for (  SolverBenchmark solverBenchmark : rankedSolverBenchmarkList) {
    if (previousSolverBenchmark != null && !equalSolverRanking(rankedSolverBenchmarkList,solverBenchmark,previousSolverBenchmark)) {
      ranking++;
    }
    solverBenchmark.setRanking(ranking);
    previousSolverBenchmark=solverBenchmark;
  }
  favoriteSolverBenchmark=rankedSolverBenchmarkList.isEmpty() ? null : rankedSolverBenchmarkList.get(0);
}
