{
  DefaultGreedyDecider greedyDecider=new DefaultGreedyDecider();
  ConstructionHeuristicPickEarlyType pickEarlyType=(this.constructionHeuristicPickEarlyType == null) ? ConstructionHeuristicPickEarlyType.NEVER : this.constructionHeuristicPickEarlyType;
  Collection<PlanningEntityDescriptor> entityDescriptors=solutionDescriptor.getGenuineEntityDescriptors();
  if (entityDescriptors.size() != 1) {
    throw new UnsupportedOperationException("Currently the greedyFit implementation only supports " + "1 planningEntityClass.");
  }
  PlanningEntityDescriptor entityDescriptor=entityDescriptors.iterator().next();
  PlanningVariableWalker planningVariableWalker=new PlanningVariableWalker(entityDescriptor);
  List<PlanningValueWalker> planningValueWalkerList=new ArrayList<PlanningValueWalker>();
  for (  PlanningVariableDescriptor variableDescriptor : entityDescriptor.getVariableDescriptors()) {
    PlanningValueSelector planningValueSelector=new PlanningValueSelector(variableDescriptor);
    PlanningValueWalker planningValueWalker=new PlanningValueWalker(variableDescriptor,planningValueSelector);
    planningValueWalkerList.add(planningValueWalker);
  }
  planningVariableWalker.setPlanningValueWalkerList(planningValueWalkerList);
  greedyDecider.setPlanningVariableWalker(planningVariableWalker);
  if (environmentMode.isNonIntrusiveFullAsserted()) {
    greedyDecider.setAssertMoveScoreFromScratch(true);
  }
  return greedyDecider;
}
