{
  final Location newLocation;
switch (getSolution().getDistanceType()) {
case AIR_DISTANCE:
    newLocation=new AirLocation();
  break;
case ROAD_DISTANCE:
logger.warn("Adding locations for a road distance dataset is not supported.");
return;
case SEGMENTED_ROAD_DISTANCE:
logger.warn("Adding locations for a segmented road distance dataset is not supported.");
return;
default :
throw new IllegalStateException("The distanceType (" + getSolution().getDistanceType() + ") is not implemented.");
}
newLocation.setId(nextLocationId);
nextLocationId++;
newLocation.setLongitude(longitude);
newLocation.setLatitude(latitude);
logger.info("Scheduling insertion of newLocation ({}).",newLocation);
doProblemFactChange(new ProblemFactChange(){
public void doChange(ScoreDirector scoreDirector){
VehicleRoutingSolution solution=(VehicleRoutingSolution)scoreDirector.getWorkingSolution();
scoreDirector.beforeProblemFactAdded(newLocation);
solution.getLocationList().add(newLocation);
scoreDirector.afterProblemFactAdded(newLocation);
Customer newCustomer=createCustomer(solution,newLocation);
scoreDirector.beforeEntityAdded(newCustomer);
solution.getCustomerList().add(newCustomer);
scoreDirector.afterEntityAdded(newCustomer);
scoreDirector.triggerVariableListeners();
}
}
);
}
