{
  WorkingMemory workingMemory=localSearchSolverScope.getWorkingMemory();
  List<BedDesignation> bedDesignationList=createBedDesignationList(patientAdmissionSchedule);
  List<Bed> bedList=patientAdmissionSchedule.getBedList();
  for (  BedDesignation bedDesignation : bedDesignationList) {
    Score unscheduledScore=localSearchSolverScope.calculateScoreFromWorkingMemory();
    boolean perfectMatch=false;
    Score bestScore=DefaultHardAndSoftScore.valueOf(Integer.MIN_VALUE);
    Bed bestBed=null;
    FactHandle bedDesignationHandle=null;
    for (    Bed bed : bedList) {
      if (bed.allowsAdmissionPart(bedDesignation.getAdmissionPart())) {
        if (bedDesignationHandle == null) {
          bedDesignation.setBed(bed);
          bedDesignationHandle=workingMemory.insert(bedDesignation);
        }
 else {
          workingMemory.modifyRetract(bedDesignationHandle);
          bedDesignation.setBed(bed);
          workingMemory.modifyInsert(bedDesignationHandle,bedDesignation);
        }
        Score score=localSearchSolverScope.calculateScoreFromWorkingMemory();
        if (score.compareTo(unscheduledScore) < 0) {
          if (score.compareTo(bestScore) > 0) {
            bestScore=score;
            bestBed=bed;
          }
        }
 else         if (score.equals(unscheduledScore)) {
          perfectMatch=true;
          break;
        }
 else {
          throw new IllegalStateException("The score (" + score + ") cannot be higher than unscheduledScore ("+ unscheduledScore+ ").");
        }
      }
      if (perfectMatch) {
        break;
      }
    }
    if (!perfectMatch) {
      if (bestBed == null) {
        throw new IllegalStateException("The bestBed (" + bestBed + ") cannot be null.");
      }
      workingMemory.modifyRetract(bedDesignationHandle);
      bedDesignation.setBed(bestBed);
      workingMemory.modifyInsert(bedDesignationHandle,bedDesignation);
    }
  }
  Collections.sort(bedDesignationList,new PersistableIdComparator());
  patientAdmissionSchedule.setBedDesignationList(bedDesignationList);
}
