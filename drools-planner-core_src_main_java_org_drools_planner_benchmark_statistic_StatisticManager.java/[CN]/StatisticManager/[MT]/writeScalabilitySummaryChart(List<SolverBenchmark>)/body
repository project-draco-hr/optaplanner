{
  NumberAxis xAxis=new NumberAxis("Planning entity count");
  NumberAxis yAxis=new NumberAxis("Time spend");
  yAxis.setNumberFormatOverride(new MillisecondsSpendNumberFormat());
  XYPlot plot=new XYPlot(null,xAxis,yAxis,null);
  int seriesIndex=0;
  for (  SolverBenchmark solverBenchmark : solverBenchmarkList) {
    XYSeries series=new XYSeries(solverBenchmark.getName());
    ScoreDefinition scoreDefinition=solverBenchmark.getSolverConfig().getScoreDefinitionConfig().buildScoreDefinition();
    for (    SolverBenchmarkResult result : solverBenchmark.getSolverBenchmarkResultList()) {
      long timeMillisSpend=result.getTimeMillisSpend();
      Integer planningEntityCount=result.getPlanningEntityCount();
      series.add(planningEntityCount,(Long)timeMillisSpend);
    }
    XYSeriesCollection seriesCollection=new XYSeriesCollection();
    seriesCollection.addSeries(series);
    plot.setDataset(seriesIndex,seriesCollection);
    XYItemRenderer renderer=new StandardXYItemRenderer(StandardXYItemRenderer.SHAPES_AND_LINES);
    renderer.setSeriesStroke(0,new BasicStroke(1.0f,BasicStroke.CAP_ROUND,BasicStroke.JOIN_ROUND,1.0f,new float[]{2.0f,6.0f},0.0f));
    plot.setRenderer(seriesIndex,renderer);
    seriesIndex++;
  }
  plot.setOrientation(PlotOrientation.VERTICAL);
  JFreeChart chart=new JFreeChart("Scalability summary (lower is better)",JFreeChart.DEFAULT_TITLE_FONT,plot,true);
  BufferedImage chartImage=chart.createBufferedImage(1024,768);
  File chartSummaryFile=new File(solverStatisticFilesDirectory,"scalabilitySummary.png");
  OutputStream out=null;
  try {
    out=new FileOutputStream(chartSummaryFile);
    ImageIO.write(chartImage,"png",out);
  }
 catch (  IOException e) {
    throw new IllegalArgumentException("Problem writing graphStatisticFile: " + chartSummaryFile,e);
  }
 finally {
    IOUtils.closeQuietly(out);
  }
  return "  <h2>Scalability summary chart</h2>\n" + "  <img src=\"" + chartSummaryFile.getName() + "\"/>\n";
}
