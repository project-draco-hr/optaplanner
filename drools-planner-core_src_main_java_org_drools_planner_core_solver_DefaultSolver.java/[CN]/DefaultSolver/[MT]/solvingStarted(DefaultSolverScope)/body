{
  if (solverScope.getBestSolution() == null) {
    throw new IllegalStateException("The planningProblem must not be null." + " Use Solver.setPlanningProblem(Solution).");
  }
  solverScope.setStartingSystemTimeMillis(System.currentTimeMillis());
  solverScope.setScoreDirector(scoreDirectorFactory.buildScoreDirector());
  if (randomSeed != null) {
    solverScope.setWorkingRandom(new Random(randomSeed));
  }
 else {
    solverScope.setWorkingRandom(new Random());
  }
  solverScope.setWorkingSolutionFromBestSolution();
  bestSolutionRecaller.solvingStarted(solverScope);
  for (  SolverPhase solverPhase : solverPhaseList) {
    solverPhase.solvingStarted(solverScope);
  }
  logger.info("Solving started: time spend ({}), score ({}), new best score ({}), random seed ({}).",new Object[]{solverScope.calculateTimeMillisSpend(),solverScope.getStartingInitializedScore(),solverScope.getBestScore(),(randomSeed != null ? randomSeed : "not fixed")});
}
