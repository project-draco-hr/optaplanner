{
  MoveSelector childMoveSelector=SelectorTestUtils.mockMoveSelector(DummyMove.class,new DummyMove("a1"),new DummyMove("a2"),new DummyMove("a3"));
  ShufflingMoveSelector moveSelector=new ShufflingMoveSelector(childMoveSelector,cacheType);
  verify(childMoveSelector,times(1)).isNeverEnding();
  Random workingRandom=mock(Random.class);
  DefaultSolverScope solverScope=mock(DefaultSolverScope.class);
  when(solverScope.getWorkingRandom()).thenReturn(workingRandom);
  moveSelector.solvingStarted(solverScope);
  AbstractSolverPhaseScope phaseScopeA=mock(AbstractSolverPhaseScope.class);
  when(phaseScopeA.getSolverScope()).thenReturn(solverScope);
  when(phaseScopeA.getWorkingRandom()).thenReturn(workingRandom);
  moveSelector.phaseStarted(phaseScopeA);
  AbstractStepScope stepScopeA1=mock(AbstractStepScope.class);
  when(stepScopeA1.getSolverPhaseScope()).thenReturn(phaseScopeA);
  when(stepScopeA1.getWorkingRandom()).thenReturn(workingRandom);
  when(workingRandom.nextInt(3)).thenReturn(2);
  when(workingRandom.nextInt(2)).thenReturn(0);
  moveSelector.stepStarted(stepScopeA1);
  runAsserts(moveSelector,"a2","a1","a3");
  moveSelector.stepEnded(stepScopeA1);
  AbstractStepScope stepScopeA2=mock(AbstractStepScope.class);
  when(stepScopeA2.getSolverPhaseScope()).thenReturn(phaseScopeA);
  when(stepScopeA2.getWorkingRandom()).thenReturn(workingRandom);
  when(workingRandom.nextInt(3)).thenReturn(0);
  when(workingRandom.nextInt(2)).thenReturn(1);
  moveSelector.stepStarted(stepScopeA2);
  if (cacheType.compareTo(SelectionCacheType.STEP) > 0) {
    runAsserts(moveSelector,"a3","a1","a2");
  }
 else {
    runAsserts(moveSelector,"a3","a2","a1");
  }
  moveSelector.stepEnded(stepScopeA2);
  moveSelector.phaseEnded(phaseScopeA);
  AbstractSolverPhaseScope phaseScopeB=mock(AbstractSolverPhaseScope.class);
  when(phaseScopeB.getSolverScope()).thenReturn(solverScope);
  when(phaseScopeB.getWorkingRandom()).thenReturn(workingRandom);
  moveSelector.phaseStarted(phaseScopeB);
  AbstractStepScope stepScopeB1=mock(AbstractStepScope.class);
  when(stepScopeB1.getSolverPhaseScope()).thenReturn(phaseScopeB);
  when(stepScopeB1.getWorkingRandom()).thenReturn(workingRandom);
  when(workingRandom.nextInt(3)).thenReturn(1);
  when(workingRandom.nextInt(2)).thenReturn(0);
  moveSelector.stepStarted(stepScopeB1);
  if (cacheType.compareTo(SelectionCacheType.PHASE) > 0) {
    runAsserts(moveSelector,"a2","a3","a1");
  }
 else {
    runAsserts(moveSelector,"a3","a1","a2");
  }
  moveSelector.stepEnded(stepScopeB1);
  moveSelector.phaseEnded(phaseScopeB);
  moveSelector.solvingEnded(solverScope);
  verify(childMoveSelector,times(1)).solvingStarted(solverScope);
  verify(childMoveSelector,times(2)).phaseStarted(Matchers.<AbstractSolverPhaseScope>any());
  verify(childMoveSelector,times(3)).stepStarted(Matchers.<AbstractStepScope>any());
  verify(childMoveSelector,times(3)).stepEnded(Matchers.<AbstractStepScope>any());
  verify(childMoveSelector,times(2)).phaseEnded(Matchers.<AbstractSolverPhaseScope>any());
  verify(childMoveSelector,times(1)).solvingEnded(solverScope);
  verify(childMoveSelector,times(timesCalled)).iterator();
  verify(childMoveSelector,times(timesCalled)).getSize();
}
