{
  NQueens nQueens=new NQueens();
  nQueens.setId(0L);
  nQueens.setN(n);
  List<Column> columnList=new ArrayList<Column>(n);
  for (int i=0; i < n; i++) {
    Column column=new Column();
    column.setId((long)i);
    column.setIndex(i);
    columnList.add(column);
  }
  nQueens.setColumnList(columnList);
  List<Row> rowList=new ArrayList<Row>(n);
  for (int i=0; i < n; i++) {
    Row row=new Row();
    row.setId((long)i);
    row.setIndex(i);
    rowList.add(row);
  }
  nQueens.setRowList(rowList);
  List<Queen> queenList=new ArrayList<Queen>(n);
  long id=0;
  for (  Column column : columnList) {
    Queen queen=new Queen();
    queen.setId(id);
    id++;
    queen.setColumn(column);
    queenList.add(queen);
  }
  nQueens.setQueenList(queenList);
  logger.info("NQueens with {} queens.",nQueens.getN());
  BigInteger possibleSolutionSize=BigInteger.valueOf(nQueens.getN()).pow(nQueens.getN());
  String flooredPossibleSolutionSize="10^" + (possibleSolutionSize.toString().length() - 1);
  logger.info("NQueens with flooredPossibleSolutionSize ({}) and possibleSolutionSize ({}).",flooredPossibleSolutionSize,possibleSolutionSize);
  return nQueens;
}
