{
  NQueens nQueens=new NQueens();
  nQueens.setId(0L);
  nQueens.setN(n);
  List<Queen> queenList=new ArrayList<Queen>(n);
  for (int i=0; i < n; i++) {
    Queen queen=new Queen();
    queen.setId((long)i);
    queen.setX(i);
    queenList.add(queen);
  }
  nQueens.setQueenList(queenList);
  logger.info("NQueens {} with {} queens.",nQueens.getN());
  BigInteger possibleSolutionSize=BigInteger.valueOf(nQueens.getN()).pow(nQueens.getN());
  String flooredPossibleSolutionSize="10^" + (possibleSolutionSize.toString().length() - 1);
  logger.info("NQueens with flooredPossibleSolutionSize ({}) and possibleSolutionSize({}).",flooredPossibleSolutionSize,possibleSolutionSize);
  return nQueens;
}
