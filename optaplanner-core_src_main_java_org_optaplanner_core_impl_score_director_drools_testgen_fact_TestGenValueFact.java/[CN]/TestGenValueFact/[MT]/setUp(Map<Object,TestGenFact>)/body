{
  for (  Field field : instance.getClass().getDeclaredFields()) {
    String fieldName=field.getName();
    Method setter=ReflectionHelper.getSetterMethod(instance.getClass(),field.getType(),fieldName);
    Method getter=ReflectionHelper.getGetterMethod(instance.getClass(),fieldName);
    if (setter != null && getter != null) {
      BeanPropertyMemberAccessor accessor=new BeanPropertyMemberAccessor(getter);
      Object value=accessor.executeGetter(instance);
      if (value != null) {
        if (field.getType().equals(String.class)) {
          attributes.put(accessor,new TestGenStringValueProvider(value));
        }
 else         if (field.getType().isPrimitive()) {
          attributes.put(accessor,new TestGenPrimitiveValueProvider(value));
        }
 else         if (field.getType().isEnum()) {
          attributes.put(accessor,new TestGenEnumValueProvider(value));
        }
 else         if (existingInstances.containsKey(value)) {
          attributes.put(accessor,new TestGenExistingInstanceValueProvider(value,existingInstances.get(value).toString()));
          dependencies.add(existingInstances.get(value));
          imports.add(value.getClass());
        }
 else         if (field.getType().equals(List.class)) {
          String id=variableName + "_" + field.getName();
          Type[] typeArgs=((ParameterizedType)field.getGenericType()).getActualTypeArguments();
          TestGenListValueProvider listValueProvider=new TestGenListValueProvider(value,id,typeArgs[0],existingInstances);
          attributes.put(accessor,listValueProvider);
          dependencies.addAll(listValueProvider.getFacts());
          imports.addAll(listValueProvider.getImports());
        }
 else         if (field.getType().equals(Map.class)) {
          String id=variableName + "_" + field.getName();
          Type[] typeArgs=((ParameterizedType)field.getGenericType()).getActualTypeArguments();
          TestGenMapValueProvider mapValueProvider=new TestGenMapValueProvider(value,id,typeArgs,existingInstances);
          attributes.put(accessor,mapValueProvider);
          dependencies.addAll(mapValueProvider.getFacts());
          imports.addAll(mapValueProvider.getImports());
        }
 else {
          Method parseMethod=getParseMethod(field);
          if (parseMethod != null) {
            attributes.put(accessor,new TestGenParsedValueProvider(parseMethod,value));
            imports.add(value.getClass());
          }
 else {
            throw new IllegalStateException("Unsupported type: " + field.getType());
          }
        }
      }
 else {
        attributes.put(accessor,new TestGenNullValueProvider());
      }
    }
  }
}
