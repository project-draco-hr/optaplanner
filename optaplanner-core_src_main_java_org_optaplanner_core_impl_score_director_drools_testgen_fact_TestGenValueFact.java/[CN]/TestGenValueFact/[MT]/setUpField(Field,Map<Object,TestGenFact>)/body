{
  String fieldName=field.getName();
  Method setter=ReflectionHelper.getSetterMethod(instance.getClass(),field.getType(),fieldName);
  Method getter=ReflectionHelper.getGetterMethod(instance.getClass(),fieldName);
  if (setter != null && getter != null) {
    BeanPropertyMemberAccessor accessor=new BeanPropertyMemberAccessor(getter);
    Object value=accessor.executeGetter(instance);
    if (value != null) {
      if (field.getType().equals(String.class)) {
        attributes.put(accessor,new TestGenStringValueProvider((String)value));
      }
 else       if (field.getType().isPrimitive()) {
        attributes.put(accessor,new TestGenPrimitiveValueProvider(value));
      }
 else       if (field.getType().isEnum()) {
        attributes.put(accessor,new TestGenEnumValueProvider((Enum)value));
        imports.add(field.getType());
      }
 else       if (existingInstances.containsKey(value)) {
        String id=existingInstances.get(value).toString();
        attributes.put(accessor,new TestGenExistingInstanceValueProvider(value,id));
        dependencies.add(existingInstances.get(value));
      }
 else       if (field.getType().equals(List.class)) {
        String id=variableName + "_" + field.getName();
        Type[] typeArgs=((ParameterizedType)field.getGenericType()).getActualTypeArguments();
        TestGenListValueProvider listValueProvider=new TestGenListValueProvider((List)value,id,typeArgs[0],existingInstances);
        attributes.put(accessor,listValueProvider);
        dependencies.addAll(listValueProvider.getFacts());
        imports.addAll(listValueProvider.getImports());
      }
 else       if (field.getType().equals(Map.class)) {
        String id=variableName + "_" + field.getName();
        Type[] typeArgs=((ParameterizedType)field.getGenericType()).getActualTypeArguments();
        TestGenMapValueProvider mapValueProvider=new TestGenMapValueProvider((Map)value,id,typeArgs,existingInstances);
        attributes.put(accessor,mapValueProvider);
        dependencies.addAll(mapValueProvider.getFacts());
        imports.addAll(mapValueProvider.getImports());
      }
 else {
        Method parseMethod=getParseMethod(field);
        if (parseMethod != null) {
          attributes.put(accessor,new TestGenParsedValueProvider(parseMethod,value));
          imports.add(field.getType());
        }
 else {
          throw new IllegalStateException("Unsupported type: " + field.getType());
        }
      }
    }
 else {
      attributes.put(accessor,new TestGenNullValueProvider());
    }
  }
}
