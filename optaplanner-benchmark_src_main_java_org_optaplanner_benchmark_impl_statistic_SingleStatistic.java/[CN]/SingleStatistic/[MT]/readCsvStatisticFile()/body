{
  ScoreDefinition scoreDefinition=singleBenchmarkResult.getSolverBenchmarkResult().getSolverConfig().getScoreDirectorFactoryConfig().buildScoreDefinition();
  List<P> pointList=getPointList();
  if (!pointList.isEmpty()) {
    throw new IllegalStateException("The pointList with size (" + pointList.size() + ") should be empty.");
  }
  BufferedReader reader=null;
  try {
    reader=new BufferedReader(new InputStreamReader(new FileInputStream(csvFile),"UTF-8"));
    String line=reader.readLine();
    if (!getCsvHeader().equals(line)) {
      throw new IllegalStateException("The read line (" + line + ") is expected to be the head line ("+ getCsvHeader()+ ") for statisticType ("+ statisticType+ ").");
    }
    for (line=reader.readLine(); line != null && !line.isEmpty(); line=reader.readLine()) {
      List<String> csvLine=StatisticPoint.parseCsvLine(line);
      pointList.add(createPointFromCsvLine(scoreDefinition,csvLine));
    }
  }
 catch (  RuntimeException e) {
    throw new IllegalArgumentException("Failed reading csvFile (" + csvFile + ").",e);
  }
catch (  IOException e) {
    throw new IllegalArgumentException("Failed reading csvFile (" + csvFile + ").",e);
  }
 finally {
    IOUtils.closeQuietly(reader);
  }
}
