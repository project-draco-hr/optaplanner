{
  Forager forager=new AcceptedForager(PickEarlyType.FIRST_LAST_STEP_SCORE_IMPROVING,Integer.MAX_VALUE);
  LocalSearchSolverPhaseScope localSearchSolverPhaseScope=createLocalSearchSolverPhaseScope();
  forager.phaseStarted(localSearchSolverPhaseScope);
  LocalSearchStepScope localSearchStepScope=createStepScope(localSearchSolverPhaseScope);
  forager.beforeDeciding(localSearchStepScope);
  MoveScope a=createMoveScope(localSearchStepScope,DefaultSimpleScore.valueOf(-1),0.0);
  MoveScope b=createMoveScope(localSearchStepScope,DefaultSimpleScore.valueOf(-300),1.0);
  MoveScope c=createMoveScope(localSearchStepScope,DefaultSimpleScore.valueOf(-4000),1.0);
  MoveScope d=createMoveScope(localSearchStepScope,DefaultSimpleScore.valueOf(-20),0.3);
  forager.addMove(a);
  assertFalse(forager.isQuitEarly());
  forager.addMove(b);
  assertFalse(forager.isQuitEarly());
  forager.addMove(c);
  assertFalse(forager.isQuitEarly());
  forager.addMove(d);
  assertTrue(forager.isQuitEarly());
  MoveScope pickedScope=forager.pickMove(localSearchStepScope);
  assertSame(d,pickedScope);
  List<Move> topList=forager.getTopList(2);
  assertTrue(topList.contains(b.getMove()));
  assertTrue(topList.contains(d.getMove()));
  forager.phaseEnded(localSearchSolverPhaseScope);
}
