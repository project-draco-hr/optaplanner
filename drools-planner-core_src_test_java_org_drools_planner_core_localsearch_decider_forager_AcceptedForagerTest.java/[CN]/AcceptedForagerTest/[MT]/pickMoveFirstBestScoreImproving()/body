{
  Forager forager=new AcceptedForager(PickEarlyType.FIRST_BEST_SCORE_IMPROVING,Integer.MAX_VALUE);
  ((AcceptedForager)forager).setDeciderScoreComparatorFactory(new NaturalDeciderScoreComparatorFactory());
  LocalSearchSolverPhaseScope localSearchSolverPhaseScope=createLocalSearchSolverPhaseScope();
  forager.phaseStarted(localSearchSolverPhaseScope);
  LocalSearchStepScope localSearchStepScope=createStepScope(localSearchSolverPhaseScope);
  forager.stepStarted(localSearchStepScope);
  LocalSolverMoveScope a=createMoveScope(localSearchStepScope,DefaultSimpleScore.valueOf(-1),false);
  LocalSolverMoveScope b=createMoveScope(localSearchStepScope,DefaultSimpleScore.valueOf(-20),true);
  LocalSolverMoveScope c=createMoveScope(localSearchStepScope,DefaultSimpleScore.valueOf(-300),true);
  LocalSolverMoveScope d=createMoveScope(localSearchStepScope,DefaultSimpleScore.valueOf(-1),true);
  forager.addMove(a);
  assertFalse(forager.isQuitEarly());
  forager.addMove(b);
  assertFalse(forager.isQuitEarly());
  forager.addMove(c);
  assertFalse(forager.isQuitEarly());
  forager.addMove(d);
  assertTrue(forager.isQuitEarly());
  LocalSolverMoveScope pickedScope=forager.pickMove(localSearchStepScope);
  assertSame(d,pickedScope);
  forager.phaseEnded(localSearchSolverPhaseScope);
}
