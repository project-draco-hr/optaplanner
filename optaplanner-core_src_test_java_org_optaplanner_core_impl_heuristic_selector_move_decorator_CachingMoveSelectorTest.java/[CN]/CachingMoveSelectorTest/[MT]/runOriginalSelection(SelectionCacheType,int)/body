{
  MoveSelector childMoveSelector=SelectorTestUtils.mockMoveSelector(DummyMove.class,new DummyMove("a1"),new DummyMove("a2"),new DummyMove("a3"));
  CachingMoveSelector moveSelector=new CachingMoveSelector(childMoveSelector,cacheType,false);
  verify(childMoveSelector,times(1)).isNeverEnding();
  DefaultSolverScope solverScope=mock(DefaultSolverScope.class);
  moveSelector.solvingStarted(solverScope);
  AbstractPhaseScope phaseScopeA=mock(AbstractPhaseScope.class);
  when(phaseScopeA.getSolverScope()).thenReturn(solverScope);
  moveSelector.phaseStarted(phaseScopeA);
  AbstractStepScope stepScopeA1=mock(AbstractStepScope.class);
  when(stepScopeA1.getPhaseScope()).thenReturn(phaseScopeA);
  moveSelector.stepStarted(stepScopeA1);
  assertAllCodesOfMoveSelector(moveSelector,"a1","a2","a3");
  moveSelector.stepEnded(stepScopeA1);
  AbstractStepScope stepScopeA2=mock(AbstractStepScope.class);
  when(stepScopeA2.getPhaseScope()).thenReturn(phaseScopeA);
  moveSelector.stepStarted(stepScopeA2);
  assertAllCodesOfMoveSelector(moveSelector,"a1","a2","a3");
  moveSelector.stepEnded(stepScopeA2);
  moveSelector.phaseEnded(phaseScopeA);
  AbstractPhaseScope phaseScopeB=mock(AbstractPhaseScope.class);
  when(phaseScopeB.getSolverScope()).thenReturn(solverScope);
  moveSelector.phaseStarted(phaseScopeB);
  AbstractStepScope stepScopeB1=mock(AbstractStepScope.class);
  when(stepScopeB1.getPhaseScope()).thenReturn(phaseScopeB);
  moveSelector.stepStarted(stepScopeB1);
  assertAllCodesOfMoveSelector(moveSelector,"a1","a2","a3");
  moveSelector.stepEnded(stepScopeB1);
  AbstractStepScope stepScopeB2=mock(AbstractStepScope.class);
  when(stepScopeB2.getPhaseScope()).thenReturn(phaseScopeB);
  moveSelector.stepStarted(stepScopeB2);
  assertAllCodesOfMoveSelector(moveSelector,"a1","a2","a3");
  moveSelector.stepEnded(stepScopeB2);
  AbstractStepScope stepScopeB3=mock(AbstractStepScope.class);
  when(stepScopeB3.getPhaseScope()).thenReturn(phaseScopeB);
  moveSelector.stepStarted(stepScopeB3);
  assertAllCodesOfMoveSelector(moveSelector,"a1","a2","a3");
  moveSelector.stepEnded(stepScopeB3);
  moveSelector.phaseEnded(phaseScopeB);
  moveSelector.solvingEnded(solverScope);
  verifyPhaseLifecycle(childMoveSelector,1,2,5);
  verify(childMoveSelector,times(timesCalled)).iterator();
  verify(childMoveSelector,times(timesCalled)).getSize();
}
