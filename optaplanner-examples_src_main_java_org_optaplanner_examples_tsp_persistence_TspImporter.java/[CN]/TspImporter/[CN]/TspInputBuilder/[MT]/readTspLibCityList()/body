{
  readConstantLine("NODE_COORD_SECTION");
  DistanceType distanceType=travelingSalesmanTour.getDistanceType();
  List<Location> locationList=new ArrayList<Location>(locationListSize);
  for (int i=0; i < locationListSize; i++) {
    String line=bufferedReader.readLine();
    String[] lineTokens=splitBySpace(line,3,4);
    Location location;
switch (distanceType) {
case AIR_DISTANCE:
      location=new AirLocation();
    break;
case ROAD_DISTANCE:
  location=new RoadLocation();
break;
default :
throw new IllegalStateException("The distanceType (" + distanceType + ") is not implemented.");
}
location.setId(Long.parseLong(lineTokens[0]));
location.setLatitude(Double.parseDouble(lineTokens[1]));
location.setLongitude(Double.parseDouble(lineTokens[2]));
if (lineTokens.length >= 4) {
location.setName(lineTokens[3]);
}
locationList.add(location);
}
travelingSalesmanTour.setLocationList(locationList);
if (distanceType == DistanceType.ROAD_DISTANCE) {
readConstantLine("EDGE_WEIGHT_SECTION");
for (int i=0; i < locationListSize; i++) {
RoadLocation location=(RoadLocation)locationList.get(i);
Map<RoadLocation,Double> travelDistanceMap=new LinkedHashMap<RoadLocation,Double>(locationListSize);
String line=bufferedReader.readLine();
String[] lineTokens=splitBySpacesOrTabs(line.trim(),locationListSize);
for (int j=0; j < locationListSize; j++) {
double travelDistance=Double.parseDouble(lineTokens[j]);
if (i == j) {
if (travelDistance != 0.0) {
  throw new IllegalStateException("The travelDistance (" + travelDistance + ") should be zero.");
}
}
 else {
RoadLocation otherLocation=(RoadLocation)locationList.get(j);
travelDistanceMap.put(otherLocation,travelDistance);
}
}
location.setTravelDistanceMap(travelDistanceMap);
}
}
}
