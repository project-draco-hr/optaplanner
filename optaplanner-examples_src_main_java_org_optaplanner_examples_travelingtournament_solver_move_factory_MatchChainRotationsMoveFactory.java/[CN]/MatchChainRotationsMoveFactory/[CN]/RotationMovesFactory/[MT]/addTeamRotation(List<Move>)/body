{
  for (ListIterator<Team> firstTeamIt=teamList.listIterator(); firstTeamIt.hasNext(); ) {
    Team firstTeam=firstTeamIt.next();
    Map<Day,Match> firstTeamDayMap=teamDayMap.get(firstTeam);
    for (ListIterator<Team> secondTeamIt=teamList.listIterator(firstTeamIt.nextIndex()); secondTeamIt.hasNext(); ) {
      Team secondTeam=secondTeamIt.next();
      List<Match> clonedFirstTeamMatchList=new ArrayList<>(firstTeamDayMap.values());
      while (!clonedFirstTeamMatchList.isEmpty()) {
        List<Match> firstRotateList=new ArrayList<>();
        List<Match> secondRotateList=new ArrayList<>();
        Match firstStartMatch=clonedFirstTeamMatchList.remove(0);
        Team firstStartTeam=getOtherTeam(firstStartMatch,firstTeam);
        Day startDay=firstStartMatch.getDay();
        boolean firstTeamIsHomeTeam=firstStartMatch.getHomeTeam().equals(firstTeam);
        Match secondStartMatch=teamDayMap.get(secondTeam).get(startDay);
        if (firstStartMatch.equals(secondStartMatch)) {
          break;
        }
        firstRotateList.add(0,firstStartMatch);
        secondRotateList.add(secondStartMatch);
        Map<Team,Match> visitedTeamMap=new HashMap<>();
        Team teamToFind=getOtherTeam(secondStartMatch,secondTeam);
        while (!teamToFind.equals(firstStartTeam)) {
          Match firstRepairMatch=homeTeamAwayTeamMap.get(firstTeamIsHomeTeam ? firstTeam : teamToFind).get(firstTeamIsHomeTeam ? teamToFind : firstTeam);
          if (!clonedFirstTeamMatchList.contains(firstRepairMatch)) {
            if (visitedTeamMap.containsKey(teamToFind)) {
              Match shortcutMatch=visitedTeamMap.get(teamToFind);
              int shortcutSize=firstRotateList.indexOf(shortcutMatch) + 1;
              int reverseShortcutSize=firstRotateList.size() - shortcutSize;
              List<Match> firstShortcutRotateList=new ArrayList<>(firstRotateList.subList(0,shortcutSize));
              for (              Match match : firstShortcutRotateList) {
                visitedTeamMap.remove(getOtherTeam(match,firstTeam));
              }
              List<Match> secondShortcutRotateList=new ArrayList<>(secondRotateList.subList(reverseShortcutSize,secondRotateList.size()));
              firstRotateList=new ArrayList<>(firstRotateList.subList(shortcutSize,firstRotateList.size()));
              secondRotateList=new ArrayList<>(secondRotateList.subList(0,reverseShortcutSize));
              addTeamRotateMove(moveList,firstShortcutRotateList,secondShortcutRotateList);
            }
            firstTeamIsHomeTeam=!firstTeamIsHomeTeam;
            firstRepairMatch=homeTeamAwayTeamMap.get(firstTeamIsHomeTeam ? firstTeam : teamToFind).get(firstTeamIsHomeTeam ? teamToFind : firstTeam);
          }
          Day repairDay=firstRepairMatch.getDay();
          Match secondRepairMatch=teamDayMap.get(secondTeam).get(repairDay);
          clonedFirstTeamMatchList.remove(firstRepairMatch);
          visitedTeamMap.put(teamToFind,firstRepairMatch);
          firstRotateList.add(0,firstRepairMatch);
          secondRotateList.add(secondRepairMatch);
          teamToFind=getOtherTeam(secondRepairMatch,secondTeam);
        }
        addTeamRotateMove(moveList,firstRotateList,secondRotateList);
      }
    }
  }
}
