{
  List<Employee> employeeList=nurseRoster.getEmployeeList();
  List<ShiftAssignment> shiftAssignmentList=new ArrayList<>(nurseRoster.getShiftAssignmentList());
  for (Iterator<ShiftAssignment> it=shiftAssignmentList.iterator(); it.hasNext(); ) {
    ShiftAssignment shiftAssignment=it.next();
    if (!filter.accept(nurseRoster,shiftAssignment)) {
      it.remove();
    }
  }
  Map<Employee,List<AssignmentSequence>> employeeToAssignmentSequenceListMap=new HashMap<>(employeeList.size());
  int assignmentSequenceCapacity=nurseRoster.getShiftDateList().size() + 1 / 2;
  for (  Employee employee : employeeList) {
    employeeToAssignmentSequenceListMap.put(employee,new ArrayList<>(assignmentSequenceCapacity));
  }
  for (  ShiftAssignment shiftAssignment : shiftAssignmentList) {
    Employee employee=shiftAssignment.getEmployee();
    List<AssignmentSequence> assignmentSequenceList=employeeToAssignmentSequenceListMap.get(employee);
    if (assignmentSequenceList.isEmpty()) {
      AssignmentSequence assignmentSequence=new AssignmentSequence(shiftAssignment);
      assignmentSequenceList.add(assignmentSequence);
    }
 else {
      AssignmentSequence lastAssignmentSequence=assignmentSequenceList.get(assignmentSequenceList.size() - 1);
      if (lastAssignmentSequence.belongsHere(shiftAssignment)) {
        lastAssignmentSequence.add(shiftAssignment);
      }
 else {
        AssignmentSequence assignmentSequence=new AssignmentSequence(shiftAssignment);
        assignmentSequenceList.add(assignmentSequence);
      }
    }
  }
  List<Move> moveList=new ArrayList<>();
  for (ListIterator<Employee> leftEmployeeIt=employeeList.listIterator(); leftEmployeeIt.hasNext(); ) {
    Employee leftEmployee=leftEmployeeIt.next();
    List<AssignmentSequence> leftAssignmentSequenceList=employeeToAssignmentSequenceListMap.get(leftEmployee);
    for (ListIterator<Employee> rightEmployeeIt=employeeList.listIterator(leftEmployeeIt.nextIndex()); rightEmployeeIt.hasNext(); ) {
      Employee rightEmployee=rightEmployeeIt.next();
      List<AssignmentSequence> rightAssignmentSequenceList=employeeToAssignmentSequenceListMap.get(rightEmployee);
      final int SWITCH_LENGTH=2;
      for (      AssignmentSequence leftAssignmentSequence : leftAssignmentSequenceList) {
        List<ShiftAssignment> leftShiftAssignmentList=leftAssignmentSequence.getShiftAssignmentList();
        for (int leftIndex=0; leftIndex <= leftShiftAssignmentList.size() - SWITCH_LENGTH; leftIndex++) {
          for (          AssignmentSequence rightAssignmentSequence : rightAssignmentSequenceList) {
            List<ShiftAssignment> rightShiftAssignmentList=rightAssignmentSequence.getShiftAssignmentList();
            for (int rightIndex=0; rightIndex <= rightShiftAssignmentList.size() - SWITCH_LENGTH; rightIndex++) {
              List<Move> subMoveList=new ArrayList<>(SWITCH_LENGTH * 2);
              for (              ShiftAssignment leftShiftAssignment : leftShiftAssignmentList.subList(leftIndex,leftIndex + SWITCH_LENGTH)) {
                subMoveList.add(new EmployeeChangeMove(leftShiftAssignment,rightEmployee));
              }
              for (              ShiftAssignment rightShiftAssignment : rightShiftAssignmentList.subList(rightIndex,rightIndex + SWITCH_LENGTH)) {
                subMoveList.add(new EmployeeChangeMove(rightShiftAssignment,leftEmployee));
              }
              moveList.add(CompositeMove.buildMove(subMoveList));
            }
          }
        }
      }
    }
  }
  return moveList;
}
