{
  boolean noPlanningEntityCollectionAnnotation=true;
  for (  PropertyDescriptor propertyDescriptor : solutionBeanInfo.getPropertyDescriptors()) {
    propertyDescriptorMap.put(propertyDescriptor.getName(),propertyDescriptor);
    Method propertyGetter=propertyDescriptor.getReadMethod();
    if (propertyGetter.isAnnotationPresent(PlanningFactProperty.class)) {
      factPropertyDescriptorMap.put(propertyDescriptor.getName(),propertyDescriptor);
    }
 else     if (propertyGetter.isAnnotationPresent(PlanningFactCollectionProperty.class)) {
      if (!Collection.class.isAssignableFrom(propertyDescriptor.getPropertyType())) {
        throw new IllegalStateException("The solutionClass (" + solutionClass + ") has a PlanningFactCollectionProperty annotated property ("+ propertyDescriptor.getName()+ ") that does not return a Collection.");
      }
      factCollectionPropertyDescriptorMap.put(propertyDescriptor.getName(),propertyDescriptor);
    }
 else     if (propertyGetter.isAnnotationPresent(PlanningEntityCollectionProperty.class)) {
      PlanningEntityCollectionProperty planningEntityCollectionPropertyAnnotation=propertyGetter.getAnnotation(PlanningEntityCollectionProperty.class);
      noPlanningEntityCollectionAnnotation=false;
      if (!Collection.class.isAssignableFrom(propertyDescriptor.getPropertyType())) {
        throw new IllegalStateException("The solutionClass (" + solutionClass + ") has a PlanningEntityCollection annotated property ("+ propertyDescriptor.getName()+ ") that does not return a Collection.");
      }
      entityCollectionPropertyDescriptorMap.put(propertyDescriptor.getName(),propertyDescriptor);
    }
  }
  if (noPlanningEntityCollectionAnnotation) {
    throw new IllegalStateException("The solutionClass (" + solutionClass + ") should have at least 1 getter with a PlanningEntityCollection annotation.");
  }
}
