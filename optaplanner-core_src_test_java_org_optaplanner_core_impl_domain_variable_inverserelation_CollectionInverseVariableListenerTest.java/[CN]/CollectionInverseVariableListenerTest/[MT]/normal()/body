{
  ScoreDirector scoreDirector=mock(ScoreDirector.class);
  SolutionDescriptor solutionDescriptor=TestdataInverseRelationSolution.buildSolutionDescriptor();
  EntityDescriptor entityDescriptor=solutionDescriptor.findEntityDescriptorOrFail(TestdataInverseRelationEntity.class);
  EntityDescriptor shadowEntityDescriptor=solutionDescriptor.findEntityDescriptorOrFail(TestdataInverseRelationValue.class);
  ShadowVariableDescriptor entitiesVariableDescriptor=shadowEntityDescriptor.getShadowVariableDescriptor("entities");
  CollectionInverseVariableListener variableListener=new CollectionInverseVariableListener((InverseRelationShadowVariableDescriptor)entitiesVariableDescriptor,entityDescriptor.getGenuineVariableDescriptor("value"));
  TestdataInverseRelationValue val1=new TestdataInverseRelationValue("1");
  TestdataInverseRelationValue val2=new TestdataInverseRelationValue("2");
  TestdataInverseRelationValue val3=new TestdataInverseRelationValue("3");
  TestdataInverseRelationEntity a=new TestdataInverseRelationEntity("a",val1);
  TestdataInverseRelationEntity b=new TestdataInverseRelationEntity("b",val1);
  TestdataInverseRelationEntity c=new TestdataInverseRelationEntity("c",val3);
  TestdataInverseRelationEntity d=new TestdataInverseRelationEntity("d",val3);
  TestdataInverseRelationSolution solution=new TestdataInverseRelationSolution("solution");
  solution.setEntityList(Arrays.asList(a,b,c,d));
  solution.setValueList(Arrays.asList(val1,val2,val3));
  assertCollectionContainsExactly(val1.getEntities(),a,b);
  assertCollectionContainsExactly(val2.getEntities());
  assertCollectionContainsExactly(val3.getEntities(),c,d);
  variableListener.beforeVariableChanged(scoreDirector,c);
  c.setValue(val2);
  variableListener.afterVariableChanged(scoreDirector,c);
  assertCollectionContainsExactly(val1.getEntities(),a,b);
  assertCollectionContainsExactly(val2.getEntities(),c);
  assertCollectionContainsExactly(val3.getEntities(),d);
}
