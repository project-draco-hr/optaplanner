{
  ArrayList<MoveSelector> childMoveSelectorList=new ArrayList<MoveSelector>();
  Map<MoveSelector,Double> fixedProbabilityWeightMap=new HashMap<MoveSelector,Double>();
  childMoveSelectorList.add(SelectorTestUtils.mockMoveSelector(DummyMove.class));
  fixedProbabilityWeightMap.put(childMoveSelectorList.get(0),1000.0);
  childMoveSelectorList.add(SelectorTestUtils.mockMoveSelector(DummyMove.class));
  fixedProbabilityWeightMap.put(childMoveSelectorList.get(1),20.0);
  UnionMoveSelector moveSelector=new UnionMoveSelector(childMoveSelectorList,true,new FixedSelectorProbabilityWeightFactory<MoveSelector>(fixedProbabilityWeightMap));
  Random workingRandom=mock(Random.class);
  when(workingRandom.nextDouble()).thenReturn(1.0);
  DefaultSolverScope solverScope=mock(DefaultSolverScope.class);
  when(solverScope.getWorkingRandom()).thenReturn(workingRandom);
  moveSelector.solvingStarted(solverScope);
  AbstractPhaseScope phaseScopeA=mock(AbstractPhaseScope.class);
  when(phaseScopeA.getSolverScope()).thenReturn(solverScope);
  when(phaseScopeA.getWorkingRandom()).thenReturn(workingRandom);
  moveSelector.phaseStarted(phaseScopeA);
  AbstractStepScope stepScopeA1=mock(AbstractStepScope.class);
  when(stepScopeA1.getPhaseScope()).thenReturn(phaseScopeA);
  when(stepScopeA1.getWorkingRandom()).thenReturn(workingRandom);
  moveSelector.stepStarted(stepScopeA1);
  assertAllCodesOfMoveSelector(moveSelector);
  moveSelector.stepEnded(stepScopeA1);
  moveSelector.phaseEnded(phaseScopeA);
  moveSelector.solvingEnded(solverScope);
  verifyPhaseLifecycle(childMoveSelectorList.get(0),1,1,1);
  verifyPhaseLifecycle(childMoveSelectorList.get(1),1,1,1);
}
