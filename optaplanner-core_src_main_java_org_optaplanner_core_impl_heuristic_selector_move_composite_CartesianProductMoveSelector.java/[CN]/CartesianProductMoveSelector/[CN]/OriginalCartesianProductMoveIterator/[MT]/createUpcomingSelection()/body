{
  int childSize=moveIteratorList.size();
  int startingIndex;
  Move[] moveList=new Move[childSize];
  if (subSelections == null) {
    startingIndex=-1;
  }
 else {
    startingIndex=childSize - 1;
    while (startingIndex >= 0) {
      Iterator<Move> moveIterator=moveIteratorList.get(startingIndex);
      if (moveIterator.hasNext()) {
        break;
      }
      startingIndex--;
    }
    if (startingIndex < 0) {
      return noUpcomingSelection();
    }
    System.arraycopy(subSelections,0,moveList,0,startingIndex);
    moveList[startingIndex]=moveIteratorList.get(startingIndex).next();
  }
  for (int i=startingIndex + 1; i < childSize; i++) {
    Iterator<Move> moveIterator=childMoveSelectorList.get(i).iterator();
    moveIteratorList.set(i,moveIterator);
    Move next;
    if (!moveIterator.hasNext()) {
      if (ignoreEmptyChildIterators) {
        next=EMPTY_MARK;
      }
 else {
        return noUpcomingSelection();
      }
    }
 else {
      next=moveIterator.next();
    }
    moveList[i]=next;
  }
  subSelections=moveList;
  if (ignoreEmptyChildIterators) {
    Move[] newMoveList=new Move[childSize];
    int newSize=0;
    for (int i=0; i < childSize; i++) {
      if (moveList[i] != EMPTY_MARK) {
        newMoveList[newSize]=moveList[i];
        newSize++;
      }
    }
    if (newSize == 0) {
      return noUpcomingSelection();
    }
 else     if (newSize == 1) {
      return newMoveList[0];
    }
    moveList=Arrays.copyOfRange(newMoveList,0,newSize);
  }
  return new CompositeMove(moveList);
}
