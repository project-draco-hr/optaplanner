{
  int serviceListSize=readIntegerValue();
  serviceList=new ArrayList<MrService>(serviceListSize);
  long serviceId=0L;
  for (int i=0; i < serviceListSize; i++) {
    MrService service=new MrService();
    service.setId(serviceId);
    serviceList.add(service);
    serviceId++;
  }
  List<MrServiceDependency> serviceDependencyList=new ArrayList<MrServiceDependency>(serviceListSize * 5);
  long serviceDependencyId=0L;
  for (int i=0; i < serviceListSize; i++) {
    MrService service=serviceList.get(i);
    String line=readStringValue();
    String[] lineTokens=splitBySpace(line);
    service.setLocationSpread(Integer.parseInt(lineTokens[0]));
    int serviceDependencyListSize=Integer.parseInt(lineTokens[1]);
    for (int j=0; j < serviceDependencyListSize; j++) {
      MrServiceDependency serviceDependency=new MrServiceDependency();
      serviceDependency.setId(serviceDependencyId);
      serviceDependency.setFromService(service);
      int toServiceIndex=Integer.parseInt(lineTokens[2 + j]);
      if (toServiceIndex >= serviceList.size()) {
        throw new IllegalArgumentException("Service with id (" + serviceId + ") has a non existing toServiceIndex ("+ toServiceIndex+ ").");
      }
      MrService toService=serviceList.get(toServiceIndex);
      serviceDependency.setToService(toService);
      serviceDependencyList.add(serviceDependency);
      serviceDependencyId++;
    }
    int numberOfTokens=2 + serviceDependencyListSize;
    if (lineTokens.length != numberOfTokens) {
      throw new IllegalArgumentException("Read line (" + line + ") has "+ lineTokens.length+ " tokens but is expected to contain "+ numberOfTokens+ " tokens separated by space.");
    }
  }
  machineReassignment.setServiceList(serviceList);
  machineReassignment.setServiceDependencyList(serviceDependencyList);
}
