{
  MoveSelector moveSelector;
  SelectionCacheType defaultCacheType=SelectionCacheType.JUST_IN_TIME;
  SelectionOrder defaultSelectionOrder=SelectionOrder.RANDOM;
  if (CollectionUtils.isEmpty(moveSelectorConfigList)) {
    UnionMoveSelectorConfig unionMoveSelectorConfig=new UnionMoveSelectorConfig();
    unionMoveSelectorConfig.setMoveSelectorConfigList(Arrays.asList(new ChangeMoveSelectorConfig(),new SwapMoveSelectorConfig()));
    moveSelector=unionMoveSelectorConfig.buildMoveSelector(configPolicy,defaultCacheType,defaultSelectionOrder);
  }
 else   if (moveSelectorConfigList.size() == 1) {
    moveSelector=moveSelectorConfigList.get(0).buildMoveSelector(configPolicy,defaultCacheType,defaultSelectionOrder);
  }
 else {
    throw new IllegalArgumentException("The moveSelectorConfigList (" + moveSelectorConfigList + ") must be a singleton or empty. Use a single "+ UnionMoveSelectorConfig.class+ " or "+ CartesianProductMoveSelectorConfig.class+ " element to nest multiple MoveSelectors.");
  }
  return moveSelector;
}
