{
  Map<SolverBenchmarkResult,WarmUpConfigBackup> warmUpConfigBackupMap=new HashMap<>(plannerBenchmarkResult.getSolverBenchmarkResultList().size());
  for (  SolverBenchmarkResult solverBenchmarkResult : plannerBenchmarkResult.getSolverBenchmarkResultList()) {
    TerminationConfig originalTerminationConfig=solverBenchmarkResult.getSolverConfig().getTerminationConfig();
    WarmUpConfigBackup warmUpConfigBackup=new WarmUpConfigBackup(originalTerminationConfig);
    for (    SingleBenchmarkResult singleBenchmarkResult : solverBenchmarkResult.getSingleBenchmarkResultList()) {
      for (      SubSingleBenchmarkResult subSingleBenchmarkResult : singleBenchmarkResult.getSubSingleBenchmarkResultList()) {
        List<PureSubSingleStatistic> originalPureSubSingleStatisticList=subSingleBenchmarkResult.getPureSubSingleStatisticList();
        List<PureSubSingleStatistic> subSingleBenchmarkStatisticPutResult=warmUpConfigBackup.getPureSubSingleStatisticMap().put(subSingleBenchmarkResult,originalPureSubSingleStatisticList);
        if (subSingleBenchmarkStatisticPutResult != null) {
          throw new IllegalStateException("SubSingleBenchmarkStatisticMap of WarmUpConfigBackup (" + warmUpConfigBackup + ") already contained key ("+ subSingleBenchmarkResult+ ") with value ("+ subSingleBenchmarkStatisticPutResult+ ").");
        }
      }
      ProblemBenchmarkResult problemBenchmarkResult=singleBenchmarkResult.getProblemBenchmarkResult();
      originalProblemStatisticMap.putIfAbsent(problemBenchmarkResult,problemBenchmarkResult.getProblemStatisticList());
      singleBenchmarkResult.getProblemBenchmarkResult().setProblemStatisticList(Collections.<ProblemStatistic>emptyList());
      for (      SubSingleBenchmarkResult subSingleBenchmarkResult : singleBenchmarkResult.getSubSingleBenchmarkResultList()) {
        subSingleBenchmarkResult.setPureSubSingleStatisticList(Collections.<PureSubSingleStatistic>emptyList());
        subSingleBenchmarkResult.initSubSingleStatisticMap();
      }
    }
    WarmUpConfigBackup warmUpConfigBackupPutResult=warmUpConfigBackupMap.put(solverBenchmarkResult,warmUpConfigBackup);
    if (warmUpConfigBackupPutResult != null) {
      throw new IllegalStateException("WarmUpConfigBackupMap already contained key (" + solverBenchmarkResult + ") with value ("+ warmUpConfigBackupPutResult+ ").");
    }
  }
  return warmUpConfigBackupMap;
}
