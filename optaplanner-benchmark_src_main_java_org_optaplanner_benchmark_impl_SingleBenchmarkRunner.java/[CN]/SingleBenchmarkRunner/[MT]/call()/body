{
  Runtime runtime=Runtime.getRuntime();
  ProblemBenchmark problemBenchmark=singleBenchmark.getProblemBenchmark();
  SolverBenchmark solverBenchmark=singleBenchmark.getSolverBenchmark();
  Solution inputSolution=problemBenchmark.readPlanningProblem();
  if (!problemBenchmark.getPlannerBenchmark().hasMultipleParallelBenchmarks()) {
    runtime.gc();
    singleBenchmark.setUsedMemoryAfterInputSolution(runtime.totalMemory() - runtime.freeMemory());
  }
  logger.trace("Benchmark inputSolution has been read for singleBenchmark ({}_{}).",problemBenchmark.getName(),solverBenchmark.getName());
  Solver solver=solverBenchmark.getSolverConfig().buildSolver();
  for (  SingleStatistic singleStatistic : singleBenchmark.getSingleStatisticMap().values()) {
    singleStatistic.open(solver);
  }
  solver.setPlanningProblem(inputSolution);
  solver.solve();
  long timeMillisSpend=solver.getTimeMillisSpend();
  Solution outputSolution=solver.getBestSolution();
  SolutionDescriptor solutionDescriptor=((DefaultSolver)solver).getSolutionDescriptor();
  singleBenchmark.setPlanningEntityCount(solutionDescriptor.getEntityCount(outputSolution));
  problemBenchmark.registerProblemScale(solutionDescriptor.getProblemScale(outputSolution));
  singleBenchmark.setScore(outputSolution.getScore());
  singleBenchmark.setTimeMillisSpend(timeMillisSpend);
  DefaultSolverScope solverScope=((DefaultSolver)solver).getSolverScope();
  singleBenchmark.setCalculateCount(solverScope.getCalculateCount());
  for (  SingleStatistic singleStatistic : singleBenchmark.getSingleStatisticMap().values()) {
    singleStatistic.close(solver);
    singleStatistic.writeCsvStatisticFile();
  }
  problemBenchmark.writeOutputSolution(singleBenchmark,outputSolution);
  return this;
}
