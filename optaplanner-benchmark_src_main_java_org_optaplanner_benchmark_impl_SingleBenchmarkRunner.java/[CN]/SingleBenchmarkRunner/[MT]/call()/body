{
  Runtime runtime=Runtime.getRuntime();
  ProblemBenchmarkResult problemBenchmarkResult=singleBenchmarkResult.getProblemBenchmarkResult();
  Solution inputSolution=problemBenchmarkResult.readPlanningProblem();
  if (!problemBenchmarkResult.getPlannerBenchmark().hasMultipleParallelBenchmarks()) {
    runtime.gc();
    singleBenchmarkResult.setUsedMemoryAfterInputSolution(runtime.totalMemory() - runtime.freeMemory());
  }
  logger.trace("Benchmark inputSolution has been read for singleBenchmarkResult ({}).",singleBenchmarkResult.getName());
  Solver solver=singleBenchmarkResult.getSolverBenchmarkResult().getSolverConfig().buildSolver();
  for (  SingleStatistic singleStatistic : singleBenchmarkResult.getSingleStatisticMap().values()) {
    singleStatistic.open(solver);
  }
  solver.setPlanningProblem(inputSolution);
  solver.solve();
  long timeMillisSpend=solver.getTimeMillisSpend();
  Solution outputSolution=solver.getBestSolution();
  SolutionDescriptor solutionDescriptor=((DefaultSolver)solver).getSolutionDescriptor();
  singleBenchmarkResult.setPlanningEntityCount(solutionDescriptor.getEntityCount(outputSolution));
  problemBenchmarkResult.registerProblemScale(solutionDescriptor.getProblemScale(outputSolution));
  singleBenchmarkResult.setScore(outputSolution.getScore());
  singleBenchmarkResult.setTimeMillisSpend(timeMillisSpend);
  DefaultSolverScope solverScope=((DefaultSolver)solver).getSolverScope();
  singleBenchmarkResult.setCalculateCount(solverScope.getCalculateCount());
  for (  SingleStatistic singleStatistic : singleBenchmarkResult.getSingleStatisticMap().values()) {
    singleStatistic.close(solver);
    singleStatistic.writeCsvStatisticFile();
  }
  problemBenchmarkResult.writeOutputSolution(singleBenchmarkResult,outputSolution);
  return this;
}
