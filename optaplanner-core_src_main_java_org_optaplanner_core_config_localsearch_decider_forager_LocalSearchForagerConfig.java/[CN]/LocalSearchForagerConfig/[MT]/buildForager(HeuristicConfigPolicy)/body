{
  if (foragerClass != null) {
    if (pickEarlyType != null || acceptedCountLimit != null || finalistPodiumType != null) {
      throw new IllegalArgumentException("The foragerConfig with foragerClass (" + foragerClass + ") must not also have a pickEarlyType ("+ pickEarlyType+ "), acceptedCountLimit ("+ acceptedCountLimit+ ") or finalistPodiumType ("+ finalistPodiumType+ ").");
    }
    return ConfigUtils.newInstance(this,"foragerClass",foragerClass);
  }
  LocalSearchPickEarlyType pickEarlyType_=(pickEarlyType == null) ? LocalSearchPickEarlyType.NEVER : pickEarlyType;
  int acceptedCountLimit_=(acceptedCountLimit == null) ? Integer.MAX_VALUE : acceptedCountLimit;
  FinalistPodium finalistPodium=finalistPodiumType == null ? new HighestScoreFinalistPodium() : finalistPodiumType.buildFinalistPodium();
  return new AcceptedForager(finalistPodium,pickEarlyType_,acceptedCountLimit_);
}
