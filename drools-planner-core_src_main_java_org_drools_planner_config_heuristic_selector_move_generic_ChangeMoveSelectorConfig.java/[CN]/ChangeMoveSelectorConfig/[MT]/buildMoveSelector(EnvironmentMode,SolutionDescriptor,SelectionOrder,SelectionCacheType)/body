{
  SelectionOrder resolvedSelectionOrder=SelectionOrder.resolve(selectionOrder,inheritedSelectionOrder);
  SelectionCacheType resolvedCacheType=SelectionCacheType.resolve(cacheType,inheritedCacheType);
  boolean randomSelection;
  boolean shuffled;
  if (resolvedSelectionOrder != SelectionOrder.RANDOM) {
    randomSelection=false;
    shuffled=false;
  }
 else {
    if (resolvedCacheType.compareTo(SelectionCacheType.STEP) >= 0) {
      randomSelection=false;
      shuffled=true;
      resolvedSelectionOrder=SelectionOrder.ORIGINAL;
    }
 else {
      randomSelection=true;
      shuffled=false;
    }
  }
  EntitySelector entitySelector=entitySelectorConfig.buildEntitySelector(environmentMode,solutionDescriptor,resolvedSelectionOrder,resolvedCacheType);
  ValueSelector valueSelector=valueSelectorConfig.buildValueSelector(environmentMode,solutionDescriptor,resolvedSelectionOrder,resolvedCacheType,entitySelector.getEntityDescriptor());
  MoveSelector moveSelector=new ChangeMoveSelector(entitySelector,valueSelector,randomSelection);
  if (moveFilterClass != null) {
    SelectionFilter moveFilter;
    try {
      moveFilter=moveFilterClass.newInstance();
    }
 catch (    InstantiationException e) {
      throw new IllegalArgumentException("moveFilterClass (" + moveFilterClass.getName() + ") does not have a public no-arg constructor",e);
    }
catch (    IllegalAccessException e) {
      throw new IllegalArgumentException("moveFilterClass (" + moveFilterClass.getName() + ") does not have a public no-arg constructor",e);
    }
    FilteringMoveSelector filteringMoveSelector=new FilteringMoveSelector(moveSelector,resolvedCacheType,moveFilter);
    moveSelector=filteringMoveSelector;
  }
  if (shuffled) {
    moveSelector=new ShufflingMoveSelector(moveSelector,resolvedCacheType);
  }
  return moveSelector;
}
