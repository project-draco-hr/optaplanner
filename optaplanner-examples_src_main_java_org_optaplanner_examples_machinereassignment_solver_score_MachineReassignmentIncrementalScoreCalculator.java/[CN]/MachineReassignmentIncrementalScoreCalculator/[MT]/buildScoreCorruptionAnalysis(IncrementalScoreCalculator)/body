{
  MachineReassignmentIncrementalScoreCalculator other=(MachineReassignmentIncrementalScoreCalculator)uncorruptedIncrementalScoreCalculator;
  StringBuilder analysis=new StringBuilder();
  if (!serviceScorePartMap.keySet().equals(other.serviceScorePartMap.keySet())) {
    Collection excess=CollectionUtils.subtract(serviceScorePartMap.keySet(),other.serviceScorePartMap.keySet());
    Collection lacking=CollectionUtils.subtract(other.serviceScorePartMap.keySet(),serviceScorePartMap.keySet());
    analysis.append("  The serviceScorePartMap has in excess (").append(excess).append(") and is lacking (").append(lacking).append(").\n");
  }
 else {
    for (    Map.Entry<MrService,MrServiceScorePart> entry : serviceScorePartMap.entrySet()) {
      MrService service=entry.getKey();
      MrServiceScorePart part=entry.getValue();
      MrServiceScorePart otherPart=other.serviceScorePartMap.get(service);
      if (!part.locationBag.equals(otherPart.locationBag)) {
        Collection excess=CollectionUtils.subtract(part.locationBag.values(),otherPart.locationBag.values());
        Collection lacking=CollectionUtils.subtract(otherPart.locationBag.values(),part.locationBag.values());
        analysis.append("  On service (").append(service).append(") the locationBag has in excess (").append(excess).append(") and is lacking (").append(lacking).append(").\n");
      }
      if (!part.neighborhoodBag.equals(otherPart.neighborhoodBag)) {
        Collection excess=CollectionUtils.subtract(part.neighborhoodBag.values(),otherPart.neighborhoodBag.values());
        Collection lacking=CollectionUtils.subtract(otherPart.neighborhoodBag.values(),part.neighborhoodBag.values());
        analysis.append("  On service (").append(service).append(") the neighborhoodBag has in excess (").append(excess).append(") and is lacking (").append(lacking).append(").\n");
      }
      if (part.movedProcessCount != otherPart.movedProcessCount) {
        analysis.append("  On service (").append(service).append(") the movedProcessCount (").append(part.movedProcessCount).append(") is not correct (").append(otherPart.movedProcessCount).append(").\n");
      }
    }
  }
  return analysis.toString();
}
