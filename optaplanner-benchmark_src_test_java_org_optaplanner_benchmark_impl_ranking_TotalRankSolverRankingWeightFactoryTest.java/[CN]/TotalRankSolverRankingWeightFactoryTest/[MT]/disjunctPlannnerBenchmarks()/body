{
  addSingleBenchmark(aSingleBenchmarkResultList,-1000,-30,-1000);
  addSingleBenchmark(aSingleBenchmarkResultList,-400,-30,-1000);
  addSingleBenchmark(aSingleBenchmarkResultList,-30,-30,-1000);
  a.setSingleBenchmarkResultList(aSingleBenchmarkResultList);
  a.accumulateResults(benchmarkReport);
  solverBenchmarkResultList.add(a);
  addSingleBenchmark(bSingleBenchmarkResultList,-2000,-30,-2000);
  addSingleBenchmark(bSingleBenchmarkResultList,-200,-30,-2000);
  addSingleBenchmark(bSingleBenchmarkResultList,-30,-30,-2000);
  b.setSingleBenchmarkResultList(bSingleBenchmarkResultList);
  b.accumulateResults(benchmarkReport);
  solverBenchmarkResultList.add(b);
  for (  SolverBenchmarkResult solverBenchmarkResult : solverBenchmarkResultList) {
    for (    SingleBenchmarkResult singleBenchmarkResult : solverBenchmarkResult.getSingleBenchmarkResultList()) {
      addProblemBenchmark(Arrays.asList(singleBenchmarkResult));
    }
  }
  Comparable aWeight=factory.createRankingWeight(solverBenchmarkResultList,a);
  Comparable bWeight=factory.createRankingWeight(solverBenchmarkResultList,b);
  assertEquals(1,aWeight.compareTo(bWeight));
  assertEquals(-1,bWeight.compareTo(aWeight));
}
