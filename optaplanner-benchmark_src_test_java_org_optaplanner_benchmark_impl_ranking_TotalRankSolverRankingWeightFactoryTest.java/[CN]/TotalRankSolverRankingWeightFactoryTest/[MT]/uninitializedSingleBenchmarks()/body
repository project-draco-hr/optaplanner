{
  SingleBenchmarkResult a0=addSingleBenchmark(aSingleBenchmarkResultList,-1000,-30,-1000);
  addSingleBenchmark(aSingleBenchmarkResultList,-400,-30,-1000);
  addSingleBenchmark(aSingleBenchmarkResultList,-30,-30,-1000);
  a.setSingleBenchmarkResultList(aSingleBenchmarkResultList);
  a.accumulateResults(benchmarkReport);
  solverBenchmarkResultList.add(a);
  SingleBenchmarkResult b0=addSingleBenchmark(bSingleBenchmarkResultList,-1000,-30,-1000);
  SingleBenchmarkResult b1=addSingleBenchmark(bSingleBenchmarkResultList,-400,-30,-1000);
  addSingleBenchmark(bSingleBenchmarkResultList,-30,-30,-1000);
  b.setSingleBenchmarkResultList(bSingleBenchmarkResultList);
  b.accumulateResults(benchmarkReport);
  solverBenchmarkResultList.add(b);
  List<SingleBenchmarkResult> totalSingleBenchmarkResultList=new ArrayList<>(aSingleBenchmarkResultList);
  totalSingleBenchmarkResultList.addAll(bSingleBenchmarkResultList);
  addProblemBenchmark(totalSingleBenchmarkResultList);
  Comparable aWeight=factory.createRankingWeight(solverBenchmarkResultList,a);
  Comparable bWeight=factory.createRankingWeight(solverBenchmarkResultList,b);
  assertCompareToEquals(aWeight,bWeight);
  a0.setAverageScore(SimpleScore.valueOf(-100,-1000));
  b0.setAverageScore(SimpleScore.valueOf(-100,-1000));
  a.accumulateResults(benchmarkReport);
  b.accumulateResults(benchmarkReport);
  assertCompareToEquals(aWeight,bWeight);
  b0.setAverageScore(SimpleScore.valueOfInitialized(-1000));
  b1.setAverageScore(SimpleScore.valueOf(-100,-400));
  b.accumulateResults(benchmarkReport);
  assertCompareToOrder(aWeight,bWeight);
  b1.setAverageScore(SimpleScore.valueOf(-101,-400));
  b.accumulateResults(benchmarkReport);
  assertCompareToOrder(bWeight,aWeight);
}
