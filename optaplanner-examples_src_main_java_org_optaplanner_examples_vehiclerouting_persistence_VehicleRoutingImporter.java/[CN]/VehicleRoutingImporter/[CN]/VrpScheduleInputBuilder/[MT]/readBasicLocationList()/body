{
  boolean roadDistance=solution.getDistanceType() == DistanceType.ROAD_DISTANCE;
  readConstantLine("NODE_COORD_SECTION");
  List<Location> locationList=new ArrayList<Location>(locationListSize);
  locationMap=new HashMap<Long,Location>(locationListSize);
  for (int i=0; i < locationListSize; i++) {
    String line=bufferedReader.readLine();
    String[] lineTokens=splitBySpacesOrTabs(line.trim(),3);
    Location location=roadDistance ? new RoadDistanceLocation() : new AirDistanceLocation();
    location.setId(Long.parseLong(lineTokens[0]));
    location.setLatitude(Double.parseDouble(lineTokens[1]));
    location.setLongitude(Double.parseDouble(lineTokens[2]));
    if (lineTokens.length >= 4) {
      location.setName(lineTokens[3]);
    }
    locationList.add(location);
    locationMap.put(location.getId(),location);
  }
  solution.setLocationList(locationList);
  if (roadDistance) {
    readConstantLine("EDGE_WEIGHT_SECTION");
    for (int i=0; i < locationListSize; i++) {
      RoadDistanceLocation location=(RoadDistanceLocation)locationList.get(i);
      HashMap<RoadDistanceLocation,Double> travelDistanceMap=new HashMap<RoadDistanceLocation,Double>(locationListSize);
      String line=bufferedReader.readLine();
      String[] lineTokens=splitBySpacesOrTabs(line.trim(),locationListSize);
      for (int j=0; j < locationListSize; j++) {
        double travelDistance=Double.parseDouble(lineTokens[j]);
        if (i == j) {
          if (travelDistance != 0.0) {
            throw new IllegalStateException("The travelDistance (" + travelDistance + ") should be zero.");
          }
        }
 else {
          RoadDistanceLocation otherLocation=(RoadDistanceLocation)locationList.get(j);
          travelDistanceMap.put(otherLocation,travelDistance);
        }
      }
      location.setTravelDistanceMap(travelDistanceMap);
    }
  }
}
