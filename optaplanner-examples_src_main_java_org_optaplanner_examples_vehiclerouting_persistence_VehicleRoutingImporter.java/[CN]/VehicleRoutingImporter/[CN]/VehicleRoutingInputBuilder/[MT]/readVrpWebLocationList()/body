{
  DistanceType distanceType=solution.getDistanceType();
  List<HubSegmentLocation> hubLocationList=null;
  Map<Long,HubSegmentLocation> hubLocationMap=null;
  if (distanceType == DistanceType.SEGMENTED_ROAD_DISTANCE) {
    int hubListSize=readIntegerValue("HUBS *:");
    hubLocationList=new ArrayList<HubSegmentLocation>(hubListSize);
    hubLocationMap=new HashMap<Long,HubSegmentLocation>(hubListSize);
    readConstantLine("HUB_COORD_SECTION");
    for (int i=0; i < hubListSize; i++) {
      String line=bufferedReader.readLine();
      String[] lineTokens=splitBySpacesOrTabs(line.trim(),3,4);
      HubSegmentLocation location=new HubSegmentLocation();
      location.setId(Long.parseLong(lineTokens[0]));
      location.setLatitude(Double.parseDouble(lineTokens[1]));
      location.setLongitude(Double.parseDouble(lineTokens[2]));
      if (lineTokens.length >= 4) {
        location.setName(lineTokens[3]);
      }
      hubLocationList.add(location);
      hubLocationMap.put(location.getId(),location);
    }
  }
  List<Location> locationList=new ArrayList<Location>(customerListSize);
  locationMap=new HashMap<Long,Location>(customerListSize);
  readConstantLine("NODE_COORD_SECTION");
  for (int i=0; i < customerListSize; i++) {
    String line=bufferedReader.readLine();
    String[] lineTokens=splitBySpacesOrTabs(line.trim(),3,4);
    Location location;
switch (distanceType) {
case AIR_DISTANCE:
      location=new AirLocation();
    break;
case ROAD_DISTANCE:
  location=new RoadLocation();
break;
case SEGMENTED_ROAD_DISTANCE:
location=new RoadSegmentLocation();
break;
default :
throw new IllegalStateException("The distanceType (" + distanceType + ") is not implemented.");
}
location.setId(Long.parseLong(lineTokens[0]));
location.setLatitude(Double.parseDouble(lineTokens[1]));
location.setLongitude(Double.parseDouble(lineTokens[2]));
if (lineTokens.length >= 4) {
location.setName(lineTokens[3]);
}
locationList.add(location);
locationMap.put(location.getId(),location);
}
if (distanceType == DistanceType.ROAD_DISTANCE) {
readConstantLine("EDGE_WEIGHT_SECTION");
for (int i=0; i < customerListSize; i++) {
RoadLocation location=(RoadLocation)locationList.get(i);
HashMap<RoadLocation,Double> travelDistanceMap=new HashMap<RoadLocation,Double>(customerListSize);
String line=bufferedReader.readLine();
String[] lineTokens=splitBySpacesOrTabs(line.trim(),customerListSize);
for (int j=0; j < customerListSize; j++) {
double travelDistance=Double.parseDouble(lineTokens[j]);
if (i == j) {
if (travelDistance != 0.0) {
throw new IllegalStateException("The travelDistance (" + travelDistance + ") should be zero.");
}
}
 else {
RoadLocation otherLocation=(RoadLocation)locationList.get(j);
travelDistanceMap.put(otherLocation,travelDistance);
}
}
location.setTravelDistanceMap(travelDistanceMap);
}
}
if (distanceType == DistanceType.SEGMENTED_ROAD_DISTANCE) {
locationList.addAll(hubLocationList);
}
solution.setLocationList(locationList);
}
