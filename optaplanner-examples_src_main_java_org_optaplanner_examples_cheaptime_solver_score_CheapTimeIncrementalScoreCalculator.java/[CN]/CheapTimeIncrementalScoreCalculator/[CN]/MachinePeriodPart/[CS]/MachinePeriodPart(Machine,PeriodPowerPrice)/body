{
  this.machine=machine;
  this.period=periodPowerPrice.getPeriod();
  this.periodPowerPriceMicros=periodPowerPrice.getPowerPriceMicros();
  taskCount=0;
  status=MachinePeriodStatus.OFF;
  if (machine != null) {
    resourceAvailableList=new int[resourceListSize];
    for (int i=0; i < resourceListSize; i++) {
      resourceAvailableList[i]=machine.getMachineCapacityList().get(i).getCapacity();
    }
    machineCostMicros=CheapTimeCostCalculator.multiplyTwoMicros(machine.getPowerConsumptionMicros(),periodPowerPriceMicros);
  }
 else {
    machineCostMicros=Long.MIN_VALUE;
  }
}
