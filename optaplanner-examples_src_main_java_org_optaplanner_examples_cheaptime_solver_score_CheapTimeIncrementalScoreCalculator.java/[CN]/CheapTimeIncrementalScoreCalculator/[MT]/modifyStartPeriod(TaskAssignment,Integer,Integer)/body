{
  if (ObjectUtils.equals(oldStartPeriod,newStartPeriod)) {
    return;
  }
  Task task=taskAssignment.getTask();
  int duration=task.getDuration();
  int retractStart;
  int retractEnd;
  int insertStart;
  int insertEnd;
  if (oldStartPeriod == null) {
    retractStart=-1;
    retractEnd=-1;
    insertStart=newStartPeriod;
    insertEnd=insertStart + duration;
  }
 else   if (newStartPeriod == null) {
    retractStart=oldStartPeriod;
    retractEnd=retractStart + duration;
    insertStart=-1;
    insertEnd=-1;
  }
 else {
    retractStart=oldStartPeriod;
    retractEnd=retractStart + duration;
    insertStart=newStartPeriod;
    insertEnd=insertStart + duration;
    if (oldStartPeriod < newStartPeriod) {
      if (insertStart < retractEnd) {
        int overlap=retractEnd - insertStart;
        retractEnd-=overlap;
        insertStart+=overlap;
      }
    }
 else {
      if (retractStart < insertEnd) {
        int overlap=insertEnd - retractStart;
        insertEnd-=overlap;
        retractStart+=overlap;
      }
    }
  }
  if (oldStartPeriod != null) {
    softScore+=oldStartPeriod;
  }
  if (newStartPeriod != null) {
    softScore-=newStartPeriod;
  }
  Machine machine=taskAssignment.getMachine();
  MachinePeriodPart[] machinePeriodList;
  if (machine != null) {
    machinePeriodList=machineToMachinePeriodListMap[machine.getIndex()];
  }
 else {
    machinePeriodList=unassignedMachinePeriodList;
  }
  if (retractStart != retractEnd) {
    retractRange(taskAssignment,machinePeriodList,retractStart,retractEnd,true);
  }
  if (insertStart != insertEnd) {
    insertRange(taskAssignment,machinePeriodList,insertStart,insertEnd,true);
  }
}
