{
  TestdataValue v1=new TestdataValue("1");
  TestdataValue v2=new TestdataValue("2");
  TestdataValue v3=new TestdataValue("3");
  TestdataValue v4=new TestdataValue("4");
  TestdataValue v5=new TestdataValue("5");
  TestdataEntityProvidingEntity a=new TestdataEntityProvidingEntity("a",Arrays.asList(v1,v2,v3),null);
  TestdataEntityProvidingEntity b=new TestdataEntityProvidingEntity("b",Arrays.asList(v2,v3,v4,v5),null);
  TestdataEntityProvidingEntity c=new TestdataEntityProvidingEntity("c",Arrays.asList(v4,v5),null);
  TestdataEntityProvidingEntity z=new TestdataEntityProvidingEntity("z",Arrays.asList(v1,v2,v3,v4,v5),null);
  ScoreDirector scoreDirector=mock(ScoreDirector.class);
  List<GenuineVariableDescriptor> variableDescriptorList=TestdataEntityProvidingEntity.buildEntityDescriptor().getGenuineVariableDescriptorList();
  PillarSwapMove abMove=new PillarSwapMove(variableDescriptorList,Arrays.<Object>asList(a),Arrays.<Object>asList(b));
  a.setValue(v1);
  b.setValue(v2);
  assertEquals(false,abMove.isMoveDoable(scoreDirector));
  a.setValue(v2);
  b.setValue(v2);
  assertEquals(false,abMove.isMoveDoable(scoreDirector));
  a.setValue(v2);
  b.setValue(v3);
  assertEquals(true,abMove.isMoveDoable(scoreDirector));
  a.setValue(v3);
  b.setValue(v2);
  assertEquals(true,abMove.isMoveDoable(scoreDirector));
  a.setValue(v3);
  b.setValue(v3);
  assertEquals(false,abMove.isMoveDoable(scoreDirector));
  a.setValue(v2);
  b.setValue(v4);
  assertEquals(false,abMove.isMoveDoable(scoreDirector));
  PillarSwapMove acMove=new PillarSwapMove(variableDescriptorList,Arrays.<Object>asList(a),Arrays.<Object>asList(c));
  a.setValue(v1);
  c.setValue(v4);
  assertEquals(false,acMove.isMoveDoable(scoreDirector));
  a.setValue(v2);
  c.setValue(v5);
  assertEquals(false,acMove.isMoveDoable(scoreDirector));
  PillarSwapMove bcMove=new PillarSwapMove(variableDescriptorList,Arrays.<Object>asList(b),Arrays.<Object>asList(c));
  b.setValue(v2);
  c.setValue(v4);
  assertEquals(false,bcMove.isMoveDoable(scoreDirector));
  b.setValue(v4);
  c.setValue(v5);
  assertEquals(true,bcMove.isMoveDoable(scoreDirector));
  b.setValue(v5);
  c.setValue(v4);
  assertEquals(true,bcMove.isMoveDoable(scoreDirector));
  b.setValue(v5);
  c.setValue(v5);
  assertEquals(false,bcMove.isMoveDoable(scoreDirector));
  PillarSwapMove abzMove=new PillarSwapMove(variableDescriptorList,Arrays.<Object>asList(a,b),Arrays.<Object>asList(z));
  a.setValue(v2);
  b.setValue(v2);
  z.setValue(v4);
  assertEquals(false,abzMove.isMoveDoable(scoreDirector));
  a.setValue(v2);
  b.setValue(v2);
  z.setValue(v1);
  assertEquals(false,abzMove.isMoveDoable(scoreDirector));
  a.setValue(v2);
  b.setValue(v2);
  z.setValue(v3);
  assertEquals(true,abzMove.isMoveDoable(scoreDirector));
  a.setValue(v3);
  b.setValue(v3);
  z.setValue(v2);
  assertEquals(true,abzMove.isMoveDoable(scoreDirector));
  a.setValue(v2);
  b.setValue(v2);
  z.setValue(v2);
  assertEquals(false,abzMove.isMoveDoable(scoreDirector));
}
