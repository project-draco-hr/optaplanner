{
  SelectionOrder defaultSelectionOrder=SelectionOrder.ORIGINAL;
  EntitySelectorConfig entitySelectorConfig_;
  String entitySelectorId="undefined";
  if (entitySelectorConfig == null) {
    entitySelectorConfig_=new EntitySelectorConfig();
    PlanningEntityDescriptor entityDescriptor=deduceEntityDescriptor(configPolicy.getSolutionDescriptor());
    Class<?> entityClass=entityDescriptor.getEntityClass();
    entitySelectorId=entityClass.getName();
    entitySelectorConfig_.setId(entitySelectorId);
    entitySelectorConfig_.setEntityClass(entityClass);
    if (configPolicy.isSortEntitiesByDecreasingDifficultyEnabled()) {
      entitySelectorConfig_.setCacheType(SelectionCacheType.PHASE);
      entitySelectorConfig_.setSelectionOrder(SelectionOrder.SORTED);
      entitySelectorConfig_.setSorterManner(EntitySelectorConfig.EntitySorterManner.DECREASING_DIFFICULTY);
    }
  }
 else {
    entitySelectorConfig_=entitySelectorConfig;
  }
  if (entitySelectorConfig_.getCacheType() != null && entitySelectorConfig_.getCacheType().compareTo(SelectionCacheType.PHASE) < 0) {
    throw new IllegalArgumentException("The queuedEntityPlacer (" + this + ") cannot have an entitySelectorConfig ("+ entitySelectorConfig+ ") with a cacheType ("+ entitySelectorConfig_.getCacheType()+ ") lower than "+ SelectionCacheType.PHASE+ ".");
  }
  EntitySelector entitySelector=entitySelectorConfig_.buildEntitySelector(configPolicy,SelectionCacheType.PHASE,defaultSelectionOrder);
  List<MoveSelectorConfig> moveSelectorConfigList_;
  if (CollectionUtils.isEmpty(moveSelectorConfigList)) {
    PlanningEntityDescriptor entityDescriptor=entitySelector.getEntityDescriptor();
    Collection<PlanningVariableDescriptor> variableDescriptors=entityDescriptor.getVariableDescriptors();
    List<MoveSelectorConfig> subMoveSelectorConfigList=new ArrayList<MoveSelectorConfig>(variableDescriptors.size());
    for (    PlanningVariableDescriptor variableDescriptor : variableDescriptors) {
      ChangeMoveSelectorConfig changeMoveSelectorConfig=new ChangeMoveSelectorConfig();
      EntitySelectorConfig changeEntitySelectorConfig=new EntitySelectorConfig();
      changeEntitySelectorConfig.setMimicSelectorRef(entitySelectorId);
      changeMoveSelectorConfig.setEntitySelectorConfig(changeEntitySelectorConfig);
      ValueSelectorConfig changeValueSelectorConfig=new ValueSelectorConfig();
      changeValueSelectorConfig.setVariableName(variableDescriptor.getVariableName());
      if (configPolicy.isSortValuesByIncreasingStrengthEnabled()) {
        if (variableDescriptor.getValueRangeDescriptor().isEntityIndependent()) {
          changeValueSelectorConfig.setCacheType(SelectionCacheType.PHASE);
        }
 else {
          changeValueSelectorConfig.setCacheType(SelectionCacheType.STEP);
        }
        changeValueSelectorConfig.setSelectionOrder(SelectionOrder.SORTED);
        changeValueSelectorConfig.setSorterManner(ValueSelectorConfig.ValueSorterManner.INCREASING_STRENGTH);
      }
      changeMoveSelectorConfig.setValueSelectorConfig(changeValueSelectorConfig);
      subMoveSelectorConfigList.add(changeMoveSelectorConfig);
    }
    if (true) {
      moveSelectorConfigList_=Collections.<MoveSelectorConfig>singletonList(new CartesianProductMoveSelectorConfig(subMoveSelectorConfigList));
    }
 else {
      moveSelectorConfigList_=subMoveSelectorConfigList;
    }
  }
 else {
    moveSelectorConfigList_=moveSelectorConfigList;
  }
  List<MoveSelector> moveSelectorList=new ArrayList<MoveSelector>(moveSelectorConfigList_.size());
  for (  MoveSelectorConfig moveSelectorConfig : moveSelectorConfigList_) {
    moveSelectorList.add(moveSelectorConfig.buildMoveSelector(configPolicy,SelectionCacheType.JUST_IN_TIME,defaultSelectionOrder));
  }
  return new QueuedEntityPlacer(entitySelector,moveSelectorList);
}
