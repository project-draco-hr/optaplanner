{
  int machineListSize=readIntegerValue();
  List<Machine> machineList=new ArrayList<>(machineListSize);
  List<MachineCapacity> machineCapacityList=new ArrayList<>(machineListSize * resourceListSize);
  long machineCapacityId=0L;
  for (int i=0; i < machineListSize; i++) {
    Machine machine=new Machine();
    String[] machineLineTokens=splitBySpacesOrTabs(readStringValue(),4);
    machine.setId(Long.parseLong(machineLineTokens[0]));
    machine.setIndex(i);
    machine.setPowerConsumptionMicros(CheapTimeCostCalculator.parseMicroCost(machineLineTokens[1]));
    machine.setSpinUpDownCostMicros(CheapTimeCostCalculator.parseMicroCost(machineLineTokens[2]) + CheapTimeCostCalculator.parseMicroCost(machineLineTokens[3]));
    String[] capacityLineTokens=splitBySpacesOrTabs(readStringValue(),resourceListSize);
    List<MachineCapacity> machineCapacityListOfMachine=new ArrayList<>(resourceListSize);
    for (int j=0; j < resourceListSize; j++) {
      MachineCapacity machineCapacity=new MachineCapacity();
      machineCapacity.setId(machineCapacityId);
      machineCapacityId++;
      machineCapacity.setMachine(machine);
      machineCapacity.setResource(solution.getResourceList().get(j));
      machineCapacity.setCapacity(Integer.parseInt(capacityLineTokens[j]));
      machineCapacityList.add(machineCapacity);
      machineCapacityListOfMachine.add(machineCapacity);
    }
    machine.setMachineCapacityList(machineCapacityListOfMachine);
    machineList.add(machine);
  }
  solution.setMachineList(machineList);
  solution.setMachineCapacityList(machineCapacityList);
}
