{
  solution=new CheapTimeSolution();
  solution.setId(0L);
  int timeResolutionInMinutes=readIntegerValue();
  solution.setTimeResolutionInMinutes(timeResolutionInMinutes);
  solution.setGlobalPeriodRangeFrom(0);
  solution.setGlobalPeriodRangeTo(((24 * 60) / timeResolutionInMinutes));
  readResourceList();
  readMachineList();
  readTaskList();
  readForecastFile();
  createTaskAssignmentList();
  BigInteger possibleSolutionSize=BigInteger.ONE;
  for (  Task task : solution.getTaskList()) {
    possibleSolutionSize=possibleSolutionSize.multiply(BigInteger.valueOf(task.getStartPeriodRangeTo() - task.getStartPeriodRangeFrom()));
  }
  possibleSolutionSize=possibleSolutionSize.multiply(BigInteger.valueOf(solution.getMachineList().size()).pow(solution.getTaskList().size()));
  logger.info("CheapTime {} has {} resources, {} machines, {} periods and {} tasks" + " with a search space of {}.",getInputId(),solution.getResourceList().size(),solution.getMachineList().size(),solution.getGlobalPeriodRangeTo(),solution.getTaskList().size(),getFlooredPossibleSolutionSize(possibleSolutionSize));
  return solution;
}
