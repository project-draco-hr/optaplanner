{
  TestdataMappedByChainedAnchor a0=new TestdataMappedByChainedAnchor("a0");
  TestdataMappedByChainedEntity a1=new TestdataMappedByChainedEntity("a1",a0);
  a0.setNextEntity(a1);
  TestdataMappedByChainedEntity a2=new TestdataMappedByChainedEntity("a2",a1);
  a1.setNextEntity(a2);
  TestdataMappedByChainedEntity a3=new TestdataMappedByChainedEntity("a3",a2);
  a2.setNextEntity(a3);
  TestdataMappedByChainedAnchor b0=new TestdataMappedByChainedAnchor("b0");
  TestdataMappedByChainedEntity b1=new TestdataMappedByChainedEntity("b1",b0);
  b0.setNextEntity(b1);
  TestdataMappedByChainedSolution solution=new TestdataMappedByChainedSolution("solution");
  List<TestdataMappedByChainedAnchor> anchorList=Arrays.asList(a0,b0);
  solution.setChainedAnchorList(anchorList);
  List<TestdataMappedByChainedEntity> originalEntityList=Arrays.asList(a1,a2,a3,b1);
  solution.setChainedEntityList(originalEntityList);
  SolutionDescriptor solutionDescriptor=TestdataMappedByChainedSolution.buildSolutionDescriptor();
  IncrementalScoreDirectorFactory scoreDirectorFactory=mock(IncrementalScoreDirectorFactory.class);
  when(scoreDirectorFactory.getSolutionDescriptor()).thenReturn(solutionDescriptor);
  IncrementalScoreCalculator incrementalScoreCalculator=mock(IncrementalScoreCalculator.class);
  IncrementalScoreDirector scoreDirector=new IncrementalScoreDirector(scoreDirectorFactory,incrementalScoreCalculator){
    public Score calculateScore(){
      return SimpleScore.valueOf(-100);
    }
  }
;
  scoreDirector.setWorkingSolution(solution);
  reset(incrementalScoreCalculator);
  assertEquals(null,b1.getNextEntity());
  scoreDirector.beforeVariableChanged(a3,"chainedObject");
  a3.setChainedObject(b1);
  scoreDirector.afterVariableChanged(a3,"chainedObject");
  assertEquals(a3,b1.getNextEntity());
  InOrder inOrder=inOrder(incrementalScoreCalculator);
  inOrder.verify(incrementalScoreCalculator,times(1)).beforeVariableChanged(a3,"chainedObject");
  inOrder.verify(incrementalScoreCalculator,times(1)).afterVariableChanged(a3,"chainedObject");
  inOrder.verify(incrementalScoreCalculator,times(1)).beforeVariableChanged(b1,"nextEntity");
  inOrder.verify(incrementalScoreCalculator,times(1)).afterVariableChanged(b1,"nextEntity");
  inOrder.verifyNoMoreInteractions();
}
