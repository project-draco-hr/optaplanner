{
  TestdataRichChainedAnchor a0=new TestdataRichChainedAnchor("a0");
  TestdataRichChainedEntity a1=new TestdataRichChainedEntity("a1",a0);
  a0.setNextEntity(a1);
  TestdataRichChainedEntity a2=new TestdataRichChainedEntity("a2",a1);
  a1.setNextEntity(a2);
  TestdataRichChainedEntity a3=new TestdataRichChainedEntity("a3",a2);
  a2.setNextEntity(a3);
  TestdataRichChainedAnchor b0=new TestdataRichChainedAnchor("b0");
  TestdataRichChainedEntity b1=new TestdataRichChainedEntity("b1",b0);
  b0.setNextEntity(b1);
  TestdataRichChainedSolution solution=new TestdataRichChainedSolution("solution");
  List<TestdataRichChainedAnchor> anchorList=Arrays.asList(a0,b0);
  solution.setChainedAnchorList(anchorList);
  List<TestdataRichChainedEntity> originalEntityList=Arrays.asList(a1,a2,a3,b1);
  solution.setChainedEntityList(originalEntityList);
  SolutionDescriptor solutionDescriptor=TestdataRichChainedSolution.buildSolutionDescriptor();
  IncrementalScoreDirectorFactory scoreDirectorFactory=mock(IncrementalScoreDirectorFactory.class);
  when(scoreDirectorFactory.getSolutionDescriptor()).thenReturn(solutionDescriptor);
  IncrementalScoreCalculator incrementalScoreCalculator=mock(IncrementalScoreCalculator.class);
  IncrementalScoreDirector scoreDirector=new IncrementalScoreDirector(scoreDirectorFactory,false,incrementalScoreCalculator){
    public Score calculateScore(){
      return SimpleScore.valueOf(-100);
    }
  }
;
  scoreDirector.setWorkingSolution(solution);
  reset(incrementalScoreCalculator);
  assertEquals(null,b1.getNextEntity());
  scoreDirector.beforeVariableChanged(a3,"chainedObject");
  a3.setChainedObject(b1);
  scoreDirector.afterVariableChanged(a3,"chainedObject");
  assertEquals(a3,b1.getNextEntity());
  InOrder inOrder=inOrder(incrementalScoreCalculator);
  inOrder.verify(incrementalScoreCalculator,times(1)).beforeVariableChanged(a3,"chainedObject");
  inOrder.verify(incrementalScoreCalculator,times(1)).afterVariableChanged(a3,"chainedObject");
  inOrder.verify(incrementalScoreCalculator,times(1)).beforeVariableChanged(b1,"nextEntity");
  inOrder.verify(incrementalScoreCalculator,times(1)).afterVariableChanged(b1,"nextEntity");
  inOrder.verifyNoMoreInteractions();
}
