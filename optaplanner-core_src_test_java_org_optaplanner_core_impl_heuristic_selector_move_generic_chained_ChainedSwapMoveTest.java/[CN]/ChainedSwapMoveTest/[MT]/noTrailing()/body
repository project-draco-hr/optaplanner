{
  GenuineVariableDescriptor variableDescriptor=TestdataChainedEntity.buildVariableDescriptorForChainedObject();
  InnerScoreDirector scoreDirector=PlannerTestUtils.mockScoreDirector(variableDescriptor.getEntityDescriptor().getSolutionDescriptor());
  TestdataChainedAnchor a0=new TestdataChainedAnchor("a0");
  TestdataChainedEntity a1=new TestdataChainedEntity("a1",a0);
  TestdataChainedEntity a2=new TestdataChainedEntity("a2",a1);
  TestdataChainedEntity a3=new TestdataChainedEntity("a3",a2);
  TestdataChainedAnchor b0=new TestdataChainedAnchor("b0");
  TestdataChainedEntity b1=new TestdataChainedEntity("b1",b0);
  SingletonInverseVariableSupply inverseVariableSupply=SelectorTestUtils.mockSingletonInverseVariableSupply(new TestdataChainedEntity[]{a1,a2,a3,b1});
  ChainedSwapMove move=new ChainedSwapMove(Collections.singletonList(variableDescriptor),Collections.singletonList(inverseVariableSupply),a3,b1);
  Move undoMove=move.createUndoMove(scoreDirector);
  move.doMove(scoreDirector);
  SelectorTestUtils.assertChain(a0,a1,a2,b1);
  SelectorTestUtils.assertChain(b0,a3);
  verify(scoreDirector).changeVariableFacade(variableDescriptor,a3,b0);
  verify(scoreDirector).changeVariableFacade(variableDescriptor,b1,a2);
  undoMove.doMove(scoreDirector);
  SelectorTestUtils.assertChain(a0,a1,a2,a3);
  SelectorTestUtils.assertChain(b0,b1);
}
