{
  HeuristicConfigPolicy phaseConfigPolicy=solverConfigPolicy.createPhaseConfigPolicy();
  phaseConfigPolicy.setInitializedChainedValueFilterEnabled(true);
  ExhaustiveSearchType exhaustiveSearchType_=exhaustiveSearchType == null ? ExhaustiveSearchType.DEPTH_FIRST_BRANCH_AND_BOUND : exhaustiveSearchType;
  phaseConfigPolicy.setSortEntitiesByDecreasingDifficultyEnabled(exhaustiveSearchType_.isSortEntitiesByDecreasingDifficulty());
  phaseConfigPolicy.setSortValuesByIncreasingStrengthEnabled(exhaustiveSearchType_.isSortValuesByIncreasingStrength());
  DefaultExhaustiveSearchSolverPhase phase=new DefaultExhaustiveSearchSolverPhase();
  configureSolverPhase(phase,phaseIndex,phaseConfigPolicy,bestSolutionRecaller,solverTermination);
  EntitySelectorConfig entitySelectorConfig_=buildEntitySelectorConfig(phaseConfigPolicy);
  EntitySelector entitySelector=entitySelectorConfig_.buildEntitySelector(phaseConfigPolicy,SelectionCacheType.PHASE,SelectionOrder.ORIGINAL);
  phase.setEntitySelector(entitySelector);
  phase.setDecider(buildDecider(phaseConfigPolicy,entitySelector,bestSolutionRecaller,phase.getTermination()));
  EnvironmentMode environmentMode=phaseConfigPolicy.getEnvironmentMode();
  if (environmentMode.isNonIntrusiveFullAsserted()) {
    phase.setAssertWorkingSolutionScoreFromScratch(true);
  }
  if (environmentMode.isIntrusiveFastAsserted()) {
    phase.setAssertExpectedWorkingSolutionScore(true);
  }
  return phase;
}
