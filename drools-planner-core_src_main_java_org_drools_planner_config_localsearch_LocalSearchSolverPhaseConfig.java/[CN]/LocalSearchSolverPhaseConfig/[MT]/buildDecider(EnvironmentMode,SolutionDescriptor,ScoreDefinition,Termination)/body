{
  DefaultDecider decider=new DefaultDecider();
  MoveSelector moveSelector;
  SelectionCacheType defaultCacheType=SelectionCacheType.JUST_IN_TIME;
  SelectionOrder defaultSelectionOrder=SelectionOrder.RANDOM;
  if (CollectionUtils.isEmpty(moveSelectorConfigList)) {
    UnionMoveSelectorConfig unionMoveSelectorConfig=new UnionMoveSelectorConfig();
    unionMoveSelectorConfig.setMoveSelectorConfigList(Arrays.asList(new ChangeMoveSelectorConfig(),new SwapMoveSelectorConfig()));
    moveSelector=unionMoveSelectorConfig.buildMoveSelector(environmentMode,solutionDescriptor,defaultCacheType,defaultSelectionOrder);
  }
 else   if (moveSelectorConfigList.size() == 1) {
    moveSelector=moveSelectorConfigList.get(0).buildMoveSelector(environmentMode,solutionDescriptor,defaultCacheType,defaultSelectionOrder);
  }
 else {
    throw new IllegalArgumentException("The moveSelectorConfigList (" + moveSelectorConfigList + ") must a singleton or empty. Use a single "+ UnionMoveSelectorConfig.class+ " element to nest multiple MoveSelectors.");
  }
  decider.setTermination(termination);
  decider.setMoveSelector(moveSelector);
  decider.setAcceptor(acceptorConfig.buildAcceptor(environmentMode,scoreDefinition));
  decider.setForager(foragerConfig.buildForager(scoreDefinition));
  if (environmentMode == EnvironmentMode.TRACE) {
    decider.setAssertMoveScoreIsUncorrupted(true);
  }
  if (environmentMode == EnvironmentMode.DEBUG || environmentMode == EnvironmentMode.TRACE) {
    decider.setAssertUndoMoveIsUncorrupted(true);
  }
  return decider;
}
