{
  long transferMillis=RandomUtils.nextLong(workingRandom,InvestmentAllocationNumericUtil.MAXIMUM_QUANTITY_MILLIS) + 1L;
  Map.Entry<Long,AssetClassAllocation> lowerEntry=quantityMillisIncrementToAllocationMap.lowerEntry(transferMillis);
  Map.Entry<Long,AssetClassAllocation> ceilingEntry=quantityMillisIncrementToAllocationMap.ceilingEntry(transferMillis);
  transferMillis-=(lowerEntry == null ? 0L : lowerEntry.getKey());
  AssetClassAllocation fromAllocation=ceilingEntry.getValue();
  int fromAllocationIndex=allocationList.indexOf(fromAllocation);
  int toAllocationIndex=workingRandom.nextInt(allocationList.size() - 1);
  if (toAllocationIndex >= fromAllocationIndex) {
    toAllocationIndex++;
  }
  AssetClassAllocation toAllocation=allocationList.get(toAllocationIndex);
  return new InvestmentQuantityTransferMove(fromAllocation,toAllocation,transferMillis);
}
