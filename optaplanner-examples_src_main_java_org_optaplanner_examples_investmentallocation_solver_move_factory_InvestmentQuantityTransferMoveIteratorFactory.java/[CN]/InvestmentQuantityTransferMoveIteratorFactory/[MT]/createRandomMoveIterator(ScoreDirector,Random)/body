{
  InvestmentSolution solution=(InvestmentSolution)scoreDirector.getWorkingSolution();
  List<AssetClassAllocation> allocationList=solution.getAssetClassAllocationList();
  NavigableMap<Long,AssetClassAllocation> quantityMillisIncrementToAllocationMap=new TreeMap<Long,AssetClassAllocation>();
  long quantityIncrementMillis=0L;
  for (  AssetClassAllocation allocation : allocationList) {
    long quantityMillis=allocation.getQuantityMillis();
    if (quantityMillis > 0L) {
      quantityIncrementMillis+=quantityMillis;
      quantityMillisIncrementToAllocationMap.put(quantityIncrementMillis,allocation);
    }
  }
  if (quantityIncrementMillis != InvestmentNumericUtil.MAXIMUM_QUANTITY_MILLIS) {
    throw new IllegalStateException("The quantityIncrementMillis (" + quantityIncrementMillis + ") must always be total to MAXIMUM_QUANTITY_MILLIS ("+ InvestmentNumericUtil.MAXIMUM_QUANTITY_MILLIS+ ").");
  }
  return new RandomInvestmentQuantityTransferMoveIterator(allocationList,quantityMillisIncrementToAllocationMap,workingRandom);
}
