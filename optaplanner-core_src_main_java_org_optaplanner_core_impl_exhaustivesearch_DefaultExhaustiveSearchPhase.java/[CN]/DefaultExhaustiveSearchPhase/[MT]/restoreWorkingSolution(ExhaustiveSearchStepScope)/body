{
  ExhaustiveSearchPhaseScope phaseScope=stepScope.getPhaseScope();
  ExhaustiveSearchNode oldNode=phaseScope.getLastCompletedStepScope().getExpandingNode();
  ExhaustiveSearchNode newNode=stepScope.getExpandingNode();
  List<Move> oldMoveList=new ArrayList<Move>(oldNode.getDepth());
  List<Move> newMoveList=new ArrayList<Move>(newNode.getDepth());
  while (oldNode != newNode) {
    int oldDepth=oldNode.getDepth();
    int newDepth=newNode.getDepth();
    if (oldDepth < newDepth) {
      newMoveList.add(newNode.getMove());
      newNode=newNode.getParent();
    }
 else {
      oldMoveList.add(oldNode.getUndoMove());
      oldNode=oldNode.getParent();
    }
  }
  List<Move> restoreMoveList=new ArrayList<Move>(oldMoveList.size() + newMoveList.size());
  restoreMoveList.addAll(oldMoveList);
  Collections.reverse(newMoveList);
  restoreMoveList.addAll(newMoveList);
  ScoreDirector scoreDirector=phaseScope.getScoreDirector();
  for (  Move restoreMove : restoreMoveList) {
    restoreMove.doMove(scoreDirector);
  }
  phaseScope.getWorkingSolution().setScore(stepScope.getStartingStepScore());
  if (assertWorkingSolutionScoreFromScratch) {
    if (stepScope.getStartingStepScore() != null) {
      phaseScope.assertWorkingScoreFromScratch(stepScope.getStartingStepScore(),restoreMoveList);
    }
  }
  if (assertExpectedWorkingSolutionScore) {
    if (stepScope.getStartingStepScore() != null) {
      phaseScope.assertExpectedWorkingScore(stepScope.getStartingStepScore(),restoreMoveList);
    }
  }
}
