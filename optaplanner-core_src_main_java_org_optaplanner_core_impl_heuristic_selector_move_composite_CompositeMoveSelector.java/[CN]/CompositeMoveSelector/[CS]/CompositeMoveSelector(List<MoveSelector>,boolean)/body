{
  this.childMoveSelectorList=childMoveSelectorList;
  this.randomSelection=randomSelection;
  for (  MoveSelector childMoveSelector : childMoveSelectorList) {
    phaseLifecycleSupport.addEventListener(childMoveSelector);
  }
  if (!randomSelection) {
    if (!childMoveSelectorList.isEmpty()) {
      for (      MoveSelector childMoveSelector : childMoveSelectorList.subList(0,childMoveSelectorList.size() - 1)) {
        if (childMoveSelector.isNeverEnding()) {
          throw new IllegalStateException("The selector (" + this + ")'s non-last childMoveSelector ("+ childMoveSelector+ ") has neverEnding ("+ childMoveSelector.isNeverEnding()+ ") with randomSelection ("+ randomSelection+ ")."+ (childMoveSelector.isCountable() ? "" : "\nThe selector is not countable, check the " + ValueRange.class.getSimpleName() + "s involved.\n"+ "Verify that a "+ ValueRangeProvider.class.getSimpleName()+ " does not return "+ ValueRange.class.getSimpleName()+ " when it can return "+ CountableValueRange.class.getSimpleName()+ " or "+ Collection.class.getSimpleName()+ "."));
        }
      }
    }
  }
}
