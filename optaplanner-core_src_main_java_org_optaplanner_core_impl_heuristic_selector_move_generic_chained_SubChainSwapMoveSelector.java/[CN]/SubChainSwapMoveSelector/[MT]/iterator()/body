{
  if (!randomSelection) {
    return new AbstractOriginalSwapIterator<Move,SubChain>(leftSubChainSelector,rightSubChainSelector){
      private Move nextReversingSelection=null;
      @Override protected void createUpcomingSelection(){
        if (selectReversingMoveToo && nextReversingSelection != null) {
          upcomingSelection=nextReversingSelection;
          nextReversingSelection=null;
          return;
        }
        super.createUpcomingSelection();
      }
      @Override protected Move newSwapSelection(      SubChain leftSubSelection,      SubChain rightSubSelection){
        if (selectReversingMoveToo) {
          nextReversingSelection=new SubChainReversingSwapMove(variableDescriptor,leftSubSelection,rightSubSelection);
        }
        return new SubChainSwapMove(variableDescriptor,leftSubSelection,rightSubSelection);
      }
    }
;
  }
 else {
    return new AbstractRandomSwapIterator<Move,SubChain>(leftSubChainSelector,rightSubChainSelector){
      @Override protected Move newSwapSelection(      SubChain leftSubSelection,      SubChain rightSubSelection){
        boolean reversing=selectReversingMoveToo ? workingRandom.nextBoolean() : false;
        return reversing ? new SubChainReversingSwapMove(variableDescriptor,leftSubSelection,rightSubSelection) : new SubChainSwapMove(variableDescriptor,leftSubSelection,rightSubSelection);
      }
    }
;
  }
}
