{
  boolean timeWindowed=solution instanceof TimeWindowedVehicleRoutingSolution;
  List<Customer> customerList=solution.getCustomerList();
  List<Vehicle> vehicleList=solution.getVehicleList();
  Map<Vehicle,Integer> vehicleDemandMap=new HashMap<Vehicle,Integer>(vehicleList.size());
  for (  Vehicle vehicle : vehicleList) {
    vehicleDemandMap.put(vehicle,0);
  }
  int hardScore=0;
  int softScore=0;
  for (  Customer customer : customerList) {
    Standstill previousStandstill=customer.getPreviousStandstill();
    if (previousStandstill != null) {
      Vehicle vehicle=customer.getVehicle();
      vehicleDemandMap.put(vehicle,vehicleDemandMap.get(vehicle) + customer.getDemand());
      softScore-=customer.getDistanceFromPreviousStandstill();
      if (customer.getNextCustomer() == null) {
        softScore-=customer.getLocation().getDistanceTo(vehicle.getLocation());
      }
      if (timeWindowed) {
        TimeWindowedCustomer timeWindowedCustomer=(TimeWindowedCustomer)customer;
        int dueTime=timeWindowedCustomer.getDueTime();
        Integer arrivalTime=timeWindowedCustomer.getArrivalTime();
        if (dueTime < arrivalTime) {
          hardScore-=(arrivalTime - dueTime);
        }
      }
    }
  }
  for (  Map.Entry<Vehicle,Integer> entry : vehicleDemandMap.entrySet()) {
    int capacity=entry.getKey().getCapacity();
    int demand=entry.getValue();
    if (demand > capacity) {
      hardScore-=(demand - capacity);
    }
  }
  return HardSoftScore.valueOf(hardScore,softScore);
}
