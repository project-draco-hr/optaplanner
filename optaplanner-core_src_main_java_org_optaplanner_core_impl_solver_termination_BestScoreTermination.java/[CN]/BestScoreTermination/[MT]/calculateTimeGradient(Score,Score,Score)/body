{
  Score totalDiff=endScore.subtract(startScore);
  Number[] totalDiffNumbers=totalDiff.toLevelNumbers();
  Score scoreDiff=score.subtract(startScore);
  Number[] scoreDiffNumbers=scoreDiff.toLevelNumbers();
  if (scoreDiffNumbers.length != totalDiffNumbers.length) {
    throw new IllegalStateException("The startScore (" + startScore + "), endScore ("+ endScore+ ") and score ("+ score+ ") don't have the same level count.");
  }
  int levelCount=scoreDiffNumbers.length;
  if (timeGradientWeightNumbers.length != levelCount - 1) {
    throw new IllegalStateException("The timeGradientWeightNumbers (" + Arrays.toString(timeGradientWeightNumbers) + ")'s length ("+ timeGradientWeightNumbers.length+ ") is not 1 less than the levelCount ("+ levelCount+ ") of the startScore ("+ startScore+ "), endScore ("+ endScore+ ") and score ("+ score+ ").");
  }
  double timeGradient=0.0;
  double remainingTimeGradient=1.0;
  for (int i=0; i < levelCount; i++) {
    double levelTimeGradientWeight;
    if (i != (levelCount - 1)) {
      levelTimeGradientWeight=remainingTimeGradient * timeGradientWeightNumbers[i];
      remainingTimeGradient-=levelTimeGradientWeight;
    }
 else {
      levelTimeGradientWeight=remainingTimeGradient;
      remainingTimeGradient=0.0;
    }
    double totalDiffLevel=totalDiffNumbers[i].doubleValue();
    double scoreDiffLevel=scoreDiffNumbers[i].doubleValue();
    if (scoreDiffLevel == totalDiffLevel) {
      timeGradient+=levelTimeGradientWeight;
    }
 else     if (scoreDiffLevel > totalDiffLevel) {
      timeGradient+=levelTimeGradientWeight + remainingTimeGradient;
      break;
    }
 else     if (scoreDiffLevel == 0.0) {
    }
 else     if (scoreDiffLevel < 0.0) {
      break;
    }
 else {
      double levelTimeGradient=(double)scoreDiffLevel / (double)totalDiffLevel;
      timeGradient+=levelTimeGradient * levelTimeGradientWeight;
    }
  }
  if (timeGradient > 1.0) {
    timeGradient=1.0;
  }
  return timeGradient;
}
