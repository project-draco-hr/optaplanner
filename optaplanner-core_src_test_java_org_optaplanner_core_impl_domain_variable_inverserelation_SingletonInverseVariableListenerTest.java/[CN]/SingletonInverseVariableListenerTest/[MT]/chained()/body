{
  SolutionDescriptor solutionDescriptor=TestdataMappedByChainedSolution.buildSolutionDescriptor();
  ShadowVariableDescriptor nextEntityVariableDescriptor=solutionDescriptor.findEntityDescriptorOrFail(TestdataMappedByChainedObject.class).getShadowVariableDescriptor("nextEntity");
  SingletonInverseVariableListener variableListener=new SingletonInverseVariableListener(nextEntityVariableDescriptor,solutionDescriptor.findEntityDescriptorOrFail(TestdataMappedByChainedEntity.class).getGenuineVariableDescriptor("chainedObject"));
  ScoreDirector scoreDirector=mock(ScoreDirector.class);
  TestdataMappedByChainedAnchor a0=new TestdataMappedByChainedAnchor("a0");
  TestdataMappedByChainedEntity a1=new TestdataMappedByChainedEntity("a1",a0);
  a0.setNextEntity(a1);
  TestdataMappedByChainedEntity a2=new TestdataMappedByChainedEntity("a2",a1);
  a1.setNextEntity(a2);
  TestdataMappedByChainedEntity a3=new TestdataMappedByChainedEntity("a3",a2);
  a2.setNextEntity(a3);
  TestdataMappedByChainedAnchor b0=new TestdataMappedByChainedAnchor("b0");
  TestdataMappedByChainedEntity b1=new TestdataMappedByChainedEntity("b1",b0);
  b0.setNextEntity(b1);
  TestdataMappedByChainedSolution solution=new TestdataMappedByChainedSolution("solution");
  List<TestdataMappedByChainedAnchor> anchorList=Arrays.asList(a0,b0);
  solution.setChainedAnchorList(anchorList);
  List<TestdataMappedByChainedEntity> originalEntityList=Arrays.asList(a1,a2,a3,b1);
  solution.setChainedEntityList(originalEntityList);
  assertEquals(null,b1.getNextEntity());
  variableListener.beforeVariableChanged(scoreDirector,a3);
  a3.setChainedObject(b1);
  variableListener.afterVariableChanged(scoreDirector,a3);
  assertEquals(a3,b1.getNextEntity());
  InOrder inOrder=inOrder(scoreDirector);
  inOrder.verify(scoreDirector).beforeVariableChanged(nextEntityVariableDescriptor,b1);
  inOrder.verify(scoreDirector).afterVariableChanged(nextEntityVariableDescriptor,b1);
  inOrder.verifyNoMoreInteractions();
}
