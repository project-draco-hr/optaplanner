{
  EntityDescriptor<Solution_> entityDescriptor=variableDescriptor.getEntityDescriptor();
  Class<?> type=memberAccessor.getType();
  collectionWrapping=Collection.class.isAssignableFrom(type);
  arrayWrapping=type.isArray();
  if (!collectionWrapping && !arrayWrapping && !ValueRange.class.isAssignableFrom(type)) {
    throw new IllegalArgumentException("The entityClass (" + entityDescriptor.getEntityClass() + ") has a "+ PlanningVariable.class.getSimpleName()+ " annotated property ("+ variableDescriptor.getVariableName()+ ") that refers to a "+ ValueRangeProvider.class.getSimpleName()+ " annotated member ("+ memberAccessor+ ") that does not return a "+ Collection.class.getSimpleName()+ ", an array or a "+ ValueRange.class.getSimpleName()+ ".");
  }
  if (collectionWrapping) {
    Type genericType=memberAccessor.getGenericType();
    if (!(genericType instanceof ParameterizedType)) {
      throw new IllegalArgumentException("The entityClass (" + entityDescriptor.getEntityClass() + ") has a "+ PlanningVariable.class.getSimpleName()+ " annotated property ("+ variableDescriptor.getVariableName()+ ") that refers to a "+ ValueRangeProvider.class.getSimpleName()+ " annotated member ("+ memberAccessor+ ") that returns a "+ Collection.class.getSimpleName()+ " which has no generic parameters.\n"+ "Maybe the member ("+ memberAccessor+ " should return a typed "+ Collection.class.getSimpleName()+ ".");
    }
    ParameterizedType parameterizedType=(ParameterizedType)genericType;
    Type[] typeArguments=parameterizedType.getActualTypeArguments();
    if (typeArguments.length != 1) {
      throw new IllegalArgumentException("The entityClass (" + entityDescriptor.getEntityClass() + ") has a "+ PlanningVariable.class.getSimpleName()+ " annotated property ("+ variableDescriptor.getVariableName()+ ") that refers to a "+ ValueRangeProvider.class.getSimpleName()+ " annotated member ("+ memberAccessor+ ") that returns a parameterized "+ Collection.class.getSimpleName()+ ") with an unsupported number of generic parameters ("+ typeArguments.length+ ").");
    }
    Type typeArgument=typeArguments[0];
    if (typeArgument instanceof ParameterizedType) {
      typeArgument=((ParameterizedType)typeArgument).getRawType();
    }
    Class collectionElementClass;
    if (typeArgument instanceof Class) {
      collectionElementClass=((Class)typeArgument);
    }
 else {
      throw new IllegalArgumentException("The entityClass (" + entityDescriptor.getEntityClass() + ") has a "+ PlanningVariable.class.getSimpleName()+ " annotated property ("+ variableDescriptor.getVariableName()+ ") that refers to a "+ ValueRangeProvider.class.getSimpleName()+ " annotated member ("+ memberAccessor+ ") that returns a parameterized "+ Collection.class.getSimpleName()+ " with an unsupported type arguments ("+ typeArgument+ ").");
    }
    Class<?> variablePropertyType=variableDescriptor.getVariablePropertyType();
    if (!variablePropertyType.isAssignableFrom(collectionElementClass)) {
      throw new IllegalArgumentException("The entityClass (" + entityDescriptor.getEntityClass() + ") has a "+ PlanningVariable.class.getSimpleName()+ " annotated property ("+ variableDescriptor.getVariableName()+ ") that refers to a "+ ValueRangeProvider.class.getSimpleName()+ " annotated member ("+ memberAccessor+ ") that returns a "+ Collection.class.getSimpleName()+ " with elements of type ("+ collectionElementClass+ ") which cannot be assigned to the "+ PlanningVariable.class.getSimpleName()+ "'s type ("+ variablePropertyType+ ").");
    }
  }
 else   if (arrayWrapping) {
    Class<?> arrayElementClass=type.getComponentType();
    Class<?> variablePropertyType=variableDescriptor.getVariablePropertyType();
    if (!variablePropertyType.isAssignableFrom(arrayElementClass)) {
      throw new IllegalArgumentException("The entityClass (" + entityDescriptor.getEntityClass() + ") has a "+ PlanningVariable.class.getSimpleName()+ " annotated property ("+ variableDescriptor.getVariableName()+ ") that refers to a "+ ValueRangeProvider.class.getSimpleName()+ " annotated member ("+ memberAccessor+ ") that returns a array with elements of type ("+ arrayElementClass+ ") which cannot be assigned to the "+ PlanningVariable.class.getSimpleName()+ "'s type ("+ variablePropertyType+ ").");
    }
  }
  countable=collectionWrapping || arrayWrapping || CountableValueRange.class.isAssignableFrom(type);
}
