{
  Object valueRangeObject=memberAccessor.executeGetter(bean);
  if (valueRangeObject == null) {
    throw new IllegalStateException("The @" + ValueRangeProvider.class.getSimpleName() + " annotated member ("+ memberAccessor+ ") called on bean ("+ bean+ ") must not return a null valueRangeObject ("+ valueRangeObject+ ").");
  }
  ValueRange<Object> valueRange;
  if (collectionWrapping) {
    List<Object> list=transformToList((Collection<Object>)valueRangeObject);
    valueRange=new ListValueRange<Object>(list);
  }
 else {
    valueRange=(ValueRange<Object>)valueRangeObject;
  }
  valueRange=doNullInValueRangeWrapping(valueRange);
  if (valueRange.isEmpty()) {
    throw new IllegalStateException("The @" + ValueRangeProvider.class.getSimpleName() + " annotated member ("+ memberAccessor+ ") called on bean ("+ bean+ ") must not return an empty valueRange ("+ valueRangeObject+ ").\n"+ "  If this a valid dataset, apply overconstrained planning as described in the documentation.");
  }
  return valueRange;
}
