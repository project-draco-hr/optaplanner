{
  benchmarkingStarted();
  Map<File,List<SolverStatistic>> unsolvedSolutionFileToStatisticMap=new LinkedHashMap<File,List<SolverStatistic>>();
  for (  SolverBenchmark solverBenchmark : solverBenchmarkList) {
    for (    SolverBenchmarkResult result : solverBenchmark.getSolverBenchmarkResultList()) {
      Solver solver=solverBenchmark.getSolverConfig().buildSolver();
      File unsolvedSolutionFile=result.getUnsolvedSolutionFile();
      Solution unsolvedSolution=readUnsolvedSolution(xStream,unsolvedSolutionFile);
      solver.setStartingSolution(unsolvedSolution);
      List<SolverStatistic> statisticList=getOrCreateStatisticList(unsolvedSolutionFileToStatisticMap,unsolvedSolutionFile);
      for (      SolverStatistic statistic : statisticList) {
        statistic.addListener(solver,solverBenchmark.getName());
      }
      solver.solve();
      result.setTimeMillisSpend(solver.getTimeMillisSpend());
      Solution solvedSolution=solver.getBestSolution();
      result.setScore(solvedSolution.getScore());
      for (      SolverStatistic statistic : statisticList) {
        statistic.removeListener(solver,solverBenchmark.getName());
      }
      writeSolvedSolution(xStream,solverBenchmark,result,solvedSolution);
    }
  }
  benchmarkingEnded(xStream,unsolvedSolutionFileToStatisticMap);
}
