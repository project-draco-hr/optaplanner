{
  benchmarkingStarted();
  Map<File,List<SolverStatistic>> unsolvedSolutionFileToStatisticMap=new LinkedHashMap<File,List<SolverStatistic>>();
  if (warmUpTimeMillisSpend != null || warmUpSecondsSpend != null || warmUpMinutesSpend != null || warmUpHoursSpend != null) {
    logger.info("================================================================================");
    logger.info("Warming up");
    logger.info("================================================================================");
    long warmUpTimeMillisSpendTotal=0L;
    if (warmUpTimeMillisSpend != null) {
      warmUpTimeMillisSpendTotal+=warmUpTimeMillisSpend;
    }
    if (warmUpSecondsSpend != null) {
      warmUpTimeMillisSpendTotal+=warmUpSecondsSpend * 1000L;
    }
    if (warmUpMinutesSpend != null) {
      warmUpTimeMillisSpendTotal+=warmUpMinutesSpend * 60000L;
    }
    if (warmUpHoursSpend != null) {
      warmUpTimeMillisSpendTotal+=warmUpHoursSpend * 3600000L;
    }
    long startingTimeMillis=System.currentTimeMillis();
    long timeLeft=warmUpTimeMillisSpendTotal;
    Iterator<SolverBenchmark> solverBenchmarkIt=solverBenchmarkList.iterator();
    int overallResultIndex=0;
    while (timeLeft > 0L) {
      if (!solverBenchmarkIt.hasNext()) {
        solverBenchmarkIt=solverBenchmarkList.iterator();
        overallResultIndex++;
      }
      SolverBenchmark solverBenchmark=solverBenchmarkIt.next();
      List<SolverBenchmarkResult> solverBenchmarkResultList=solverBenchmark.getSolverBenchmarkResultList();
      int resultIndex=overallResultIndex % solverBenchmarkResultList.size();
      SolverBenchmarkResult result=solverBenchmarkResultList.get(resultIndex);
      TerminationConfig originalTerminationConfig=solverBenchmark.getSolverConfig().getTerminationConfig();
      TerminationConfig tmpTerminationConfig=originalTerminationConfig.clone();
      tmpTerminationConfig.shortenMaximumTimeMillisSpendTotal(timeLeft);
      solverBenchmark.getSolverConfig().setTerminationConfig(tmpTerminationConfig);
      Solver solver=solverBenchmark.getSolverConfig().buildSolver();
      File unsolvedSolutionFile=result.getUnsolvedSolutionFile();
      Solution unsolvedSolution=readUnsolvedSolution(xStream,unsolvedSolutionFile);
      solver.setPlanningProblem(unsolvedSolution);
      solver.solve();
      solverBenchmark.getSolverConfig().setTerminationConfig(originalTerminationConfig);
      long timeSpend=System.currentTimeMillis() - startingTimeMillis;
      timeLeft=warmUpTimeMillisSpendTotal - timeSpend;
    }
    logger.info("================================================================================");
    logger.info("Finished warmUp");
    logger.info("================================================================================");
  }
  for (  SolverBenchmark solverBenchmark : solverBenchmarkList) {
    for (    SolverBenchmarkResult result : solverBenchmark.getSolverBenchmarkResultList()) {
      Solver solver=solverBenchmark.getSolverConfig().buildSolver();
      File unsolvedSolutionFile=result.getUnsolvedSolutionFile();
      Solution unsolvedSolution=readUnsolvedSolution(xStream,unsolvedSolutionFile);
      solver.setPlanningProblem(unsolvedSolution);
      List<SolverStatistic> statisticList=getOrCreateStatisticList(unsolvedSolutionFileToStatisticMap,unsolvedSolutionFile);
      for (      SolverStatistic statistic : statisticList) {
        statistic.addListener(solver,solverBenchmark.getName());
      }
      solver.solve();
      result.setTimeMillisSpend(solver.getTimeMillisSpend());
      Solution solvedSolution=solver.getBestSolution();
      result.setScore(solvedSolution.getScore());
      for (      SolverStatistic statistic : statisticList) {
        statistic.removeListener(solver,solverBenchmark.getName());
      }
      writeSolvedSolution(xStream,solverBenchmark,result,solvedSolution);
    }
  }
  benchmarkingEnded(xStream,unsolvedSolutionFileToStatisticMap);
}
