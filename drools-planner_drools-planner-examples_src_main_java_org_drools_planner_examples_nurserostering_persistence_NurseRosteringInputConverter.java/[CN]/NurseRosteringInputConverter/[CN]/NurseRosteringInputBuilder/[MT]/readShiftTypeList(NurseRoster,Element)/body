{
  List<Element> shiftElementList=(List<Element>)shiftTypesElement.getChildren();
  List<ShiftType> shiftTypeList=new ArrayList<ShiftType>(shiftElementList.size());
  shiftTypeMap=new HashMap<String,ShiftType>(shiftElementList.size());
  long id=0L;
  List<ShiftTypeSkillRequirement> shiftTypeSkillRequirementList=new ArrayList<ShiftTypeSkillRequirement>(shiftElementList.size() * 2);
  long shiftTypeSkillRequirementId=0L;
  for (  Element element : shiftElementList) {
    assertElementName(element,"Shift");
    ShiftType shiftType=new ShiftType();
    shiftType.setId(id);
    shiftType.setCode(element.getAttribute("ID").getValue());
    shiftType.setStartTimeString(element.getChild("StartTime").getText());
    shiftType.setEndTimeString(element.getChild("EndTime").getText());
    shiftType.setDescription(element.getChild("Description").getText());
    Element skillsElement=element.getChild("Skills");
    if (skillsElement != null) {
      List<Element> skillElementList=(List<Element>)skillsElement.getChildren();
      for (      Element skillElement : skillElementList) {
        assertElementName(skillElement,"Skill");
        ShiftTypeSkillRequirement shiftTypeSkillRequirement=new ShiftTypeSkillRequirement();
        shiftTypeSkillRequirement.setId(shiftTypeSkillRequirementId);
        shiftTypeSkillRequirement.setShiftType(shiftType);
        Skill skill=skillMap.get(skillElement.getText());
        if (skill == null) {
          throw new IllegalArgumentException("The skill (" + skillElement.getText() + ") of shiftType ("+ shiftType.getCode()+ ") does not exist.");
        }
        shiftTypeSkillRequirement.setSkill(skill);
        shiftTypeSkillRequirementList.add(shiftTypeSkillRequirement);
        shiftTypeSkillRequirementId++;
      }
    }
    shiftTypeList.add(shiftType);
    shiftTypeMap.put(shiftType.getCode(),shiftType);
    id++;
  }
  nurseRoster.setShiftTypeList(shiftTypeList);
  nurseRoster.setShiftTypeSkillRequirementList(shiftTypeSkillRequirementList);
}
