{
  Object leftAnchor=anchorVariableSupply.getAnchor(leftEntity);
  Object rightAnchor=determineRightAnchor();
  Object leftValue=variableDescriptor.getValue(leftEntity);
  Object rightEntity=inverseVariableSupply.getInverseSingleton(rightValue);
  if (leftAnchor != rightAnchor) {
    scoreDirector.changeVariableFacade(variableDescriptor,leftEntity,rightValue);
    if (rightEntity != null) {
      scoreDirector.changeVariableFacade(variableDescriptor,rightEntity,leftValue);
    }
  }
 else {
    Object lastEntityInChainOrLeftEntity=findLastEntityInChainOrLeftEntity();
    if (lastEntityInChainOrLeftEntity == leftEntity) {
      Object leftNextEntity=inverseVariableSupply.getInverseSingleton(leftEntity);
      scoreDirector.changeVariableFacade(variableDescriptor,leftEntity,rightValue);
      reverseChain(scoreDirector,leftValue,leftEntity,rightEntity);
      if (leftNextEntity != null) {
        scoreDirector.changeVariableFacade(variableDescriptor,leftNextEntity,rightEntity);
      }
    }
 else {
      Object lastEntityInChain=lastEntityInChainOrLeftEntity;
      Object leftNextEntity=inverseVariableSupply.getInverseSingleton(leftEntity);
      Object entityAfterAnchor=inverseVariableSupply.getInverseSingleton(leftAnchor);
      reverseChain(scoreDirector,leftValue,leftEntity,entityAfterAnchor);
      scoreDirector.changeVariableFacade(variableDescriptor,leftEntity,rightValue);
      reverseChain(scoreDirector,lastEntityInChain,leftAnchor,rightEntity);
      scoreDirector.changeVariableFacade(variableDescriptor,leftNextEntity,rightEntity);
    }
  }
}
