{
  GenuineVariableDescriptor variableDescriptor=TestdataEntity.buildVariableDescriptorForValue();
  EntitySelector entitySelector=SelectorTestUtils.mockEntitySelector(variableDescriptor.getEntityDescriptor(),new TestdataEntity("a"),new TestdataEntity("b"),new TestdataEntity("c"));
  EntityIndependentValueSelector valueSelector=SelectorTestUtils.mockEntityIndependentValueSelector(variableDescriptor,new TestdataValue("1"),new TestdataValue("2"));
  MimicRecordingValueSelector recordingValueSelector=new MimicRecordingValueSelector(valueSelector);
  MoveSelector moveSelector=new ChangeMoveSelector(entitySelector,new MimicReplayingValueSelector(recordingValueSelector),false);
  QueuedValuePlacer placer=new QueuedValuePlacer(recordingValueSelector,moveSelector);
  DefaultSolverScope solverScope=mock(DefaultSolverScope.class);
  placer.solvingStarted(solverScope);
  AbstractPhaseScope phaseScopeA=mock(AbstractPhaseScope.class);
  when(phaseScopeA.getSolverScope()).thenReturn(solverScope);
  placer.phaseStarted(phaseScopeA);
  Iterator<Placement> placementIterator=placer.iterator();
  assertTrue(placementIterator.hasNext());
  AbstractStepScope stepScopeA1=mock(AbstractStepScope.class);
  when(stepScopeA1.getPhaseScope()).thenReturn(phaseScopeA);
  placer.stepStarted(stepScopeA1);
  assertPlacement(placementIterator.next(),"1","a","b","c");
  placer.stepEnded(stepScopeA1);
  assertTrue(placementIterator.hasNext());
  AbstractStepScope stepScopeA2=mock(AbstractStepScope.class);
  when(stepScopeA2.getPhaseScope()).thenReturn(phaseScopeA);
  placer.stepStarted(stepScopeA2);
  assertPlacement(placementIterator.next(),"2","a","b","c");
  placer.stepEnded(stepScopeA2);
  assertTrue(placementIterator.hasNext());
  AbstractStepScope stepScopeA3=mock(AbstractStepScope.class);
  when(stepScopeA3.getPhaseScope()).thenReturn(phaseScopeA);
  placer.stepStarted(stepScopeA3);
  assertPlacement(placementIterator.next(),"1","a","b","c");
  placer.stepEnded(stepScopeA3);
  placer.phaseEnded(phaseScopeA);
  AbstractPhaseScope phaseScopeB=mock(AbstractPhaseScope.class);
  when(phaseScopeB.getSolverScope()).thenReturn(solverScope);
  placer.phaseStarted(phaseScopeB);
  placementIterator=placer.iterator();
  assertTrue(placementIterator.hasNext());
  AbstractStepScope stepScopeB1=mock(AbstractStepScope.class);
  when(stepScopeB1.getPhaseScope()).thenReturn(phaseScopeB);
  placer.stepStarted(stepScopeB1);
  assertPlacement(placementIterator.next(),"1","a","b","c");
  placer.stepEnded(stepScopeB1);
  placer.phaseEnded(phaseScopeB);
  placer.solvingEnded(solverScope);
  verifyPhaseLifecycle(entitySelector,1,2,4);
  verifyPhaseLifecycle(valueSelector,1,2,4);
}
