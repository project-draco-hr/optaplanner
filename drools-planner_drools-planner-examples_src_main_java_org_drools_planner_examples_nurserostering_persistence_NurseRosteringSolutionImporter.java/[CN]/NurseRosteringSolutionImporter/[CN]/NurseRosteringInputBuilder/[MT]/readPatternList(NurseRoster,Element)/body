{
  List<Pattern> patternList;
  if (patternsElement == null) {
    patternList=Collections.emptyList();
  }
 else {
    List<Element> patternElementList=(List<Element>)patternsElement.getChildren();
    patternList=new ArrayList<Pattern>(patternElementList.size());
    patternMap=new HashMap<String,Pattern>(patternElementList.size());
    long id=0L;
    long patternEntryId=0L;
    for (    Element element : patternElementList) {
      assertElementName(element,"Pattern");
      String code=element.getAttribute("ID").getValue();
      int weight=element.getAttribute("weight").getIntValue();
      List<Element> patternEntryElementList=(List<Element>)element.getChild("PatternEntries").getChildren();
      if (patternEntryElementList.size() < 2) {
        throw new IllegalArgumentException("The size of PatternEntries (" + patternEntryElementList.size() + ") of pattern ("+ code+ ") should be at least 2.");
      }
      Pattern pattern;
      if (patternEntryElementList.get(0).getChild("ShiftType").getText().equals("None")) {
        pattern=new FreeBefore2DaysWithAWorkDayPattern();
        if (patternEntryElementList.size() != 3) {
          throw new IllegalStateException("boe");
        }
      }
 else       if (patternEntryElementList.get(1).getChild("ShiftType").getText().equals("None")) {
        pattern=new WorkBeforeFreeSequencePattern();
        throw new UnsupportedOperationException("The pattern (" + code + ") is not supported."+ " None of the test data exhibits such a pattern.");
      }
 else {
switch (patternEntryElementList.size()) {
case 2:
          pattern=new ShiftType2DaysPattern();
        break;
case 3:
      pattern=new ShiftType3DaysPattern();
    break;
default :
  throw new IllegalArgumentException("A size of PatternEntries (" + patternEntryElementList.size() + ") of pattern ("+ code+ ") above 3 is not supported.");
}
}
pattern.setId(id);
pattern.setCode(code);
pattern.setWeight(weight);
int patternEntryIndex=0;
DayOfWeek firstDayOfweek=null;
for (Element patternEntryElement : patternEntryElementList) {
assertElementName(patternEntryElement,"PatternEntry");
Element shiftTypeElement=patternEntryElement.getChild("ShiftType");
boolean shiftTypeIsNone;
ShiftType shiftType;
if (shiftTypeElement.getText().equals("Any")) {
shiftTypeIsNone=false;
shiftType=null;
}
 else if (shiftTypeElement.getText().equals("None")) {
shiftTypeIsNone=true;
shiftType=null;
}
 else {
shiftTypeIsNone=false;
shiftType=shiftTypeMap.get(shiftTypeElement.getText());
if (shiftType == null) {
  throw new IllegalArgumentException("The shiftType (" + shiftTypeElement.getText() + ") of pattern ("+ pattern.getCode()+ ") does not exist.");
}
}
Element dayElement=patternEntryElement.getChild("Day");
DayOfWeek dayOfWeek;
if (dayElement.getText().equals("Any")) {
dayOfWeek=null;
}
 else {
dayOfWeek=DayOfWeek.valueOfCode(dayElement.getText());
if (dayOfWeek == null) {
  throw new IllegalArgumentException("The dayOfWeek (" + dayElement.getText() + ") of pattern ("+ pattern.getCode()+ ") does not exist.");
}
}
if (patternEntryIndex == 0) {
firstDayOfweek=dayOfWeek;
}
 else {
if (firstDayOfweek != null) {
  if (firstDayOfweek.getDistanceToNext(dayOfWeek) != patternEntryIndex) {
    throw new IllegalArgumentException("On patternEntryIndex (" + patternEntryIndex + ") of pattern ("+ pattern.getCode()+ ") the dayOfWeek ("+ dayOfWeek+ ") is not valid with previous entries.");
  }
}
 else {
  if (dayOfWeek != null) {
    throw new IllegalArgumentException("On patternEntryIndex (" + patternEntryIndex + ") of pattern ("+ pattern.getCode()+ ") the dayOfWeek should be (Any), in line with previous entries.");
  }
}
}
if (pattern instanceof FreeBefore2DaysWithAWorkDayPattern) {
FreeBefore2DaysWithAWorkDayPattern castedPattern=(FreeBefore2DaysWithAWorkDayPattern)pattern;
if (patternEntryIndex == 0) {
  if (dayOfWeek == null) {
    throw new UnsupportedOperationException("On patternEntryIndex (" + patternEntryIndex + ") of FreeBeforeWorkSequence pattern ("+ pattern.getCode()+ ") the dayOfWeek should not be (Any)."+ "\n None of the test data exhibits such a pattern.");
  }
  castedPattern.setFreeDayOfWeek(dayOfWeek);
}
if (patternEntryIndex == 1) {
  if (shiftType != null) {
    throw new UnsupportedOperationException("On patternEntryIndex (" + patternEntryIndex + ") of FreeBeforeWorkSequence pattern ("+ pattern.getCode()+ ") the shiftType should be (Any)."+ "\n None of the test data exhibits such a pattern.");
  }
}
if (patternEntryIndex != 0 && shiftTypeIsNone) {
  throw new IllegalArgumentException("On patternEntryIndex (" + patternEntryIndex + ") of FreeBeforeWorkSequence pattern ("+ pattern.getCode()+ ") the shiftType can not be (None).");
}
}
 else if (pattern instanceof WorkBeforeFreeSequencePattern) {
WorkBeforeFreeSequencePattern castedPattern=(WorkBeforeFreeSequencePattern)pattern;
if (patternEntryIndex == 0) {
  castedPattern.setWorkDayOfWeek(dayOfWeek);
  castedPattern.setWorkShiftType(shiftType);
  castedPattern.setFreeDayLength(patternEntryElementList.size() - 1);
}
if (patternEntryIndex != 0 && !shiftTypeIsNone) {
  throw new IllegalArgumentException("On patternEntryIndex (" + patternEntryIndex + ") of WorkBeforeFreeSequence pattern ("+ pattern.getCode()+ ") the shiftType should be (None).");
}
}
 else if (pattern instanceof ShiftType2DaysPattern) {
ShiftType2DaysPattern castedPattern=(ShiftType2DaysPattern)pattern;
if (patternEntryIndex == 0) {
  if (dayOfWeek != null) {
    throw new UnsupportedOperationException("On patternEntryIndex (" + patternEntryIndex + ") of FreeBeforeWorkSequence pattern ("+ pattern.getCode()+ ") the dayOfWeek should be (Any)."+ "\n None of the test data exhibits such a pattern.");
  }
}
if (shiftType == null) {
  throw new UnsupportedOperationException("On patternEntryIndex (" + patternEntryIndex + ") of FreeBeforeWorkSequence pattern ("+ pattern.getCode()+ ") the shiftType should not be (Any)."+ "\n None of the test data exhibits such a pattern.");
}
switch (patternEntryIndex) {
case 0:
  castedPattern.setDayIndex0ShiftType(shiftType);
break;
case 1:
castedPattern.setDayIndex1ShiftType(shiftType);
break;
}
}
 else if (pattern instanceof ShiftType3DaysPattern) {
ShiftType3DaysPattern castedPattern=(ShiftType3DaysPattern)pattern;
if (patternEntryIndex == 0) {
if (dayOfWeek != null) {
throw new UnsupportedOperationException("On patternEntryIndex (" + patternEntryIndex + ") of FreeBeforeWorkSequence pattern ("+ pattern.getCode()+ ") the dayOfWeek should be (Any)."+ "\n None of the test data exhibits such a pattern.");
}
}
if (shiftType == null) {
throw new UnsupportedOperationException("On patternEntryIndex (" + patternEntryIndex + ") of FreeBeforeWorkSequence pattern ("+ pattern.getCode()+ ") the shiftType should not be (Any)."+ "\n None of the test data exhibits such a pattern.");
}
switch (patternEntryIndex) {
case 0:
castedPattern.setDayIndex0ShiftType(shiftType);
break;
case 1:
castedPattern.setDayIndex1ShiftType(shiftType);
break;
case 2:
castedPattern.setDayIndex2ShiftType(shiftType);
break;
}
}
 else {
throw new IllegalStateException("Unsupported patternClass (" + pattern.getClass() + ").");
}
patternEntryIndex++;
}
patternList.add(pattern);
if (patternMap.containsKey(pattern.getCode())) {
throw new IllegalArgumentException("There are 2 patterns with the same code (" + pattern.getCode() + ").");
}
patternMap.put(pattern.getCode(),pattern);
id++;
}
}
nurseRoster.setPatternList(patternList);
}
