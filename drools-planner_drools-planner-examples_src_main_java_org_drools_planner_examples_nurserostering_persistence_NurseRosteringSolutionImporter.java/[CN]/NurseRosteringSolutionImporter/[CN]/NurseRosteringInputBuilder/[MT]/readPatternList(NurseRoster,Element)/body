{
  List<Pattern> patternList;
  List<PatternEntry> patternEntryList;
  if (patternsElement == null) {
    patternList=Collections.emptyList();
    patternEntryList=Collections.emptyList();
  }
 else {
    List<Element> patternElementList=(List<Element>)patternsElement.getChildren();
    patternList=new ArrayList<Pattern>(patternElementList.size());
    patternMap=new HashMap<String,Pattern>(patternElementList.size());
    long id=0L;
    patternEntryList=new ArrayList<PatternEntry>(patternElementList.size() * 3);
    long patternEntryId=0L;
    for (    Element element : patternElementList) {
      assertElementName(element,"Pattern");
      Pattern pattern=new Pattern();
      pattern.setId(id);
      pattern.setCode(element.getAttribute("ID").getValue());
      pattern.setWeight(element.getAttribute("weight").getIntValue());
      List<Element> patternEntryElementList=(List<Element>)element.getChild("PatternEntries").getChildren();
      List<PatternEntry> patternEntryListOfPattern=new ArrayList<PatternEntry>(patternEntryElementList.size());
      int entryIndex=0;
      for (      Element patternEntryElement : patternEntryElementList) {
        assertElementName(patternEntryElement,"PatternEntry");
        Element shiftTypeElement=patternEntryElement.getChild("ShiftType");
        PatternEntryPropertyWildcard shiftTypeWildcard;
        ShiftType shiftType=shiftTypeMap.get(shiftTypeElement.getText());
        if (shiftType == null) {
          if (shiftTypeElement.getText().equals("Any")) {
            shiftTypeWildcard=PatternEntryPropertyWildcard.ANY;
          }
 else           if (shiftTypeElement.getText().equals("None")) {
            shiftTypeWildcard=PatternEntryPropertyWildcard.NONE;
          }
 else {
            throw new IllegalArgumentException("The shiftType (" + shiftTypeElement.getText() + ") of pattern ("+ pattern.getCode()+ ") does not exist.");
          }
        }
 else {
          shiftTypeWildcard=PatternEntryPropertyWildcard.SPECIFIC;
        }
        Element dayElement=patternEntryElement.getChild("Day");
        PatternEntryPropertyWildcard dayOfWeekWildcard;
        DayOfWeek dayOfWeek=DayOfWeek.valueOfCode(dayElement.getText());
        if (dayOfWeek == null) {
          if (dayElement.getText().equals("Any")) {
            dayOfWeekWildcard=PatternEntryPropertyWildcard.ANY;
          }
 else {
            throw new IllegalArgumentException("The dayOfWeek (" + dayElement.getText() + ") of pattern ("+ pattern.getCode()+ ") does not exist.");
          }
        }
 else {
          dayOfWeekWildcard=PatternEntryPropertyWildcard.SPECIFIC;
        }
        PatternEntry patternEntry=new PatternEntry();
        patternEntry.setId(patternEntryId);
        patternEntry.setPattern(pattern);
        patternEntry.setEntryIndex(entryIndex);
        patternEntry.setShiftTypeWildcard(shiftTypeWildcard);
        patternEntry.setShiftType(shiftType);
        patternEntry.setDayOfWeekWildcard(dayOfWeekWildcard);
        patternEntry.setDayOfWeek(dayOfWeek);
        patternEntryList.add(patternEntry);
        patternEntryListOfPattern.add(patternEntry);
        patternEntryId++;
        entryIndex++;
      }
      if (patternEntryListOfPattern.size() > 4) {
        throw new IllegalArgumentException("The size of the patternEntries (" + patternEntryListOfPattern.size() + ") of pattern ("+ pattern.getCode()+ ") is bigger than 4, which is not supported.");
      }
      pattern.setPatternEntryList(patternEntryListOfPattern);
      patternList.add(pattern);
      if (patternMap.containsKey(pattern.getCode())) {
        throw new IllegalArgumentException("There are 2 patterns with the same code (" + pattern.getCode() + ").");
      }
      patternMap.put(pattern.getCode(),pattern);
      id++;
    }
  }
  nurseRoster.setPatternList(patternList);
  nurseRoster.setPatternEntryList(patternEntryList);
}
