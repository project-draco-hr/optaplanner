{
  List<Pattern> patternList;
  if (patternsElement == null) {
    patternList=Collections.emptyList();
  }
 else {
    List<Element> patternElementList=(List<Element>)patternsElement.getChildren();
    patternList=new ArrayList<Pattern>(patternElementList.size());
    patternMap=new HashMap<String,Pattern>(patternElementList.size());
    long id=0L;
    for (    Element element : patternElementList) {
      assertElementName(element,"Pattern");
      Pattern pattern=new Pattern();
      pattern.setId(id);
      pattern.setCode(element.getAttribute("ID").getValue());
      pattern.setWeight(element.getAttribute("weight").getIntValue());
      List<Element> patternEntryElementList=(List<Element>)element.getChild("PatternEntries").getChildren();
      for (      Element patternEntryElement : patternEntryElementList) {
        assertElementName(patternEntryElement,"PatternEntry");
        Element shiftTypeElement=patternEntryElement.getChild("ShiftType");
        ShiftType shiftType=shiftTypeMap.get(shiftTypeElement.getText());
        if (shiftType == null) {
          if (shiftTypeElement.getText().equals("Any")) {
          }
 else           if (shiftTypeElement.getText().equals("None")) {
          }
 else {
            throw new IllegalArgumentException("The shiftType (" + shiftTypeElement.getText() + ") of pattern ("+ pattern.getCode()+ ") does not exist.");
          }
        }
        Element dayElement=patternEntryElement.getChild("Day");
        DayOfWeek dayOfWeek=DayOfWeek.valueOfCode(dayElement.getText());
        if (dayOfWeek == null) {
          if (dayElement.getText().equals("Any")) {
          }
 else {
            throw new IllegalArgumentException("The dayOfWeek (" + dayElement.getText() + ") of pattern ("+ pattern.getCode()+ ") does not exist.");
          }
        }
      }
      patternList.add(pattern);
      if (patternMap.containsKey(pattern.getCode())) {
        throw new IllegalArgumentException("There are 2 patterns with the same code (" + pattern.getCode() + ").");
      }
      patternMap.put(pattern.getCode(),pattern);
      id++;
    }
  }
  nurseRoster.setPatternList(patternList);
}
