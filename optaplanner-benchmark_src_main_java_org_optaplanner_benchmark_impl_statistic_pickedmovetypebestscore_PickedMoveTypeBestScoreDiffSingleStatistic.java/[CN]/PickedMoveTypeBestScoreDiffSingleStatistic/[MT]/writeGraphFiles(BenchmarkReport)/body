{
  List<Map<String,XYSeries>> moveTypeToSeriesMapList=new ArrayList<Map<String,XYSeries>>(BenchmarkReport.CHARTED_SCORE_LEVEL_SIZE);
  for (  PickedMoveTypeBestScoreDiffStatisticPoint point : getPointList()) {
    long timeMillisSpent=point.getTimeMillisSpent();
    String moveType=point.getMoveType();
    double[] levelValues=ScoreUtils.extractLevelDoubles(point.getBestScoreDiff());
    for (int i=0; i < levelValues.length && i < BenchmarkReport.CHARTED_SCORE_LEVEL_SIZE; i++) {
      if (i >= moveTypeToSeriesMapList.size()) {
        moveTypeToSeriesMapList.add(new LinkedHashMap<String,XYSeries>());
      }
      Map<String,XYSeries> moveTypeToSeriesMap=moveTypeToSeriesMapList.get(i);
      XYSeries series=moveTypeToSeriesMap.get(moveType);
      if (series == null) {
        series=new XYSeries(moveType);
        moveTypeToSeriesMap.put(moveType,series);
      }
      series.add(timeMillisSpent,levelValues[i]);
    }
  }
  graphFileList=new ArrayList<File>(moveTypeToSeriesMapList.size());
  for (int scoreLevelIndex=0; scoreLevelIndex < moveTypeToSeriesMapList.size(); scoreLevelIndex++) {
    XYPlot plot=createPlot(benchmarkReport,scoreLevelIndex);
    XYItemRenderer renderer=new XYLineAndShapeRenderer(true,false);
    plot.setRenderer(renderer);
    XYSeriesCollection seriesCollection=new XYSeriesCollection();
    for (    XYSeries series : moveTypeToSeriesMapList.get(scoreLevelIndex).values()) {
      seriesCollection.addSeries(series);
    }
    plot.setDataset(seriesCollection);
    JFreeChart chart=new JFreeChart(singleBenchmarkResult.getName() + " picked move type best score diff level " + scoreLevelIndex+ " statistic",JFreeChart.DEFAULT_TITLE_FONT,plot,true);
    graphFileList.add(writeChartToImageFile(chart,"PickedMoveTypeBestScoreDiffStatisticLevel" + scoreLevelIndex));
  }
}
