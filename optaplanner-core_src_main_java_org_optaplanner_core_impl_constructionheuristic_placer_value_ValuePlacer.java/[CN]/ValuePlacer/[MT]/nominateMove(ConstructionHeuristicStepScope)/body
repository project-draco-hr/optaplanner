{
  Object entity=stepScope.getEntity();
  if (variableDescriptor.isInitialized(entity)) {
    return null;
  }
  Score maxScore=null;
  ConstructionHeuristicMoveScope nominatedMoveScope=null;
  int moveIndex=0;
  for (Iterator it=valueSelector.iterator(entity); it.hasNext(); ) {
    Object value=it.next();
    ConstructionHeuristicMoveScope moveScope=new ConstructionHeuristicMoveScope(stepScope);
    moveScope.setMoveIndex(moveIndex);
    Move move;
    if (variableDescriptor.isChained()) {
      move=new ChainedChangeMove(entity,variableDescriptor,value);
    }
 else {
      move=new ChangeMove(entity,variableDescriptor,value);
    }
    moveScope.setMove(move);
    if (!move.isMoveDoable(stepScope.getScoreDirector())) {
      logger.trace("        Ignoring not doable move ({}).",move);
    }
 else {
      doMove(moveScope);
      if (maxScore == null || moveScope.getScore().compareTo(maxScore) > 0) {
        maxScore=moveScope.getScore();
        nominatedMoveScope=moveScope;
      }
      if (moveIndex >= selectedCountLimit) {
        break;
      }
    }
    moveIndex++;
    if (termination.isPhaseTerminated(stepScope.getPhaseScope())) {
      break;
    }
  }
  return nominatedMoveScope;
}
