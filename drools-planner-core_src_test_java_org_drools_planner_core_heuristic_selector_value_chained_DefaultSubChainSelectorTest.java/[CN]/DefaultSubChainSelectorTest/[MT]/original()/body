{
  TestdataChainedAnchor a0=new TestdataChainedAnchor("a0");
  TestdataChainedEntity a1=new TestdataChainedEntity("a1",a0);
  TestdataChainedEntity a2=new TestdataChainedEntity("a2",a1);
  TestdataChainedEntity a3=new TestdataChainedEntity("a3",a2);
  TestdataChainedEntity a4=new TestdataChainedEntity("a4",a3);
  TestdataChainedAnchor b0=new TestdataChainedAnchor("b0");
  TestdataChainedEntity b1=new TestdataChainedEntity("b1",b0);
  TestdataChainedEntity b2=new TestdataChainedEntity("b2",b1);
  PlanningVariableDescriptor variableDescriptor=SelectorTestUtils.mockVariableDescriptor(TestdataChainedEntity.class,"chainedObject");
  when(variableDescriptor.isChained()).thenReturn(true);
  ValueSelector valueSelector=SelectorTestUtils.mockValueSelector(variableDescriptor,a0,a1,a2,a3,a4,b0,b1,b2);
  DefaultSubChainSelector subChainSelector=new DefaultSubChainSelector(valueSelector,false);
  ScoreDirector scoreDirector=mock(ScoreDirector.class);
  when(scoreDirector.getTrailingEntity(variableDescriptor,a0)).thenReturn(a1);
  when(scoreDirector.getTrailingEntity(variableDescriptor,a1)).thenReturn(a2);
  when(scoreDirector.getTrailingEntity(variableDescriptor,a2)).thenReturn(a3);
  when(scoreDirector.getTrailingEntity(variableDescriptor,a3)).thenReturn(a4);
  when(scoreDirector.getTrailingEntity(variableDescriptor,a4)).thenReturn(null);
  when(scoreDirector.getTrailingEntity(variableDescriptor,b0)).thenReturn(b1);
  when(scoreDirector.getTrailingEntity(variableDescriptor,b1)).thenReturn(b2);
  when(scoreDirector.getTrailingEntity(variableDescriptor,b2)).thenReturn(null);
  DefaultSolverScope solverScope=mock(DefaultSolverScope.class);
  when(solverScope.getScoreDirector()).thenReturn(scoreDirector);
  subChainSelector.solvingStarted(solverScope);
  AbstractSolverPhaseScope phaseScopeA=mock(AbstractSolverPhaseScope.class);
  when(phaseScopeA.getSolverScope()).thenReturn(solverScope);
  subChainSelector.phaseStarted(phaseScopeA);
  AbstractStepScope stepScopeA1=mock(AbstractStepScope.class);
  when(stepScopeA1.getSolverPhaseScope()).thenReturn(phaseScopeA);
  subChainSelector.stepStarted(stepScopeA1);
  runAssertsOriginal1(subChainSelector);
  subChainSelector.stepEnded(stepScopeA1);
  a4.setChainedObject(a2);
  a3.setChainedObject(b1);
  b2.setChainedObject(a3);
  when(scoreDirector.getTrailingEntity(variableDescriptor,a2)).thenReturn(a4);
  when(scoreDirector.getTrailingEntity(variableDescriptor,b1)).thenReturn(a3);
  when(scoreDirector.getTrailingEntity(variableDescriptor,a3)).thenReturn(b2);
  AbstractStepScope stepScopeA2=mock(AbstractStepScope.class);
  when(stepScopeA2.getSolverPhaseScope()).thenReturn(phaseScopeA);
  subChainSelector.stepStarted(stepScopeA2);
  runAssertsOriginal2(subChainSelector);
  subChainSelector.stepEnded(stepScopeA2);
  subChainSelector.phaseEnded(phaseScopeA);
  AbstractSolverPhaseScope phaseScopeB=mock(AbstractSolverPhaseScope.class);
  when(phaseScopeB.getSolverScope()).thenReturn(solverScope);
  subChainSelector.phaseStarted(phaseScopeB);
  AbstractStepScope stepScopeB1=mock(AbstractStepScope.class);
  when(stepScopeB1.getSolverPhaseScope()).thenReturn(phaseScopeB);
  subChainSelector.stepStarted(stepScopeB1);
  runAssertsOriginal2(subChainSelector);
  subChainSelector.stepEnded(stepScopeB1);
  subChainSelector.phaseEnded(phaseScopeB);
  subChainSelector.solvingEnded(solverScope);
  verify(valueSelector,times(1)).solvingStarted(solverScope);
  verify(valueSelector,times(2)).phaseStarted(Matchers.<AbstractSolverPhaseScope>any());
  verify(valueSelector,times(3)).stepStarted(Matchers.<AbstractStepScope>any());
  verify(valueSelector,times(3)).stepEnded(Matchers.<AbstractStepScope>any());
  verify(valueSelector,times(2)).phaseEnded(Matchers.<AbstractSolverPhaseScope>any());
  verify(valueSelector,times(1)).solvingEnded(solverScope);
}
