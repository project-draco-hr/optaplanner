{
  TestdataChainedAnchor a0=new TestdataChainedAnchor("a0");
  TestdataChainedEntity a1=new TestdataChainedEntity("a1");
  a1.setChainedObject(a0);
  TestdataChainedEntity a2=new TestdataChainedEntity("a2");
  a2.setChainedObject(a1);
  TestdataChainedEntity a3=new TestdataChainedEntity("a3");
  a3.setChainedObject(a2);
  TestdataChainedAnchor b0=new TestdataChainedAnchor("b0");
  TestdataChainedEntity b1=new TestdataChainedEntity("b1");
  b1.setChainedObject(b0);
  PlanningEntityDescriptor entityDescriptor=TestdataChainedEntity.buildEntityDescriptor();
  PlanningVariableDescriptor variableDescriptor=entityDescriptor.getPlanningVariableDescriptor("chainedObject");
  WorkingMemory workingMemory=mock(WorkingMemory.class);
  FactHandle a3FactHandle=mock(FactHandle.class);
  when(workingMemory.getFactHandle(a3)).thenReturn(a3FactHandle);
  GenericChainedChangeMove move=new GenericChainedChangeMove(a3,variableDescriptor,b1,null,null);
  move.doMove(workingMemory);
  assertEquals(a0,a1.getChainedObject());
  assertEquals(a1,a2.getChainedObject());
  assertEquals(b0,b1.getChainedObject());
  assertEquals(b1,a3.getChainedObject());
  verify(workingMemory).update(a3FactHandle,a3);
  verify(workingMemory,atLeast(0)).getFactHandle(anyObject());
  verifyNoMoreInteractions(workingMemory);
}
