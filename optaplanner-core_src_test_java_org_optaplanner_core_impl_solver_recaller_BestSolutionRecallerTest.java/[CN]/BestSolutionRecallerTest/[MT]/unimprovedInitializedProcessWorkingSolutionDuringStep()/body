{
  DefaultSolverScope<AbstractSolution> solverScope=new DefaultSolverScope<>();
  ConstructionHeuristicStepScope<AbstractSolution> stepScope=setupConstrunctionHeuristics(solverScope);
  AbstractSolution solution=mock(AbstractSolution.class);
  Score score=SimpleScore.parseScore("0");
  when(solution.getScore()).thenReturn(score);
  solverScope.setBestSolution(solution);
  solverScope.setBestScore(score);
  AbstractSolution solution2=mock(AbstractSolution.class);
  Score score2=SimpleScore.parseScore("-1");
  when(solution2.getScore()).thenReturn(score2);
  when(stepScope.createOrGetClonedSolution()).thenReturn(solution2);
  when(stepScope.getScore()).thenReturn(score2);
  when(stepScope.getUninitializedVariableCount()).thenReturn(0);
  solverScope.setBestUninitializedVariableCount(0);
  BestSolutionRecaller<AbstractSolution> recaller=createBestSolutionRecaller();
  recaller.processWorkingSolutionDuringStep(stepScope);
  assertEquals(solution,solverScope.getBestSolution());
  assertEquals(score,solverScope.getBestScore());
  assertEquals(0,solverScope.getBestUninitializedVariableCount());
}
