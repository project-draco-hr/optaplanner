{
  NumberAxis xAxis=new NumberAxis("Time spend");
  xAxis.setNumberFormatOverride(new MillisecondsSpendNumberFormat());
  NumberAxis yAxis=new NumberAxis("Score");
  yAxis.setAutoRangeIncludesZero(false);
  XYPlot plot=new XYPlot(null,xAxis,yAxis,null);
  int seriesIndex=0;
  for (  SingleBenchmark singleBenchmark : problemBenchmark.getSingleBenchmarkList()) {
    BestScoreSingleStatistic singleStatistic=(BestScoreSingleStatistic)singleBenchmark.getSingleStatistic(problemStatisticType);
    XYSeries series=new XYSeries(singleBenchmark.getSolverBenchmark().getName());
    for (    BestScoreSingleStatisticPoint point : singleStatistic.getPointList()) {
      long timeMillisSpend=point.getTimeMillisSpend();
      Score score=point.getScore();
      Double scoreGraphValue=scoreDefinition.translateScoreToGraphValue(score);
      if (scoreGraphValue != null) {
        series.add(timeMillisSpend,scoreGraphValue);
      }
    }
    XYSeriesCollection seriesCollection=new XYSeriesCollection();
    seriesCollection.addSeries(series);
    plot.setDataset(seriesIndex,seriesCollection);
    XYItemRenderer renderer;
    renderer=new XYStepRenderer();
    if (singleStatistic.getPointList().size() <= 1) {
      renderer=new StandardXYItemRenderer(StandardXYItemRenderer.SHAPES);
    }
    plot.setRenderer(seriesIndex,renderer);
    seriesIndex++;
  }
  plot.setOrientation(PlotOrientation.VERTICAL);
  JFreeChart chart=new JFreeChart(problemBenchmark.getName() + " best score statistic",JFreeChart.DEFAULT_TITLE_FONT,plot,true);
  BufferedImage chartImage=chart.createBufferedImage(1024,768);
  graphStatisticFile=new File(problemBenchmark.getProblemReportDirectory(),problemBenchmark.getName() + "BestScoreStatistic.png");
  OutputStream out=null;
  try {
    out=new FileOutputStream(graphStatisticFile);
    ImageIO.write(chartImage,"png",out);
  }
 catch (  IOException e) {
    throw new IllegalArgumentException("Problem writing graphStatisticFile: " + graphStatisticFile,e);
  }
 finally {
    IOUtils.closeQuietly(out);
  }
}
