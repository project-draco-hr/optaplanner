{
  NumberAxis xAxis=new NumberAxis("Time spend");
  xAxis.setNumberFormatOverride(new MillisecondsSpendNumberFormat());
  NumberAxis yAxis=new NumberAxis("Score");
  yAxis.setAutoRangeIncludesZero(false);
  XYPlot plot=new XYPlot(null,xAxis,yAxis,null);
  plot.setOrientation(PlotOrientation.VERTICAL);
  int seriesIndex=0;
  for (  SingleBenchmark singleBenchmark : problemBenchmark.getSingleBenchmarkList()) {
    XYSeries series=new XYSeries(singleBenchmark.getSolverBenchmark().getNameWithFavoriteSuffix());
    XYItemRenderer renderer=new XYStepRenderer();
    if (singleBenchmark.isSuccess()) {
      BestScoreSingleStatistic singleStatistic=(BestScoreSingleStatistic)singleBenchmark.getSingleStatistic(problemStatisticType);
      for (      BestScoreSingleStatisticPoint point : singleStatistic.getPointList()) {
        long timeMillisSpend=point.getTimeMillisSpend();
        Score score=point.getScore();
        double[] scoreLevels=score.toDoubleLevels();
        Double scoreGraphValue=scoreLevels[scoreLevels.length - 1];
        if (scoreGraphValue != null) {
          series.add(timeMillisSpend,scoreGraphValue);
        }
      }
      if (singleStatistic.getPointList().size() <= 1) {
        renderer=new StandardXYItemRenderer(StandardXYItemRenderer.SHAPES);
      }
    }
    plot.setDataset(seriesIndex,new XYSeriesCollection(series));
    if (singleBenchmark.getSolverBenchmark().isFavorite()) {
      renderer.setSeriesStroke(0,new BasicStroke(2.0f));
    }
    plot.setRenderer(seriesIndex,renderer);
    seriesIndex++;
  }
  JFreeChart chart=new JFreeChart(problemBenchmark.getName() + " best score statistic",JFreeChart.DEFAULT_TITLE_FONT,plot,true);
  BufferedImage chartImage=chart.createBufferedImage(1024,768);
  graphStatisticFile=new File(problemBenchmark.getProblemReportDirectory(),problemBenchmark.getName() + "BestScoreStatistic.png");
  OutputStream out=null;
  try {
    out=new FileOutputStream(graphStatisticFile);
    ImageIO.write(chartImage,"png",out);
  }
 catch (  IOException e) {
    throw new IllegalArgumentException("Problem writing graphStatisticFile: " + graphStatisticFile,e);
  }
 finally {
    IOUtils.closeQuietly(out);
  }
}
