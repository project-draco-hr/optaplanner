{
  PlanningEntityDescriptor entityDescriptor=mock(PlanningEntityDescriptor.class);
  when(entityDescriptor.getPlanningEntityClass()).thenReturn((Class)TestdataEntity.class);
  EntitySelector leftEntitySelector=SelectorTestUtils.mockEntitySelector(entityDescriptor,new TestdataEntity("a"),new TestdataEntity("b"),new TestdataEntity("c"),new TestdataEntity("d"));
  EntitySelector rightEntitySelector=SelectorTestUtils.mockEntitySelector(entityDescriptor,new TestdataEntity("x"),new TestdataEntity("y"),new TestdataEntity("z"));
  SwapMoveSelector moveSelector=new SwapMoveSelector(leftEntitySelector,rightEntitySelector,false);
  DefaultSolverScope solverScope=mock(DefaultSolverScope.class);
  moveSelector.solvingStarted(solverScope);
  AbstractSolverPhaseScope phaseScopeA=mock(AbstractSolverPhaseScope.class);
  when(phaseScopeA.getSolverScope()).thenReturn(solverScope);
  moveSelector.phaseStarted(phaseScopeA);
  AbstractStepScope stepScopeA1=mock(AbstractStepScope.class);
  when(stepScopeA1.getSolverPhaseScope()).thenReturn(phaseScopeA);
  moveSelector.stepStarted(stepScopeA1);
  runAssertsNonrandomLeftUnequalsRight(moveSelector);
  moveSelector.stepEnded(stepScopeA1);
  AbstractStepScope stepScopeA2=mock(AbstractStepScope.class);
  when(stepScopeA2.getSolverPhaseScope()).thenReturn(phaseScopeA);
  moveSelector.stepStarted(stepScopeA2);
  runAssertsNonrandomLeftUnequalsRight(moveSelector);
  moveSelector.stepEnded(stepScopeA2);
  moveSelector.phaseEnded(phaseScopeA);
  AbstractSolverPhaseScope phaseScopeB=mock(AbstractSolverPhaseScope.class);
  when(phaseScopeB.getSolverScope()).thenReturn(solverScope);
  moveSelector.phaseStarted(phaseScopeB);
  AbstractStepScope stepScopeB1=mock(AbstractStepScope.class);
  when(stepScopeB1.getSolverPhaseScope()).thenReturn(phaseScopeB);
  moveSelector.stepStarted(stepScopeB1);
  runAssertsNonrandomLeftUnequalsRight(moveSelector);
  moveSelector.stepEnded(stepScopeB1);
  AbstractStepScope stepScopeB2=mock(AbstractStepScope.class);
  when(stepScopeB2.getSolverPhaseScope()).thenReturn(phaseScopeB);
  moveSelector.stepStarted(stepScopeB2);
  runAssertsNonrandomLeftUnequalsRight(moveSelector);
  moveSelector.stepEnded(stepScopeB2);
  AbstractStepScope stepScopeB3=mock(AbstractStepScope.class);
  when(stepScopeB3.getSolverPhaseScope()).thenReturn(phaseScopeB);
  moveSelector.stepStarted(stepScopeB3);
  runAssertsNonrandomLeftUnequalsRight(moveSelector);
  moveSelector.stepEnded(stepScopeB3);
  moveSelector.phaseEnded(phaseScopeB);
  moveSelector.solvingEnded(solverScope);
  verify(leftEntitySelector,times(1)).solvingStarted(solverScope);
  verify(leftEntitySelector,times(2)).phaseStarted(Matchers.<AbstractSolverPhaseScope>any());
  verify(leftEntitySelector,times(5)).stepStarted(Matchers.<AbstractStepScope>any());
  verify(leftEntitySelector,times(5)).stepEnded(Matchers.<AbstractStepScope>any());
  verify(leftEntitySelector,times(2)).phaseEnded(Matchers.<AbstractSolverPhaseScope>any());
  verify(leftEntitySelector,times(1)).solvingEnded(solverScope);
  verify(rightEntitySelector,times(1)).solvingStarted(solverScope);
  verify(rightEntitySelector,times(2)).phaseStarted(Matchers.<AbstractSolverPhaseScope>any());
  verify(rightEntitySelector,times(5)).stepStarted(Matchers.<AbstractStepScope>any());
  verify(rightEntitySelector,times(5)).stepEnded(Matchers.<AbstractStepScope>any());
  verify(rightEntitySelector,times(2)).phaseEnded(Matchers.<AbstractSolverPhaseScope>any());
  verify(rightEntitySelector,times(1)).solvingEnded(solverScope);
}
