{
  CloudComputer computer=process.getComputer();
  if (computer != null) {
    int cpuPower=computer.getCpuPower();
    int oldCpuPowerUsage=cpuPowerUsageMap.get(computer);
    int oldCpuPowerAvailable=cpuPower - oldCpuPowerUsage;
    int newCpuPowerUsage=oldCpuPowerUsage - process.getRequiredCpuPower();
    int newCpuPowerAvailable=cpuPower - newCpuPowerUsage;
    hardScore+=Math.min(newCpuPowerAvailable,0) - Math.min(oldCpuPowerAvailable,0);
    cpuPowerUsageMap.put(computer,newCpuPowerUsage);
    int memory=computer.getMemory();
    int oldMemoryUsage=memoryUsageMap.get(computer);
    int oldMemoryAvailable=memory - oldMemoryUsage;
    int newMemoryUsage=oldMemoryUsage - process.getRequiredMemory();
    int newMemoryAvailable=memory - newMemoryUsage;
    hardScore+=Math.min(newMemoryAvailable,0) - Math.min(oldMemoryAvailable,0);
    memoryUsageMap.put(computer,newMemoryUsage);
    int networkBandwidth=computer.getNetworkBandwidth();
    int oldNetworkBandwidthUsage=networkBandwidthUsageMap.get(computer);
    int oldNetworkBandwidthAvailable=networkBandwidth - oldNetworkBandwidthUsage;
    int newNetworkBandwidthUsage=oldNetworkBandwidthUsage - process.getRequiredNetworkBandwidth();
    int newNetworkBandwidthAvailable=networkBandwidth - newNetworkBandwidthUsage;
    hardScore+=Math.min(newNetworkBandwidthAvailable,0) - Math.min(oldNetworkBandwidthAvailable,0);
    networkBandwidthUsageMap.put(computer,newNetworkBandwidthUsage);
    int oldProcessCount=processCountMap.get(computer);
    int newProcessCount=oldProcessCount - 1;
    if (newProcessCount == 0) {
      softScore+=computer.getCost();
    }
    processCountMap.put(computer,newProcessCount);
  }
}
