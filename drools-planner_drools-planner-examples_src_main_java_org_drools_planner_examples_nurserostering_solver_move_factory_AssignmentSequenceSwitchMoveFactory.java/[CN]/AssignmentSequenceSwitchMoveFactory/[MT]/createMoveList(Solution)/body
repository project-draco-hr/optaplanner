{
  NurseRoster nurseRoster=(NurseRoster)solution;
  List<Employee> employeeList=nurseRoster.getEmployeeList();
  List<Assignment> assignmentList=nurseRoster.getAssignmentList();
  Map<Employee,List<AssignmentSequence>> employeeToAssignmentSequenceListMap=new HashMap<Employee,List<AssignmentSequence>>(employeeList.size());
  int assignmentSequenceCapacity=nurseRoster.getShiftDateList().size() + 1 / 2;
  for (  Employee employee : employeeList) {
    employeeToAssignmentSequenceListMap.put(employee,new ArrayList<AssignmentSequence>(assignmentSequenceCapacity));
  }
  for (  Assignment assignment : assignmentList) {
    Employee employee=assignment.getEmployee();
    List<AssignmentSequence> assignmentSequenceList=employeeToAssignmentSequenceListMap.get(employee);
    if (assignmentSequenceList.isEmpty()) {
      AssignmentSequence assignmentSequence=new AssignmentSequence(assignment);
      assignmentSequenceList.add(assignmentSequence);
    }
 else {
      AssignmentSequence lastAssignmentSequence=assignmentSequenceList.get(assignmentSequenceList.size() - 1);
      if (lastAssignmentSequence.belongsHere(assignment)) {
        lastAssignmentSequence.add(assignment);
      }
 else {
        AssignmentSequence assignmentSequence=new AssignmentSequence(assignment);
        assignmentSequenceList.add(assignmentSequence);
      }
    }
  }
  List<Move> moveList=new ArrayList<Move>();
  for (ListIterator<Employee> leftEmployeeIt=employeeList.listIterator(); leftEmployeeIt.hasNext(); ) {
    Employee leftEmployee=leftEmployeeIt.next();
    List<AssignmentSequence> leftAssignmentSequenceList=employeeToAssignmentSequenceListMap.get(leftEmployee);
    for (ListIterator<Employee> rightEmployeeIt=employeeList.listIterator(leftEmployeeIt.nextIndex()); rightEmployeeIt.hasNext(); ) {
      Employee rightEmployee=rightEmployeeIt.next();
      List<AssignmentSequence> rightAssignmentSequenceList=employeeToAssignmentSequenceListMap.get(rightEmployee);
      for (      AssignmentSequence leftAssignmentSequence : leftAssignmentSequenceList) {
        List<Assignment> leftAssignmentList=leftAssignmentSequence.getAssignmentList();
        for (        AssignmentSequence rightAssignmentSequence : rightAssignmentSequenceList) {
          List<Assignment> rightAssignmentList=rightAssignmentSequence.getAssignmentList();
          if (leftAssignmentList.size() > 1 || rightAssignmentList.size() > 1) {
            int pillarSize=2;
            List<Move> subMoveList=new ArrayList<Move>(pillarSize * 2);
            for (            Assignment leftAssignment : leftAssignmentList.subList(0,Math.min(pillarSize,leftAssignmentList.size()))) {
              subMoveList.add(new EmployeeChangeMove(leftAssignment,rightEmployee));
            }
            for (            Assignment rightAssignment : rightAssignmentList.subList(0,Math.min(pillarSize,rightAssignmentList.size()))) {
              subMoveList.add(new EmployeeChangeMove(rightAssignment,leftEmployee));
            }
            moveList.add(new CompositeMove(subMoveList));
          }
        }
      }
    }
  }
  return moveList;
}
