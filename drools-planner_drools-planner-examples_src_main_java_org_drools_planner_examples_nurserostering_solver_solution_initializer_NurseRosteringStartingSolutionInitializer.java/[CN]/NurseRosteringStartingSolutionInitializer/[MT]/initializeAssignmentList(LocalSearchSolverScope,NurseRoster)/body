{
  List<Shift> shiftList=nurseRoster.getShiftList();
  WorkingMemory workingMemory=localSearchSolverScope.getWorkingMemory();
  List<Assignment> assignmentList=createAssignmentList(nurseRoster);
  for (  Assignment assignment : assignmentList) {
    FactHandle assignmentHandle=null;
    Score bestScore=DefaultHardAndSoftScore.valueOf(Integer.MIN_VALUE,Integer.MIN_VALUE);
    Shift bestShift=null;
    for (    Shift shift : shiftList) {
      if (assignmentHandle == null) {
        assignment.setShift(shift);
        assignmentHandle=workingMemory.insert(assignment);
      }
 else {
        assignment.setShift(shift);
        workingMemory.update(assignmentHandle,assignment);
      }
      Score score=localSearchSolverScope.calculateScoreFromWorkingMemory();
      if (score.compareTo(bestScore) > 0) {
        bestScore=score;
        bestShift=shift;
      }
    }
    if (bestShift == null || bestShift == null) {
      throw new IllegalStateException("The bestShift (" + bestShift + ") cannot be null.");
    }
    assignment.setShift(bestShift);
    workingMemory.update(assignmentHandle,assignment);
    logger.debug("    Assignment ({}) initialized for starting solution.",assignment);
  }
  Collections.sort(assignmentList,new PersistableIdComparator());
  nurseRoster.setEmployeeAssignmentList(assignmentList);
}
