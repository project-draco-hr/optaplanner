{
  List<Move> moveList=new ArrayList<Move>();
  Solution workingSolution=solutionDirector.getWorkingSolution();
  WorkingMemory workingMemory=solutionDirector.getWorkingMemory();
  for (  PlanningEntityDescriptor entityDescriptor : solutionDescriptor.getPlanningEntityDescriptors()) {
    for (    PlanningVariableDescriptor variableDescriptor : entityDescriptor.getPlanningVariableDescriptors()) {
      if (variableDescriptor.isChained()) {
        Map<Object,List<Object>> variableToEntitiesMap=solutionDirector.getVariableToEntitiesMap(variableDescriptor);
        Collection<?> values=variableDescriptor.extractAllPlanningValues(workingSolution);
        if (values.size() > 500) {
          throw new IllegalStateException("TODO fix JBRULES-3371 so this works.");
        }
        for (        Object anchor : values) {
          if (!entityDescriptor.getPlanningEntityClass().isAssignableFrom(anchor.getClass())) {
            List<Object> anchorWithChain=new ArrayList<Object>(values.size());
            anchorWithChain.add(anchor);
            List<Object> trailingEntities=variableToEntitiesMap.get(anchor);
            while (trailingEntities != null) {
              if (trailingEntities.size() > 1) {
                throw new IllegalStateException("The planningValue (" + anchor + ") has multiple trailing entities ("+ trailingEntities+ ") pointing to it for chained planningVariable ("+ variableDescriptor.getVariablePropertyName()+ ").");
              }
              Object trailingEntity=trailingEntities.get(0);
              anchorWithChain.add(trailingEntity);
              trailingEntities=variableToEntitiesMap.get(trailingEntity);
            }
            int chainSize=anchorWithChain.size();
            for (int fromIndex=1; fromIndex < chainSize; fromIndex++) {
              Object oldToValue=anchorWithChain.get(fromIndex - 1);
              for (int toIndex=fromIndex + 2; toIndex <= chainSize; toIndex++) {
                List<Object> entitiesSubChain=anchorWithChain.subList(fromIndex,toIndex);
                Object oldTrailingEntity;
                FactHandle oldTrailingEntityFactHandle;
                if (toIndex < chainSize) {
                  oldTrailingEntity=anchorWithChain.get(toIndex);
                  oldTrailingEntityFactHandle=workingMemory.getFactHandle(oldTrailingEntity);
                }
 else {
                  oldTrailingEntity=null;
                  oldTrailingEntityFactHandle=null;
                }
                for (                Object toValue : values) {
                  if (!entitiesSubChain.contains(toValue)) {
                    Object newTrailingEntity=findTrailingEntity(variableToEntitiesMap,variableDescriptor,toValue);
                    FactHandle newTrailingEntityFactHandle=newTrailingEntity == null ? null : workingMemory.getFactHandle(newTrailingEntity);
                    if (!oldToValue.equals((toValue))) {
                      moveList.add(new GenericChainedChangePartMove(entitiesSubChain,variableDescriptor,toValue,oldTrailingEntity,oldTrailingEntityFactHandle,newTrailingEntity,newTrailingEntityFactHandle));
                    }
                    if (chainSize != entitiesSubChain.size()) {
                      moveList.add(new GenericReverseChainedChangePartMove(entitiesSubChain,variableDescriptor,toValue,oldTrailingEntity,oldTrailingEntityFactHandle,newTrailingEntity,newTrailingEntityFactHandle));
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return moveList;
}
