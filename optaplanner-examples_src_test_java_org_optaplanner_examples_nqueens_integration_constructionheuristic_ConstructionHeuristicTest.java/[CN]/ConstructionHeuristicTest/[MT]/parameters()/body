{
  Collection params=new ArrayList();
  params.add(new Object[]{ConstructionHeuristicType.FIRST_FIT,null,null,Arrays.asList(new QueenCoordinates(0,0),new QueenCoordinates(1,2),new QueenCoordinates(2,4),new QueenCoordinates(3,1),new QueenCoordinates(4,3),new QueenCoordinates(5,0),new QueenCoordinates(6,2),new QueenCoordinates(7,4))});
  params.add(new Object[]{ConstructionHeuristicType.FIRST_FIT_DECREASING,null,null,Arrays.asList(new QueenCoordinates(4,0),new QueenCoordinates(3,2),new QueenCoordinates(5,3),new QueenCoordinates(2,4),new QueenCoordinates(6,1),new QueenCoordinates(1,1),new QueenCoordinates(7,4),new QueenCoordinates(0,3))});
  params.add(new Object[]{ConstructionHeuristicType.WEAKEST_FIT,null,null,Arrays.asList(new QueenCoordinates(0,3),new QueenCoordinates(1,5),new QueenCoordinates(2,2),new QueenCoordinates(3,4),new QueenCoordinates(4,1),new QueenCoordinates(5,7),new QueenCoordinates(6,4),new QueenCoordinates(7,6))});
  params.add(new Object[]{ConstructionHeuristicType.WEAKEST_FIT_DECREASING,null,null,Arrays.asList(new QueenCoordinates(4,3),new QueenCoordinates(3,5),new QueenCoordinates(5,1),new QueenCoordinates(2,2),new QueenCoordinates(6,4),new QueenCoordinates(1,4),new QueenCoordinates(7,2),new QueenCoordinates(0,1))});
  params.add(new Object[]{ConstructionHeuristicType.STRONGEST_FIT,null,null,Arrays.asList(new QueenCoordinates(0,7),new QueenCoordinates(1,0),new QueenCoordinates(2,6),new QueenCoordinates(3,1),new QueenCoordinates(4,5),new QueenCoordinates(5,7),new QueenCoordinates(6,0),new QueenCoordinates(7,4))});
  params.add(new Object[]{ConstructionHeuristicType.STRONGEST_FIT_DECREASING,null,null,Arrays.asList(new QueenCoordinates(4,7),new QueenCoordinates(3,0),new QueenCoordinates(5,1),new QueenCoordinates(2,6),new QueenCoordinates(6,4),new QueenCoordinates(1,3),new QueenCoordinates(7,2),new QueenCoordinates(0,5))});
  params.add(new Object[]{ConstructionHeuristicType.CHEAPEST_INSERTION,null,null,Arrays.asList(new QueenCoordinates(4,3),new QueenCoordinates(3,5),new QueenCoordinates(5,1),new QueenCoordinates(2,2),new QueenCoordinates(6,4),new QueenCoordinates(1,4),new QueenCoordinates(7,2),new QueenCoordinates(0,1))});
  params.add(new Object[]{ConstructionHeuristicType.ALLOCATE_ENTITY_FROM_QUEUE,null,null,Arrays.asList(new QueenCoordinates(4,3),new QueenCoordinates(3,5),new QueenCoordinates(5,1),new QueenCoordinates(2,2),new QueenCoordinates(6,4),new QueenCoordinates(1,4),new QueenCoordinates(7,2),new QueenCoordinates(0,1))});
  params.add(new Object[]{ConstructionHeuristicType.ALLOCATE_ENTITY_FROM_QUEUE,EntitySorterManner.NONE,ValueSorterManner.NONE,Arrays.asList(new QueenCoordinates(0,0),new QueenCoordinates(1,2),new QueenCoordinates(2,4),new QueenCoordinates(3,1),new QueenCoordinates(4,3),new QueenCoordinates(5,0),new QueenCoordinates(6,2),new QueenCoordinates(7,4))});
  params.add(new Object[]{ConstructionHeuristicType.ALLOCATE_ENTITY_FROM_QUEUE,EntitySorterManner.DECREASING_DIFFICULTY,ValueSorterManner.NONE,Arrays.asList(new QueenCoordinates(4,0),new QueenCoordinates(3,2),new QueenCoordinates(5,3),new QueenCoordinates(2,4),new QueenCoordinates(6,1),new QueenCoordinates(1,1),new QueenCoordinates(7,4),new QueenCoordinates(0,3))});
  params.add(new Object[]{ConstructionHeuristicType.ALLOCATE_ENTITY_FROM_QUEUE,EntitySorterManner.DECREASING_DIFFICULTY_IF_AVAILABLE,ValueSorterManner.NONE,Arrays.asList(new QueenCoordinates(4,0),new QueenCoordinates(3,2),new QueenCoordinates(5,3),new QueenCoordinates(2,4),new QueenCoordinates(6,1),new QueenCoordinates(1,1),new QueenCoordinates(7,4),new QueenCoordinates(0,3))});
  params.add(new Object[]{ConstructionHeuristicType.ALLOCATE_ENTITY_FROM_QUEUE,EntitySorterManner.NONE,ValueSorterManner.INCREASING_STRENGTH,Arrays.asList(new QueenCoordinates(0,3),new QueenCoordinates(1,5),new QueenCoordinates(2,2),new QueenCoordinates(3,4),new QueenCoordinates(4,1),new QueenCoordinates(5,7),new QueenCoordinates(6,4),new QueenCoordinates(7,6))});
  params.add(new Object[]{ConstructionHeuristicType.ALLOCATE_ENTITY_FROM_QUEUE,EntitySorterManner.NONE,ValueSorterManner.DECREASING_STRENGTH,Arrays.asList(new QueenCoordinates(0,7),new QueenCoordinates(1,0),new QueenCoordinates(2,6),new QueenCoordinates(3,1),new QueenCoordinates(4,5),new QueenCoordinates(5,7),new QueenCoordinates(6,0),new QueenCoordinates(7,4))});
  params.add(new Object[]{ConstructionHeuristicType.ALLOCATE_ENTITY_FROM_QUEUE,EntitySorterManner.DECREASING_DIFFICULTY,ValueSorterManner.DECREASING_STRENGTH_IF_AVAILABLE,Arrays.asList(new QueenCoordinates(4,7),new QueenCoordinates(3,0),new QueenCoordinates(5,1),new QueenCoordinates(2,6),new QueenCoordinates(6,4),new QueenCoordinates(1,3),new QueenCoordinates(7,2),new QueenCoordinates(0,5))});
  params.add(new Object[]{ConstructionHeuristicType.ALLOCATE_ENTITY_FROM_QUEUE,EntitySorterManner.DECREASING_DIFFICULTY,ValueSorterManner.INCREASING_STRENGTH_IF_AVAILABLE,Arrays.asList(new QueenCoordinates(4,3),new QueenCoordinates(3,5),new QueenCoordinates(5,1),new QueenCoordinates(2,2),new QueenCoordinates(6,4),new QueenCoordinates(1,4),new QueenCoordinates(7,2),new QueenCoordinates(0,1))});
  return params;
}
