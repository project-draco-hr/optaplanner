{
  List<XYSeries> seriesList=new ArrayList<XYSeries>(plannerBenchmarkResult.getSolverBenchmarkResultList().size());
  for (  SolverBenchmarkResult solverBenchmarkResult : plannerBenchmarkResult.getSolverBenchmarkResultList()) {
    String solverLabel=solverBenchmarkResult.getNameWithFavoriteSuffix();
    XYSeries series=new XYSeries(solverLabel);
    for (    SingleBenchmarkResult singleBenchmarkResult : solverBenchmarkResult.getSingleBenchmarkResultList()) {
      if (singleBenchmarkResult.isSuccess()) {
        long problemScale=singleBenchmarkResult.getProblemBenchmarkResult().getProblemScale();
        long timeMillisSpend=singleBenchmarkResult.getTimeMillisSpend();
        series.add((Long)problemScale,(Long)timeMillisSpend);
      }
    }
    seriesList.add(series);
  }
  XYPlot plot=createScalabilityPlot(seriesList,"Problem scale",NumberFormat.getInstance(locale),"Time spend",new MillisecondsSpendNumberFormat(locale));
  JFreeChart chart=new JFreeChart("Time spend scalability summary (lower is better)",JFreeChart.DEFAULT_TITLE_FONT,plot,true);
  timeSpendScalabilitySummaryChartFile=writeChartToImageFile(chart,"timeSpendScalabilitySummary");
}
