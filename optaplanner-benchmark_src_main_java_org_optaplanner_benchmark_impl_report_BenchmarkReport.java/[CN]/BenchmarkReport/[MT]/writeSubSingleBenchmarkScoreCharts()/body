{
  subSingleBenchmarkAggregationChartFileMap=new HashMap<ProblemBenchmarkResult,List<File>>();
  CategoryAxis xAxis=new CategoryAxis("Solver Configurations");
  NumberAxis yAxis=new NumberAxis("Scores distribution of single benchmark runs");
  yAxis.setAutoRangeIncludesZero(false);
  BoxAndWhiskerRenderer renderer=new BoxAndWhiskerRenderer(){
    @Override public int getRowCount(){
      return 1;
    }
  }
;
  renderer.setFillBox(true);
  renderer.setUseOutlinePaintForWhiskers(true);
  renderer.setMedianVisible(true);
  renderer.setMeanVisible(false);
  renderer.setItemMargin(0.0d);
  for (  ProblemBenchmarkResult problemBenchmarkResult : plannerBenchmarkResult.getUnifiedProblemBenchmarkResultList()) {
    List<? extends BoxAndWhiskerCategoryDataset> datasetList=generateSubSingleBenchmarkScoreSummary(problemBenchmarkResult);
    List<File> chartFileList=new ArrayList<File>(datasetList.size());
    int scoreLevelIndex=0;
    for (    BoxAndWhiskerCategoryDataset dataset : datasetList) {
      CategoryPlot plot=new CategoryPlot(dataset,xAxis,yAxis,renderer);
      plot.setOrientation(PlotOrientation.VERTICAL);
      JFreeChart chart=new JFreeChart(problemBenchmarkResult + " (level " + scoreLevelIndex+ ") single benchmark runs score distribution",JFreeChart.DEFAULT_TITLE_FONT,plot,true);
      chartFileList.add(writeChartToImageFile(chart,"SubSingleSummary" + problemBenchmarkResult.getAnchorId() + "Level"+ scoreLevelIndex));
      scoreLevelIndex++;
    }
    subSingleBenchmarkAggregationChartFileMap.put(problemBenchmarkResult,chartFileList);
  }
}
