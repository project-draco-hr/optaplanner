{
  List<List<XYSeries>> seriesListList=new ArrayList<>(CHARTED_SCORE_LEVEL_SIZE);
  int solverBenchmarkIndex=0;
  for (  SolverBenchmarkResult solverBenchmarkResult : plannerBenchmarkResult.getSolverBenchmarkResultList()) {
    String solverLabel=solverBenchmarkResult.getNameWithFavoriteSuffix();
    for (    SingleBenchmarkResult singleBenchmarkResult : solverBenchmarkResult.getSingleBenchmarkResultList()) {
      if (singleBenchmarkResult.hasAllSuccess()) {
        long timeMillisSpent=singleBenchmarkResult.getTimeMillisSpent();
        double[] levelValues=ScoreUtils.extractLevelDoubles(singleBenchmarkResult.getAverageScore());
        for (int i=0; i < levelValues.length && i < CHARTED_SCORE_LEVEL_SIZE; i++) {
          if (i >= seriesListList.size()) {
            seriesListList.add(new ArrayList<>(plannerBenchmarkResult.getSolverBenchmarkResultList().size()));
          }
          List<XYSeries> seriesList=seriesListList.get(i);
          while (solverBenchmarkIndex >= seriesList.size()) {
            seriesList.add(new XYSeries(solverLabel));
          }
          seriesList.get(solverBenchmarkIndex).add((Long)timeMillisSpent,(Double)levelValues[i]);
        }
      }
    }
    solverBenchmarkIndex++;
  }
  bestScorePerTimeSpentSummaryChartFileList=new ArrayList<>(seriesListList.size());
  int scoreLevelIndex=0;
  for (  List<XYSeries> seriesList : seriesListList) {
    XYPlot plot=createScalabilityPlot(seriesList,"Time spent",new MillisecondsSpentNumberFormat(locale),"Score level " + scoreLevelIndex,NumberFormat.getInstance(locale));
    JFreeChart chart=new JFreeChart("Best score per time spent level " + scoreLevelIndex + " summary (higher left is better)",JFreeChart.DEFAULT_TITLE_FONT,plot,true);
    bestScorePerTimeSpentSummaryChartFileList.add(writeChartToImageFile(chart,"bestScorePerTimeSpentSummaryLevel" + scoreLevelIndex));
    scoreLevelIndex++;
  }
}
