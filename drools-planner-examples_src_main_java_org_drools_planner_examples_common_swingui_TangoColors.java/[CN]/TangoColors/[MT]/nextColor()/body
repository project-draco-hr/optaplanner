{
  Color color;
  int colorIndex=nextColorCount % SEQUENCE_1.length;
  int shadeIndex=nextColorCount / SEQUENCE_1.length;
  if (shadeIndex == 0) {
    color=SEQUENCE_1[colorIndex];
  }
 else   if (shadeIndex == 1) {
    color=SEQUENCE_2[colorIndex];
  }
 else   if (shadeIndex == 2) {
    color=SEQUENCE_3[colorIndex];
  }
 else {
    shadeIndex-=3;
    Color floorColor;
    Color ceilColor;
    if (shadeIndex % 2 == 0) {
      floorColor=SEQUENCE_2[colorIndex];
      ceilColor=SEQUENCE_1[colorIndex];
    }
 else {
      floorColor=SEQUENCE_3[colorIndex];
      ceilColor=SEQUENCE_2[colorIndex];
    }
    int base=(shadeIndex / 2) + 1;
    int divisor=2;
    while (base >= divisor) {
      divisor*=2;
    }
    base=(base * 2) - divisor + 1;
    double shadePercentage=((double)base) / (double)divisor;
    color=new Color(floorColor.getRed() + (int)(shadePercentage * (ceilColor.getRed() - floorColor.getRed())),floorColor.getGreen() + (int)(shadePercentage * (ceilColor.getGreen() - floorColor.getGreen())),floorColor.getBlue() + (int)(shadePercentage * (ceilColor.getBlue() - floorColor.getBlue())));
  }
  nextColorCount++;
  return color;
}
