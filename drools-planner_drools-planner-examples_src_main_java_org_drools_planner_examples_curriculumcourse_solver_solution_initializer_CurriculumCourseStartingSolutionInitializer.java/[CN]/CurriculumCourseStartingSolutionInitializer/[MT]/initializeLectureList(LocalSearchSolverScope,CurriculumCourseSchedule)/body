{
  List<Period> periodList=schedule.getPeriodList();
  List<Room> roomList=schedule.getRoomList();
  WorkingMemory workingMemory=localSearchSolverScope.getWorkingMemory();
  List<Lecture> lectureList=createLectureList(schedule);
  for (  Lecture lecture : lectureList) {
    Score unscheduledScore=localSearchSolverScope.calculateScoreFromWorkingMemory();
    FactHandle lectureHandle=null;
    List<PeriodScoring> periodScoringList=new ArrayList<PeriodScoring>(periodList.size());
    for (    Period period : periodList) {
      if (lectureHandle == null) {
        lecture.setPeriod(period);
        lectureHandle=workingMemory.insert(lecture);
      }
 else {
        lecture.setPeriod(period);
        workingMemory.update(lectureHandle,lecture);
      }
      Score score=localSearchSolverScope.calculateScoreFromWorkingMemory();
      periodScoringList.add(new PeriodScoring(period,score));
    }
    Collections.sort(periodScoringList);
    boolean almostPerfectMatch=false;
    Score bestScore=DefaultHardAndSoftScore.valueOf(Integer.MIN_VALUE,Integer.MIN_VALUE);
    Period bestPeriod=null;
    Room bestRoom=null;
    for (    PeriodScoring periodScoring : periodScoringList) {
      if (bestScore.compareTo(periodScoring.getScore()) >= 0) {
        break;
      }
      lecture.setPeriod(periodScoring.getPeriod());
      workingMemory.update(lectureHandle,lecture);
      for (      Room room : roomList) {
        lecture.setRoom(room);
        workingMemory.update(lectureHandle,lecture);
        Score score=localSearchSolverScope.calculateScoreFromWorkingMemory();
        if (score.compareTo(unscheduledScore) < 0) {
          if (score.compareTo(bestScore) > 0) {
            bestScore=score;
            bestPeriod=periodScoring.getPeriod();
            bestRoom=room;
          }
        }
 else         if (score.compareTo(unscheduledScore) >= 0) {
          almostPerfectMatch=true;
          break;
        }
      }
      if (almostPerfectMatch) {
        break;
      }
    }
    if (!almostPerfectMatch) {
      if (bestPeriod == null || bestRoom == null) {
        throw new IllegalStateException("The bestPeriod (" + bestPeriod + ") or the bestRoom ("+ bestRoom+ ") cannot be null.");
      }
      lecture.setPeriod(bestPeriod);
      lecture.setRoom(bestRoom);
      workingMemory.update(lectureHandle,lecture);
    }
    logger.debug("    Lecture ({}) initialized for starting solution.",lecture);
  }
  Collections.sort(lectureList,new PersistableIdComparator());
  schedule.setLectureList(lectureList);
}
