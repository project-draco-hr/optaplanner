{
  this.leftEntitySelector=leftEntitySelector;
  this.rightEntitySelector=rightEntitySelector;
  this.randomSelection=randomSelection;
  PlanningEntityDescriptor leftEntityDescriptor=leftEntitySelector.getEntityDescriptor();
  PlanningEntityDescriptor rightEntityDescriptor=rightEntitySelector.getEntityDescriptor();
  if (!leftEntityDescriptor.getPlanningEntityClass().equals(rightEntityDescriptor.getPlanningEntityClass())) {
    throw new IllegalStateException("The moveSelector (" + this.getClass() + ") has a leftEntitySelector's planningEntityClass ("+ leftEntityDescriptor.getPlanningEntityClass()+ ") which is not equal to the rightEntitySelector's planningEntityClass ("+ rightEntityDescriptor.getPlanningEntityClass()+ ").");
  }
  variableDescriptors=leftEntityDescriptor.getPlanningVariableDescriptors();
  boolean anyChained=false;
  for (  PlanningVariableDescriptor variableDescriptor : variableDescriptors) {
    if (variableDescriptor.isChained()) {
      anyChained=true;
    }
  }
  this.anyChained=anyChained;
  solverPhaseLifecycleSupport.addEventListener(leftEntitySelector);
  solverPhaseLifecycleSupport.addEventListener(rightEntitySelector);
}
