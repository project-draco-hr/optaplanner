{
  List<Termination> terminationList=new ArrayList<Termination>();
  if (terminationClass != null) {
    Termination termination=ConfigUtils.newInstance(this,"terminationClass",terminationClass);
    terminationList.add(termination);
  }
  Long maximumTimeMillisSpendTotal=calculateMaximumTimeMillisSpendTotal();
  if (maximumTimeMillisSpendTotal != null) {
    TimeMillisSpendTermination termination=new TimeMillisSpendTermination(maximumTimeMillisSpendTotal);
    terminationList.add(termination);
  }
  if (scoreAttained != null) {
    Score scoreAttained_=configPolicy.getScoreDefinition().parseScore(scoreAttained);
    ScoreAttainedTermination termination=new ScoreAttainedTermination(scoreAttained_);
    terminationList.add(termination);
  }
  if (maximumStepCount != null) {
    StepCountTermination termination=new StepCountTermination(maximumStepCount);
    terminationList.add(termination);
  }
  if (maximumUnimprovedStepCount != null) {
    UnimprovedStepCountTermination termination=new UnimprovedStepCountTermination(maximumUnimprovedStepCount);
    terminationList.add(termination);
  }
  if (!CollectionUtils.isEmpty(terminationConfigList)) {
    for (    TerminationConfig terminationConfig : terminationConfigList) {
      Termination termination=terminationConfig.buildTermination(configPolicy);
      if (termination != null) {
        terminationList.add(termination);
      }
    }
  }
  if (terminationList.size() == 1) {
    return terminationList.get(0);
  }
 else   if (terminationList.size() > 1) {
    AbstractCompositeTermination compositeTermination;
    if (terminationCompositionStyle == null || terminationCompositionStyle == TerminationCompositionStyle.OR) {
      compositeTermination=new OrCompositeTermination(terminationList);
    }
 else     if (terminationCompositionStyle == TerminationCompositionStyle.AND) {
      compositeTermination=new AndCompositeTermination(terminationList);
    }
 else {
      throw new IllegalStateException("The terminationCompositionStyle (" + terminationCompositionStyle + ") is not implemented.");
    }
    return compositeTermination;
  }
 else {
    return null;
  }
}
