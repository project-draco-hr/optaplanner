{
  PlanningEntityDescriptor entityDescriptor=TestdataChainedEntity.buildEntityDescriptor();
  PlanningVariableDescriptor variableDescriptor=entityDescriptor.getPlanningVariableDescriptor("chainedObject");
  ScoreDirector scoreDirector=mock(ScoreDirector.class);
  TestdataChainedAnchor a0=new TestdataChainedAnchor("a0");
  TestdataChainedEntity a1=new TestdataChainedEntity("a1",a0);
  TestdataChainedEntity a2=new TestdataChainedEntity("a2",a1);
  TestdataChainedEntity a3=new TestdataChainedEntity("a3",a2);
  TestdataChainedEntity a4=new TestdataChainedEntity("a4",a3);
  TestdataChainedEntity a5=new TestdataChainedEntity("a5",a4);
  TestdataChainedEntity a6=new TestdataChainedEntity("a6",a5);
  TestdataChainedEntity a7=new TestdataChainedEntity("a7",a6);
  SelectorTestUtils.mockMethodGetTrailingEntity(scoreDirector,variableDescriptor,new TestdataChainedEntity[]{a1,a2,a3,a4,a5,a6,a7});
  SubChainReversingSwapMove move=new SubChainReversingSwapMove(variableDescriptor,new SubChain(Arrays.<Object>asList(a2,a3,a4)),new SubChain(Arrays.<Object>asList(a5,a6)));
  move.doMove(scoreDirector);
  SelectorTestUtils.assertChain(a0,a1,a6,a5,a4,a3,a2,a7);
  verify(scoreDirector).beforeVariableChanged(a2,"chainedObject");
  verify(scoreDirector).afterVariableChanged(a2,"chainedObject");
  verify(scoreDirector).beforeVariableChanged(a3,"chainedObject");
  verify(scoreDirector).afterVariableChanged(a3,"chainedObject");
  verify(scoreDirector,atLeastOnce()).beforeVariableChanged(a4,"chainedObject");
  verify(scoreDirector,atLeastOnce()).afterVariableChanged(a4,"chainedObject");
  verify(scoreDirector,atLeastOnce()).beforeVariableChanged(a5,"chainedObject");
  verify(scoreDirector,atLeastOnce()).afterVariableChanged(a5,"chainedObject");
  verify(scoreDirector).beforeVariableChanged(a6,"chainedObject");
  verify(scoreDirector).afterVariableChanged(a6,"chainedObject");
  verify(scoreDirector).beforeVariableChanged(a7,"chainedObject");
  verify(scoreDirector).afterVariableChanged(a7,"chainedObject");
}
