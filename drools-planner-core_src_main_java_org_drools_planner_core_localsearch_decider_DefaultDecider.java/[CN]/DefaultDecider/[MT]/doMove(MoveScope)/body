{
  WorkingMemory workingMemory=moveScope.getWorkingMemory();
  Move move=moveScope.getMove();
  Move undoMove=move.createUndoMove(workingMemory);
  moveScope.setUndoMove(undoMove);
  move.doMove(workingMemory);
  processMove(moveScope);
  undoMove.doMove(workingMemory);
  if (assertUndoMoveIsUncorrupted) {
    LocalSearchSolverPhaseScope localSearchSolverPhaseScope=moveScope.getLocalSearchStepScope().getLocalSearchSolverPhaseScope();
    Score undoScore=localSearchSolverPhaseScope.calculateScoreFromWorkingMemory();
    Score lastCompletedStepScore=localSearchSolverPhaseScope.getLastCompletedLocalSearchStepScope().getScore();
    if (!undoScore.equals(lastCompletedStepScore)) {
      throw new IllegalStateException("The moveClass (" + move.getClass() + ")'s move ("+ move+ ") has a corrupted undoMove ("+ undoMove+ ") or there is general score corruption.\n"+ "Check the Move.createUndoMove(...) method"+ " and enable EnvironmentMode TRACE to fail-faster on general score corruption.\n"+ "The lastCompletedStepScore ("+ lastCompletedStepScore+ ") and undoScore ("+ undoScore+ ") are not equal.\n"+ localSearchSolverPhaseScope.getSolverScope().getSolutionDirector().buildConstraintOccurrenceSummary());
    }
  }
  logger.trace("        Move score ({}), accepted ({}) for move ({}).",new Object[]{moveScope.getScore(),moveScope.getAccepted(),moveScope.getMove()});
}
