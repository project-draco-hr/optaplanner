{
  GenuineVariableDescriptor variableDescriptor=TestdataChainedEntity.buildVariableDescriptorForChainedObject();
  InnerScoreDirector scoreDirector=PlannerTestUtils.mockScoreDirector(variableDescriptor.getEntityDescriptor().getSolutionDescriptor());
  TestdataChainedAnchor a0=new TestdataChainedAnchor("a0");
  TestdataChainedEntity a1=new TestdataChainedEntity("a1",a0);
  TestdataChainedEntity a2=new TestdataChainedEntity("a2",a1);
  TestdataChainedEntity a3=new TestdataChainedEntity("a3",a2);
  TestdataChainedEntity a4=new TestdataChainedEntity("a4",a3);
  TestdataChainedEntity a5=new TestdataChainedEntity("a5",a4);
  TestdataChainedAnchor b0=new TestdataChainedAnchor("b0");
  TestdataChainedEntity b1=new TestdataChainedEntity("b1",b0);
  TestdataChainedEntity b2=new TestdataChainedEntity("b2",b1);
  TestdataChainedEntity b3=new TestdataChainedEntity("b3",b2);
  SingletonInverseVariableSupply inverseVariableSupply=SelectorTestUtils.mockSingletonInverseVariableSupply(new TestdataChainedEntity[]{a1,a2,a3,a4,a5,b1,b2,b3});
  SubChainSwapMove move=new SubChainSwapMove(variableDescriptor,inverseVariableSupply,new SubChain(Arrays.<Object>asList(a2,a3,a4)),new SubChain(Arrays.<Object>asList(b1,b2)));
  Move undoMove=move.createUndoMove(scoreDirector);
  move.doMove(scoreDirector);
  SelectorTestUtils.assertChain(a0,a1,b1,b2,a5);
  SelectorTestUtils.assertChain(b0,a2,a3,a4,b3);
  verify(scoreDirector).changeVariableFacade(variableDescriptor,a2,b0);
  verify(scoreDirector).changeVariableFacade(variableDescriptor,b3,a4);
  verify(scoreDirector).changeVariableFacade(variableDescriptor,b1,a1);
  verify(scoreDirector).changeVariableFacade(variableDescriptor,a5,b2);
  undoMove.doMove(scoreDirector);
  SelectorTestUtils.assertChain(a0,a1,a2,a3,a4,a5);
  SelectorTestUtils.assertChain(b0,b1,b2,b3);
}
