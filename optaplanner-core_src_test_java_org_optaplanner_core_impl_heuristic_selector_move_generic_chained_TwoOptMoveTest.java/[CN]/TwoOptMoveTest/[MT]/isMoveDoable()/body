{
  GenuineVariableDescriptor variableDescriptor=TestdataChainedEntity.buildVariableDescriptorForChainedObject();
  SolutionDescriptor solutionDescriptor=variableDescriptor.getEntityDescriptor().getSolutionDescriptor();
  InnerScoreDirector scoreDirector=PlannerTestUtils.mockScoreDirector(solutionDescriptor);
  TestdataChainedAnchor a0=new TestdataChainedAnchor("a0");
  TestdataChainedEntity a1=new TestdataChainedEntity("a1",a0);
  TestdataChainedEntity a2=new TestdataChainedEntity("a2",a1);
  TestdataChainedEntity a3=new TestdataChainedEntity("a3",a2);
  TestdataChainedAnchor b0=new TestdataChainedAnchor("b0");
  TestdataChainedEntity b1=new TestdataChainedEntity("b1",b0);
  TestdataChainedSolution solution=new TestdataChainedSolution("solution");
  solution.setChainedAnchorList(Arrays.asList(a0,b0));
  solution.setChainedEntityList(Arrays.asList(a1,a2,a3,b1));
  scoreDirector.setWorkingSolution(solution);
  AnchorVariableSupply anchorVariableSupply=scoreDirector.getSupplyManager().demand(new AnchorVariableDemand(variableDescriptor));
  assertEquals(true,new TwoOptMove(variableDescriptor,anchorVariableSupply,a2,b1).isMoveDoable(scoreDirector));
  assertEquals(true,new TwoOptMove(variableDescriptor,anchorVariableSupply,b1,a2).isMoveDoable(scoreDirector));
  assertEquals(true,new TwoOptMove(variableDescriptor,anchorVariableSupply,a1,a3).isMoveDoable(scoreDirector));
  assertEquals(true,new TwoOptMove(variableDescriptor,anchorVariableSupply,a3,a1).isMoveDoable(scoreDirector));
  assertEquals(false,new TwoOptMove(variableDescriptor,anchorVariableSupply,a1,a2).isMoveDoable(scoreDirector));
  assertEquals(false,new TwoOptMove(variableDescriptor,anchorVariableSupply,a2,a1).isMoveDoable(scoreDirector));
}
