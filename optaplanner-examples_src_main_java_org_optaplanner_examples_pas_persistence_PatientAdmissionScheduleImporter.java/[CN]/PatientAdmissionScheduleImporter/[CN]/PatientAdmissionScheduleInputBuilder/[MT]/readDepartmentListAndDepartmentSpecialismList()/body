{
  readConstantLine("DEPARTMENTS:");
  List<Department> departmentList=new ArrayList<>(departmentListSize);
  idToDepartmentMap=new HashMap<>(departmentListSize);
  List<DepartmentSpecialism> departmentSpecialismList=new ArrayList<>(departmentListSize * 5);
  long departmentSpecialismId=0L;
  for (int i=0; i < departmentListSize; i++) {
    String line=bufferedReader.readLine();
    String[] lineTokens=splitByPipelineAndTrim(line,2);
    String[] departmentTokens=splitBySpace(lineTokens[0],4);
    Department department=new Department();
    department.setId(Long.parseLong(departmentTokens[0]));
    department.setName(departmentTokens[1]);
    department.setRoomList(new ArrayList<>());
    int minimumAge=Integer.parseInt(departmentTokens[2]);
    if (minimumAge != 0) {
      department.setMinimumAge(Integer.valueOf(minimumAge));
    }
    int maximumAge=Integer.parseInt(departmentTokens[3]);
    if (maximumAge != 0) {
      department.setMaximumAge(Integer.valueOf(maximumAge));
    }
    departmentList.add(department);
    idToDepartmentMap.put(department.getId(),department);
    String[] departmentSpecialismTokens=splitBySpace(lineTokens[1]);
    if (departmentSpecialismTokens.length % 2 != 0) {
      throw new IllegalArgumentException("Read line (" + line + ") is expected to contain even number of tokens ("+ departmentSpecialismTokens.length+ ") after 1st pipeline (|) separated by a space ( ).");
    }
    for (int j=0; j < departmentSpecialismTokens.length; j+=2) {
      long specialismId=Long.parseLong(departmentSpecialismTokens[j + 1]);
      if (specialismId != 0) {
        DepartmentSpecialism departmentSpecialism=new DepartmentSpecialism();
        departmentSpecialism.setId(departmentSpecialismId);
        departmentSpecialism.setDepartment(department);
        departmentSpecialism.setPriority(Integer.parseInt(departmentSpecialismTokens[j]));
        Specialism specialism=idToSpecialismMap.get(specialismId);
        if (specialism == null) {
          throw new IllegalArgumentException("Read line (" + line + ") has a non existing specialismId ("+ specialismId+ ").");
        }
        departmentSpecialism.setSpecialism(specialism);
        departmentSpecialismList.add(departmentSpecialism);
        departmentSpecialismId++;
      }
    }
  }
  Collections.sort(departmentList,new PersistableIdComparator());
  patientAdmissionSchedule.setDepartmentList(departmentList);
  patientAdmissionSchedule.setDepartmentSpecialismList(departmentSpecialismList);
}
