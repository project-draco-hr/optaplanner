{
  if (minimumCacheType.compareTo(SelectionCacheType.STEP) > 0) {
    throw new IllegalArgumentException("The subChainSelectorConfig (" + this + ")'s minimumCacheType ("+ minimumCacheType+ ") must not be higher than "+ SelectionCacheType.STEP+ " because the chains change every step.");
  }
  ValueSelectorConfig valueSelectorConfig_=valueSelectorConfig == null ? new ValueSelectorConfig() : valueSelectorConfig;
  ValueSelector valueSelector=valueSelectorConfig_.buildValueSelector(configPolicy,entityDescriptor,minimumCacheType,SelectionOrder.ORIGINAL);
  if (!(valueSelector instanceof EntityIndependentValueSelector)) {
    throw new IllegalArgumentException("The minimumCacheType (" + this + ") needs to be based on a EntityIndependentValueSelector ("+ valueSelector+ ")."+ " Check your @"+ ValueRangeProvider.class.getSimpleName()+ " annotations.");
  }
  return new DefaultSubChainSelector((EntityIndependentValueSelector)valueSelector,inheritedSelectionOrder.toRandomSelectionBoolean(),defaultIfNull(minimumSubChainSize,DEFAULT_MINIMUM_SUB_CHAIN_SIZE),defaultIfNull(maximumSubChainSize,DEFAULT_MAXIMUM_SUB_CHAIN_SIZE));
}
