{
  random=new Random(37);
  MeetingSchedule meetingSchedule=new MeetingSchedule();
  meetingSchedule.setId(0L);
  createMeetingListAndAttendanceList(meetingSchedule,meetingListSize);
  int timeGrainListSize=meetingListSize * durationInGrainsOptions[durationInGrainsOptions.length - 1] / roomListSize;
  createTimeGrainList(meetingSchedule,timeGrainListSize);
  createRoomList(meetingSchedule,roomListSize);
  createPersonList(meetingSchedule);
  linkAttendanceListToPersons(meetingSchedule);
  createMeetingAssignmentList(meetingSchedule);
  BigInteger possibleSolutionSize=BigInteger.valueOf(timeGrainListSize * roomListSize).pow(meetingSchedule.getMeetingAssignmentList().size());
  logger.info("MeetingSchedule {} has {} meetings, {} timeGrains and {} rooms with a search space of {}.",fileName,meetingListSize,timeGrainListSize,roomListSize,AbstractSolutionImporter.getFlooredPossibleSolutionSize(possibleSolutionSize));
  return meetingSchedule;
}
