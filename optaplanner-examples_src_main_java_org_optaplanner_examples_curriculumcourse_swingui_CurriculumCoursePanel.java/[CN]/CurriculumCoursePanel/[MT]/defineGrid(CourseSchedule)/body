{
  roomsTimeTableLayout.reset();
  teachersTimeTableLayout.reset();
  JButton footprint=new JButton("LinLetGre1-0");
  footprint.setMargin(new Insets(0,0,0,0));
  int footprintWidth=footprint.getPreferredSize().width;
  int footprintHeight=footprint.getPreferredSize().height;
  roomsTimeTableLayout.addColumn();
  roomsTimeTableLayout.addColumn();
  roomXMap=new HashMap<Room,Integer>(courseSchedule.getRoomList().size());
  for (  Room room : courseSchedule.getRoomList()) {
    int x=roomsTimeTableLayout.addColumn(footprintWidth);
    roomXMap.put(room,x);
  }
  int unassignedRoomX=roomsTimeTableLayout.addColumn(footprintWidth);
  roomXMap.put(null,unassignedRoomX);
  teachersTimeTableLayout.addColumn();
  teachersTimeTableLayout.addColumn();
  teacherXMap=new HashMap<Teacher,Integer>(courseSchedule.getTeacherList().size());
  for (  Teacher teacher : courseSchedule.getTeacherList()) {
    int x=teachersTimeTableLayout.addColumn(footprintWidth);
    teacherXMap.put(teacher,x);
  }
  roomsTimeTableLayout.addRow();
  teachersTimeTableLayout.addRow();
  periodYMap=new HashMap<Period,Integer>(courseSchedule.getPeriodList().size());
  for (  Period period : courseSchedule.getPeriodList()) {
    int y=roomsTimeTableLayout.addRow();
    int otherY=teachersTimeTableLayout.addRow();
    if (y != otherY) {
      throw new IllegalStateException("Impossible");
    }
    periodYMap.put(period,y);
  }
  int unassignedPeriodY=roomsTimeTableLayout.addRow();
  int otherUnassignedPeriodY=teachersTimeTableLayout.addRow();
  if (unassignedPeriodY != otherUnassignedPeriodY) {
    throw new IllegalStateException("Impossible");
  }
  periodYMap.put(null,unassignedPeriodY);
}
