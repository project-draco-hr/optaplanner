{
  JPanel listFieldsPanel=new JPanel(new GridLayout(3,2));
  listFieldsPanel.add(new JLabel("Period:"));
  List<Period> periodList=getCourseSchedule().getPeriodList();
  JComboBox periodListField=new JComboBox(periodList.toArray(new Object[periodList.size() + 1]));
  LabeledComboBoxRenderer.applyToComboBox(periodListField);
  periodListField.setSelectedItem(lecture.getPeriod());
  listFieldsPanel.add(periodListField);
  listFieldsPanel.add(new JLabel("Room:"));
  List<Room> roomList=getCourseSchedule().getRoomList();
  JComboBox roomListField=new JComboBox(roomList.toArray(new Object[roomList.size() + 1]));
  LabeledComboBoxRenderer.applyToComboBox(roomListField);
  roomListField.setSelectedItem(lecture.getRoom());
  listFieldsPanel.add(roomListField);
  listFieldsPanel.add(new JLabel("Locked:"));
  JCheckBox lockedField=new JCheckBox("immovable during planning");
  lockedField.setSelected(lecture.isLocked());
  listFieldsPanel.add(lockedField);
  int result=JOptionPane.showConfirmDialog(CurriculumCoursePanel.this.getRootPane(),listFieldsPanel,"Select period and room",JOptionPane.OK_CANCEL_OPTION);
  if (result == JOptionPane.OK_OPTION) {
    Period toPeriod=(Period)periodListField.getSelectedItem();
    if (lecture.getPeriod() != toPeriod) {
      solutionBusiness.doChangeMove(lecture,"period",toPeriod);
    }
    Room toRoom=(Room)roomListField.getSelectedItem();
    if (lecture.getRoom() != toRoom) {
      solutionBusiness.doChangeMove(lecture,"room",toRoom);
    }
    boolean toLocked=lockedField.isSelected();
    if (lecture.isLocked() != toLocked) {
      if (solutionBusiness.isSolving()) {
        logger.error("Not doing user change because the solver is solving.");
        return;
      }
      lecture.setLocked(toLocked);
    }
    solverAndPersistenceFrame.resetScreen();
  }
}
