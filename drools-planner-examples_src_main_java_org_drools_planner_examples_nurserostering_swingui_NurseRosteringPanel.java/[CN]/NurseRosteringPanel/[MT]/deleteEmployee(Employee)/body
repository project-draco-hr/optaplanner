{
  logger.info("Scheduling delete of employee ({}).",employee);
  solutionBusiness.doProblemFactChange(new ProblemFactChange(){
    public void doChange(    SolutionDirector solutionDirector){
      NurseRoster nurseRoster=(NurseRoster)solutionDirector.getWorkingSolution();
      WorkingMemory workingMemory=solutionDirector.getWorkingMemory();
      for (      ShiftAssignment shiftAssignment : nurseRoster.getShiftAssignmentList()) {
        if (ObjectUtils.equals(shiftAssignment.getEmployee(),employee)) {
          FactHandle shiftAssignmentHandle=workingMemory.getFactHandle(shiftAssignment);
          shiftAssignment.setEmployee(null);
          workingMemory.retract(shiftAssignmentHandle);
        }
      }
      for (Iterator<Employee> it=nurseRoster.getEmployeeList().iterator(); it.hasNext(); ) {
        Employee workingEmployee=it.next();
        if (ObjectUtils.equals(workingEmployee,employee)) {
          FactHandle employeeHandle=workingMemory.getFactHandle(workingEmployee);
          workingMemory.retract(employeeHandle);
          it.remove();
          break;
        }
      }
    }
  }
);
  updatePanel(solutionBusiness.getSolution());
}
