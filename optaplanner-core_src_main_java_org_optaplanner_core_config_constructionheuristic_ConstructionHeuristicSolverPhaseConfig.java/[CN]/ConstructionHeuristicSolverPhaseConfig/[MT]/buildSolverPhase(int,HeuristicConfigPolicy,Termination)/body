{
  HeuristicConfigPolicy phaseConfigPolicy=solverConfigPolicy.createPhaseConfigPolicy();
  phaseConfigPolicy.setInitializedChainedValueFilterEnabled(true);
  if (!CollectionUtils.isEmpty(entityPlacerConfigList)) {
    ConstructionHeuristicType constructionHeuristicType_=constructionHeuristicType == null ? ConstructionHeuristicType.FIRST_FIT : constructionHeuristicType;
    phaseConfigPolicy.setSortEntitiesByDecreasingDifficultyEnabled(constructionHeuristicType_.isSortEntitiesByDecreasingDifficulty());
    phaseConfigPolicy.setSortValuesByIncreasingStrengthEnabled(constructionHeuristicType_.isSortValuesByIncreasingStrength());
    DefaultConstructionHeuristicSolverPhase phase=new DefaultConstructionHeuristicSolverPhase();
    configureSolverPhase(phase,phaseIndex,phaseConfigPolicy,solverTermination);
    phase.setDecider(buildDecider(phaseConfigPolicy,phase.getTermination()));
    EntityPlacer entityPlacer;
    if (entityPlacerConfigList.size() == 1) {
      entityPlacer=entityPlacerConfigList.get(0).buildEntityPlacer(phaseConfigPolicy,phase.getTermination());
    }
 else {
      throw new IllegalArgumentException("The entityPlacerConfigList (" + entityPlacerConfigList + ") must be a singleton or empty. Use multiple "+ ConstructionHeuristicSolverPhaseConfig.class+ " elements to initialize multiple entity classes.");
    }
    phase.setEntityPlacer(entityPlacer);
    EnvironmentMode environmentMode=phaseConfigPolicy.getEnvironmentMode();
    if (environmentMode.isNonIntrusiveFullAsserted()) {
      phase.setAssertStepScoreFromScratch(true);
    }
    if (environmentMode.isIntrusiveFastAsserted()) {
      phase.setAssertExpectedStepScore(true);
    }
    return phase;
  }
 else   if (constructionHeuristicType != null) {
    DefaultGreedyFitSolverPhase greedySolverPhase=new DefaultGreedyFitSolverPhase();
    configureSolverPhase(greedySolverPhase,phaseIndex,phaseConfigPolicy,solverTermination);
    greedySolverPhase.setGreedyPlanningEntitySelector(buildGreedyPlanningEntitySelector(solverConfigPolicy.getSolutionDescriptor()));
    greedySolverPhase.setGreedyDecider(buildGreedyDecider(solverConfigPolicy.getSolutionDescriptor(),solverConfigPolicy.getEnvironmentMode()));
    EnvironmentMode environmentMode=phaseConfigPolicy.getEnvironmentMode();
    if (environmentMode.isNonIntrusiveFullAsserted()) {
      greedySolverPhase.setAssertStepScoreFromScratch(true);
    }
    if (environmentMode.isIntrusiveFastAsserted()) {
      greedySolverPhase.setAssertExpectedStepScore(true);
    }
    return greedySolverPhase;
  }
 else {
    throw new IllegalArgumentException("A constructionHeuristic requires configuration, " + "for example a constructionHeuristicType.");
  }
}
