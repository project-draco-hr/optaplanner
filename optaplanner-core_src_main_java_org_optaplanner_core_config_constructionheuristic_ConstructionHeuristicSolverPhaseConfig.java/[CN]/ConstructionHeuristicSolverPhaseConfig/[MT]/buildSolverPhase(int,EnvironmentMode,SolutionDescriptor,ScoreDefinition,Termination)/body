{
  if (constructionHeuristicType != null) {
    DefaultGreedyFitSolverPhase greedySolverPhase=new DefaultGreedyFitSolverPhase();
    configureSolverPhase(greedySolverPhase,phaseIndex,environmentMode,scoreDefinition,solverTermination);
    greedySolverPhase.setGreedyPlanningEntitySelector(buildGreedyPlanningEntitySelector(solutionDescriptor));
    greedySolverPhase.setGreedyDecider(buildGreedyDecider(solutionDescriptor,environmentMode));
    if (environmentMode == EnvironmentMode.FAST_ASSERT || environmentMode == EnvironmentMode.FULL_ASSERT) {
      greedySolverPhase.setAssertStepScoreIsUncorrupted(true);
    }
    return greedySolverPhase;
  }
 else   if (!CollectionUtils.isEmpty(entityPlacerConfigList)) {
    if (constructionHeuristicPickEarlyType != null) {
      throw new UnsupportedOperationException();
    }
    DefaultConstructionHeuristicSolverPhase phase=new DefaultConstructionHeuristicSolverPhase();
    configureSolverPhase(phase,phaseIndex,environmentMode,scoreDefinition,solverTermination);
    EntityPlacer entityPlacer;
    if (entityPlacerConfigList.size() == 1) {
      entityPlacer=entityPlacerConfigList.get(0).buildEntityPlacer(environmentMode,solutionDescriptor,phase.getTermination());
    }
 else {
      throw new IllegalArgumentException("The entityPlacerConfigList (" + entityPlacerConfigList + ") must be a singleton or empty. Use multiple "+ ConstructionHeuristicSolverPhaseConfig.class+ " elements to initialize multiple entity classes.");
    }
    phase.setEntityPlacer(entityPlacer);
    if (environmentMode == EnvironmentMode.FAST_ASSERT || environmentMode == EnvironmentMode.FULL_ASSERT) {
      phase.setAssertStepScoreIsUncorrupted(true);
    }
    return phase;
  }
 else {
    throw new IllegalArgumentException("A constructionHeuristic requires configuration, " + "for example a constructionHeuristicType.");
  }
}
