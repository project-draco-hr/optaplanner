{
  PlanningVariable planningVariableAnnotation=variablePropertyDescriptor.getReadMethod().getAnnotation(PlanningVariable.class);
  Class<? extends Comparator> strengthComparatorClass=planningVariableAnnotation.strengthComparatorClass();
  if (strengthComparatorClass == PlanningVariable.NullStrengthComparator.class) {
    strengthComparatorClass=null;
  }
  Class<? extends PlanningValueStrengthWeightFactory> strengthWeightFactoryClass=planningVariableAnnotation.strengthWeightFactoryClass();
  if (strengthWeightFactoryClass == PlanningVariable.NullStrengthWeightFactory.class) {
    strengthWeightFactoryClass=null;
  }
  if (strengthComparatorClass != null && strengthWeightFactoryClass != null) {
    throw new IllegalStateException("The planningEntityClass (" + planningEntityDescriptor.getPlanningEntityClass() + ") "+ variablePropertyDescriptor.getName()+ ") cannot have a strengthComparatorClass ("+ strengthComparatorClass.getName()+ ") and a strengthWeightFactoryClass ("+ strengthWeightFactoryClass.getName()+ ") at the same time.");
  }
  planningValueSorter=new PlanningValueSorter();
  if (strengthComparatorClass != null) {
    Comparator<Object> strengthComparator;
    try {
      strengthComparator=strengthComparatorClass.newInstance();
    }
 catch (    InstantiationException e) {
      throw new IllegalArgumentException("The strengthComparatorClass (" + strengthComparatorClass.getName() + ") does not have a public no-arg constructor",e);
    }
catch (    IllegalAccessException e) {
      throw new IllegalArgumentException("The strengthComparatorClass (" + strengthComparatorClass.getName() + ") does not have a public no-arg constructor",e);
    }
    planningValueSorter.setStrengthComparator(strengthComparator);
  }
  if (strengthWeightFactoryClass != null) {
    PlanningValueStrengthWeightFactory strengthWeightFactory;
    try {
      strengthWeightFactory=strengthWeightFactoryClass.newInstance();
    }
 catch (    InstantiationException e) {
      throw new IllegalArgumentException("The strengthWeightFactoryClass (" + strengthWeightFactoryClass.getName() + ") does not have a public no-arg constructor",e);
    }
catch (    IllegalAccessException e) {
      throw new IllegalArgumentException("The strengthWeightFactoryClass (" + strengthWeightFactoryClass.getName() + ") does not have a public no-arg constructor",e);
    }
    planningValueSorter.setStrengthWeightFactory(strengthWeightFactory);
  }
  Method propertyGetter=variablePropertyDescriptor.getReadMethod();
  if (propertyGetter.isAnnotationPresent(ValueRangeFromSolutionProperty.class)) {
    processValueRangeSolutionPropertyAnnotation(propertyGetter.getAnnotation(ValueRangeFromSolutionProperty.class));
  }
 else   if (propertyGetter.isAnnotationPresent(ValueRangeFromPlanningEntityProperty.class)) {
    processValueRangeFromPlanningEntityPropertyAnnotation(propertyGetter.getAnnotation(ValueRangeFromPlanningEntityProperty.class));
  }
 else   if (propertyGetter.isAnnotationPresent(ValueRangeUndefined.class)) {
    processValueRangeUndefinedAnnotation(propertyGetter.getAnnotation(ValueRangeUndefined.class));
  }
 else {
    throw new IllegalArgumentException("The planningEntityClass (" + planningEntityDescriptor.getPlanningEntityClass() + ") has a PlanningVariable annotated property ("+ variablePropertyDescriptor.getName()+ ") that has no ValueRange* annotation, such as ValueRangeFromSolutionProperty.");
  }
}
