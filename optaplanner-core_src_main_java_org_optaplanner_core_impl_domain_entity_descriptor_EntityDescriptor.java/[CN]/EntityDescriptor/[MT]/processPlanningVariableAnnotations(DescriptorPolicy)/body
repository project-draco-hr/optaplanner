{
  declaredGenuineVariableDescriptorMap=new LinkedHashMap<String,GenuineVariableDescriptor>();
  declaredShadowVariableDescriptorMap=new LinkedHashMap<String,ShadowVariableDescriptor>();
  boolean noVariableAnnotation=true;
  List<Field> fieldList=Arrays.asList(entityClass.getDeclaredFields());
  Collections.sort(fieldList,new AlphabeticMemberComparator());
  for (  Field field : fieldList) {
    Class<? extends Annotation> variableAnnotationClass=extractVariableAnnotationClass(field);
    if (variableAnnotationClass != null) {
      noVariableAnnotation=false;
      MemberAccessor memberAccessor=new FieldMemberAccessor(field);
      registerVariableAccessor(descriptorPolicy,variableAnnotationClass,memberAccessor);
    }
  }
  List<Method> methodList=Arrays.asList(entityClass.getDeclaredMethods());
  Collections.sort(methodList,new AlphabeticMemberComparator());
  for (  Method method : methodList) {
    Class<? extends Annotation> variableAnnotationClass=extractVariableAnnotationClass(method);
    if (variableAnnotationClass != null) {
      noVariableAnnotation=false;
      if (!ReflectionHelper.isGetterMethod(method)) {
        throw new IllegalStateException("The entityClass (" + entityClass + ")'s method ("+ method+ ") with a "+ variableAnnotationClass.getSimpleName()+ " annotation must be a valid getter method.\n"+ "  That annotation can only be used on a JavaBeans getter method or on a field.");
      }
      MemberAccessor memberAccessor=new BeanPropertyMemberAccessor(method);
      if (!memberAccessor.supportSetter()) {
        throw new IllegalStateException("The entityClass (" + entityClass + ") has a "+ variableAnnotationClass.getSimpleName()+ " annotated getter method ("+ method+ "), but lacks a setter for that property ("+ memberAccessor.getName()+ ").");
      }
      registerVariableAccessor(descriptorPolicy,variableAnnotationClass,memberAccessor);
    }
  }
  if (noVariableAnnotation) {
    throw new IllegalStateException("The entityClass (" + entityClass + ") should have at least 1 getter method or 1 field with a "+ PlanningVariable.class.getSimpleName()+ " annotation or a shadow variable annotation.");
  }
}
