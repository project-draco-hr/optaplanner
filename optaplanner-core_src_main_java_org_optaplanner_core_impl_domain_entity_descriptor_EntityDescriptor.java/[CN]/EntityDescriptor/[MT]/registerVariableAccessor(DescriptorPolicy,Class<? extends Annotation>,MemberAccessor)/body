{
  String memberName=memberAccessor.getName();
  if (declaredGenuineVariableDescriptorMap.containsKey(memberName) || declaredShadowVariableDescriptorMap.containsKey(memberName)) {
    VariableDescriptor duplicate=declaredGenuineVariableDescriptorMap.get(memberName);
    if (duplicate == null) {
      duplicate=declaredShadowVariableDescriptorMap.get(memberName);
    }
    throw new IllegalStateException("The entityClass (" + entityClass + ") has a "+ variableAnnotationClass.getSimpleName()+ " annotated member ("+ memberAccessor+ ") that is duplicated by another member for variableDescriptor ("+ duplicate+ ").\n"+ "  Verify that the annotation is not defined on both the field and its getter.");
  }
  if (variableAnnotationClass.equals(PlanningVariable.class)) {
    GenuineVariableDescriptor<Solution_> variableDescriptor=new GenuineVariableDescriptor<>(this,memberAccessor);
    declaredGenuineVariableDescriptorMap.put(memberName,variableDescriptor);
    variableDescriptor.processAnnotations(descriptorPolicy);
  }
 else   if (variableAnnotationClass.equals(InverseRelationShadowVariable.class)) {
    ShadowVariableDescriptor variableDescriptor=new InverseRelationShadowVariableDescriptor(this,memberAccessor);
    declaredShadowVariableDescriptorMap.put(memberName,variableDescriptor);
    variableDescriptor.processAnnotations(descriptorPolicy);
  }
 else   if (variableAnnotationClass.equals(AnchorShadowVariable.class)) {
    ShadowVariableDescriptor variableDescriptor=new AnchorShadowVariableDescriptor(this,memberAccessor);
    declaredShadowVariableDescriptorMap.put(memberName,variableDescriptor);
    variableDescriptor.processAnnotations(descriptorPolicy);
  }
 else   if (variableAnnotationClass.equals(CustomShadowVariable.class)) {
    ShadowVariableDescriptor variableDescriptor=new CustomShadowVariableDescriptor(this,memberAccessor);
    declaredShadowVariableDescriptorMap.put(memberName,variableDescriptor);
    variableDescriptor.processAnnotations(descriptorPolicy);
  }
 else {
    throw new IllegalStateException("The variableAnnotationClass (" + variableAnnotationClass + ") is not implemented.");
  }
}
