{
  PropertyDescriptor[] propertyDescriptors=entityBeanInfo.getPropertyDescriptors();
  genuineVariableDescriptorMap=new LinkedHashMap<String,GenuineVariableDescriptor>(propertyDescriptors.length);
  shadowVariableDescriptorMap=new LinkedHashMap<String,ShadowVariableDescriptor>(propertyDescriptors.length);
  boolean noPlanningVariableAnnotation=true;
  for (  PropertyDescriptor propertyDescriptor : propertyDescriptors) {
    Method propertyGetter=propertyDescriptor.getReadMethod();
    if (propertyGetter != null) {
      Class<? extends Annotation> variableAnnotationClass=null;
      for (      Class<? extends Annotation> detectedAnnotationClass : Arrays.asList(PlanningVariable.class,InverseRelationShadowVariable.class,CustomShadowVariable.class)) {
        if (propertyGetter.isAnnotationPresent(detectedAnnotationClass)) {
          if (variableAnnotationClass != null) {
            throw new IllegalStateException("The planningEntityClass (" + entityClass + ") has a property ("+ propertyDescriptor.getName()+ ") that has both a "+ variableAnnotationClass.getSimpleName()+ " annotation and a "+ detectedAnnotationClass.getSimpleName()+ " annotation.");
          }
          variableAnnotationClass=detectedAnnotationClass;
        }
      }
      if (variableAnnotationClass != null) {
        noPlanningVariableAnnotation=false;
        if (propertyDescriptor.getWriteMethod() == null) {
          throw new IllegalStateException("The planningEntityClass (" + entityClass + ") has a "+ variableAnnotationClass.getSimpleName()+ " annotated property ("+ propertyDescriptor.getName()+ ") that should have a setter.");
        }
        if (variableAnnotationClass.equals(PlanningVariable.class)) {
          GenuineVariableDescriptor variableDescriptor=new GenuineVariableDescriptor(this,propertyDescriptor);
          genuineVariableDescriptorMap.put(propertyDescriptor.getName(),variableDescriptor);
          variableDescriptor.processAnnotations(descriptorPolicy);
        }
 else         if (variableAnnotationClass.equals(InverseRelationShadowVariable.class)) {
          ShadowVariableDescriptor variableDescriptor=new InverseRelationShadowVariableDescriptor(this,propertyDescriptor);
          shadowVariableDescriptorMap.put(propertyDescriptor.getName(),variableDescriptor);
          variableDescriptor.processAnnotations(descriptorPolicy);
        }
 else         if (variableAnnotationClass.equals(CustomShadowVariable.class)) {
          ShadowVariableDescriptor variableDescriptor=new CustomShadowVariableDescriptor(this,propertyDescriptor);
          shadowVariableDescriptorMap.put(propertyDescriptor.getName(),variableDescriptor);
          variableDescriptor.processAnnotations(descriptorPolicy);
        }
 else {
          throw new IllegalStateException("The variableAnnotationClass (" + variableAnnotationClass + ") is not implemented.");
        }
      }
    }
  }
  if (noPlanningVariableAnnotation) {
    throw new IllegalStateException("The planningEntityClass (" + entityClass + ") should have at least 1 getter with a "+ PlanningVariable.class.getSimpleName()+ " annotation or a shadow variable annotation.");
  }
}
