{
  final GenuineVariableDescriptor variableDescriptor=valueSelector.getVariableDescriptor();
  if (!randomSelection) {
    if (chained) {
      return new AbstractOriginalChangeIterator<Move>(entitySelector,valueSelector){
        @Override protected Move newChangeSelection(        Object entity,        Object toValue){
          return new ChainedChangeMove(entity,variableDescriptor,toValue);
        }
      }
;
    }
 else {
      return new AbstractOriginalChangeIterator<Move>(entitySelector,valueSelector){
        @Override protected Move newChangeSelection(        Object entity,        Object toValue){
          return new ChangeMove(entity,variableDescriptor,toValue);
        }
      }
;
    }
  }
 else {
    if (chained) {
      return new AbstractRandomChangeIterator<Move>(entitySelector,valueSelector){
        @Override protected Move newChangeSelection(        Object entity,        Object toValue){
          return new ChainedChangeMove(entity,variableDescriptor,toValue);
        }
      }
;
    }
 else {
      return new AbstractRandomChangeIterator<Move>(entitySelector,valueSelector){
        @Override protected Move newChangeSelection(        Object entity,        Object toValue){
          return new ChangeMove(entity,variableDescriptor,toValue);
        }
      }
;
    }
  }
}
