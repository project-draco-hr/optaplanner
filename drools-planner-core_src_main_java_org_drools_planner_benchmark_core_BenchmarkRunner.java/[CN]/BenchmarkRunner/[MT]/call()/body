{
  SolverBenchmark solverBenchmark=benchmarkResult.getSolverBenchmark();
  Solver solver=solverBenchmark.getSolverConfig().buildSolver();
  for (  ProblemStatistic statistic : problemBenchmark.getProblemStatisticList()) {
    statistic.addListener(solver,solverBenchmark.getName());
  }
  solver.setPlanningProblem(problemBenchmark.readPlanningProblem());
  solver.solve();
  Solution outputSolution=solver.getBestSolution();
  benchmarkResult.setTimeMillisSpend(solver.getTimeMillisSpend());
  DefaultSolverScope solverScope=((DefaultSolver)solver).getSolverScope();
  benchmarkResult.setCalculateCount(solverScope.getCalculateCount());
  benchmarkResult.setScore(outputSolution.getScore());
  SolutionDescriptor solutionDescriptor=((DefaultSolver)solver).getSolutionDescriptor();
  benchmarkResult.setPlanningEntityCount(solutionDescriptor.getPlanningEntityCount(outputSolution));
  benchmarkResult.setProblemScale(solutionDescriptor.getProblemScale(outputSolution));
  for (  ProblemStatistic statistic : problemBenchmark.getProblemStatisticList()) {
    statistic.removeListener(solver,solverBenchmark.getName());
  }
  problemBenchmark.writeSolution(benchmarkResult,outputSolution);
  return true;
}
