{
  Collection<Object[]> params=new ArrayList<Object[]>();
  AcceptorConfig acceptorConfig=new AcceptorConfig();
  LocalSearchForagerConfig localSearchForagerConfig=new LocalSearchForagerConfig();
  localSearchForagerConfig.setAcceptedCountLimit(N * N);
  acceptorConfig.setAcceptorTypeList(Arrays.asList(AcceptorType.HILL_CLIMBING));
  params.add(new Object[]{acceptorConfig,localSearchForagerConfig,Arrays.asList(new NQueensStepTracking(1,5),new NQueensStepTracking(0,1),new NQueensStepTracking(4,3),new NQueensStepTracking(2,2),new NQueensStepTracking(3,5),new NQueensStepTracking(1,4),new NQueensStepTracking(1,5),new NQueensStepTracking(1,4),new NQueensStepTracking(1,5))});
  acceptorConfig=new AcceptorConfig();
  acceptorConfig.setAcceptorTypeList(Arrays.asList(AcceptorType.ENTITY_TABU));
  acceptorConfig.setEntityTabuSize(N - 1);
  localSearchForagerConfig=new LocalSearchForagerConfig();
  localSearchForagerConfig.setAcceptedCountLimit(N * N);
  params.add(new Object[]{acceptorConfig,localSearchForagerConfig,Arrays.asList(new NQueensStepTracking(1,5),new NQueensStepTracking(0,1),new NQueensStepTracking(4,3),new NQueensStepTracking(2,2),new NQueensStepTracking(3,5),new NQueensStepTracking(5,4),new NQueensStepTracking(1,4),new NQueensStepTracking(0,0),new NQueensStepTracking(4,1))});
  acceptorConfig=new AcceptorConfig();
  acceptorConfig.setAcceptorTypeList(Arrays.asList(AcceptorType.LATE_ACCEPTANCE));
  acceptorConfig.setLateAcceptanceSize(1);
  localSearchForagerConfig=new LocalSearchForagerConfig();
  localSearchForagerConfig.setAcceptedCountLimit(1);
  params.add(new Object[]{acceptorConfig,localSearchForagerConfig,Arrays.asList(new NQueensStepTracking(0,1),new NQueensStepTracking(0,2),new NQueensStepTracking(0,1),new NQueensStepTracking(0,2),new NQueensStepTracking(0,1),new NQueensStepTracking(0,2))});
  return params;
}
