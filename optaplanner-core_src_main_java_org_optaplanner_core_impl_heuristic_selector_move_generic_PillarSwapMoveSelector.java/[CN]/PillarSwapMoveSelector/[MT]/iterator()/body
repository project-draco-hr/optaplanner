{
  if (!randomSelection) {
    return new AbstractOriginalSwapIterator<Move,List<Object>>(leftPillarSelector,rightPillarSelector){
      @Override protected Move newSwapSelection(      List<Object> leftSubSelection,      List<Object> rightSubSelection){
        return new PillarSwapMove(variableDescriptorList,leftSubSelection,rightSubSelection);
      }
    }
;
  }
 else {
    return new AbstractRandomSwapIterator<Move,List<Object>>(leftPillarSelector,rightPillarSelector){
      @Override protected Move newSwapSelection(      List<Object> leftSubSelection,      List<Object> rightSubSelection){
        return new PillarSwapMove(variableDescriptorList,leftSubSelection,rightSubSelection);
      }
    }
;
  }
}
