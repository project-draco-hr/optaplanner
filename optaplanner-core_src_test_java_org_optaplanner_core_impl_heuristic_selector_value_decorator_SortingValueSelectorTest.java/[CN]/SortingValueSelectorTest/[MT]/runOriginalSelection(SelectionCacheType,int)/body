{
  EntityIndependentValueSelector childValueSelector=SelectorTestUtils.mockEntityIndependentValueSelector(TestdataEntity.class,"value",new TestdataValue("jan"),new TestdataValue("feb"),new TestdataValue("mar"),new TestdataValue("apr"),new TestdataValue("may"),new TestdataValue("jun"));
  SelectionSorter<TestdataSolution,TestdataValue> sorter=new SelectionSorter<TestdataSolution,TestdataValue>(){
    public void sort(    ScoreDirector scoreDirector,    List<TestdataValue> selectionList){
      Collections.sort(selectionList,new Comparator<TestdataValue>(){
        public int compare(        TestdataValue a,        TestdataValue b){
          return a.getCode().compareTo(b.getCode());
        }
      }
);
    }
  }
;
  EntityIndependentValueSelector valueSelector=new SortingValueSelector(childValueSelector,cacheType,sorter);
  DefaultSolverScope solverScope=mock(DefaultSolverScope.class);
  valueSelector.solvingStarted(solverScope);
  AbstractPhaseScope phaseScopeA=mock(AbstractPhaseScope.class);
  when(phaseScopeA.getSolverScope()).thenReturn(solverScope);
  valueSelector.phaseStarted(phaseScopeA);
  AbstractStepScope stepScopeA1=mock(AbstractStepScope.class);
  when(stepScopeA1.getPhaseScope()).thenReturn(phaseScopeA);
  valueSelector.stepStarted(stepScopeA1);
  assertAllCodesOfValueSelector(valueSelector,"apr","feb","jan","jun","mar","may");
  valueSelector.stepEnded(stepScopeA1);
  AbstractStepScope stepScopeA2=mock(AbstractStepScope.class);
  when(stepScopeA2.getPhaseScope()).thenReturn(phaseScopeA);
  valueSelector.stepStarted(stepScopeA2);
  assertAllCodesOfValueSelector(valueSelector,"apr","feb","jan","jun","mar","may");
  valueSelector.stepEnded(stepScopeA2);
  valueSelector.phaseEnded(phaseScopeA);
  AbstractPhaseScope phaseScopeB=mock(AbstractPhaseScope.class);
  when(phaseScopeB.getSolverScope()).thenReturn(solverScope);
  valueSelector.phaseStarted(phaseScopeB);
  AbstractStepScope stepScopeB1=mock(AbstractStepScope.class);
  when(stepScopeB1.getPhaseScope()).thenReturn(phaseScopeB);
  valueSelector.stepStarted(stepScopeB1);
  assertAllCodesOfValueSelector(valueSelector,"apr","feb","jan","jun","mar","may");
  valueSelector.stepEnded(stepScopeB1);
  AbstractStepScope stepScopeB2=mock(AbstractStepScope.class);
  when(stepScopeB2.getPhaseScope()).thenReturn(phaseScopeB);
  valueSelector.stepStarted(stepScopeB2);
  assertAllCodesOfValueSelector(valueSelector,"apr","feb","jan","jun","mar","may");
  valueSelector.stepEnded(stepScopeB2);
  AbstractStepScope stepScopeB3=mock(AbstractStepScope.class);
  when(stepScopeB3.getPhaseScope()).thenReturn(phaseScopeB);
  valueSelector.stepStarted(stepScopeB3);
  assertAllCodesOfValueSelector(valueSelector,"apr","feb","jan","jun","mar","may");
  valueSelector.stepEnded(stepScopeB3);
  valueSelector.phaseEnded(phaseScopeB);
  valueSelector.solvingEnded(solverScope);
  verifyPhaseLifecycle(childValueSelector,1,2,5);
  verify(childValueSelector,times(timesCalled)).iterator();
  verify(childValueSelector,times(timesCalled)).getSize();
}
