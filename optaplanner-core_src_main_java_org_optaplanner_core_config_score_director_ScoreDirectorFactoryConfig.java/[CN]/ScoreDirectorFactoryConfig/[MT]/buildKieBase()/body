{
  if (kieBase != null) {
    if (!(scoreDrlList == null || scoreDrlList.isEmpty())) {
      throw new IllegalArgumentException("If kieBase is not null, the scoreDrlList (" + scoreDrlList + ") must be empty.");
    }
    if (kieBaseConfigurationProperties != null) {
      throw new IllegalArgumentException("If kieBase is not null, the kieBaseConfigurationProperties (" + kieBaseConfigurationProperties + ") must be null.");
    }
    return kieBase;
  }
 else {
    if (scoreDrlList == null || scoreDrlList.isEmpty()) {
      throw new IllegalArgumentException("The scoreDrlList (" + scoreDrlList + ") cannot be empty.");
    }
    KieServices kieServices=KieServices.Factory.get();
    KieResources kieResources=kieServices.getResources();
    KieFileSystem kieFileSystem=kieServices.newKieFileSystem();
    for (    String scoreDrl : scoreDrlList) {
      InputStream scoreDrlIn=getClass().getResourceAsStream(scoreDrl);
      if (scoreDrlIn == null) {
        throw new IllegalArgumentException("The scoreDrl (" + scoreDrl + ") does not exist as a classpath resource."+ "Note that nor a file, nor a URL, nor a webapp resource are a valid classpath resource.");
      }
      String path="src/main/resources/optaplanner-kie-namespace/" + scoreDrl;
      kieFileSystem.write(path,kieResources.newInputStreamResource(scoreDrlIn,"UTF-8"));
    }
    KieBuilder kieBuilder=kieServices.newKieBuilder(kieFileSystem);
    kieBuilder.buildAll();
    Results results=kieBuilder.getResults();
    if (results.hasMessages(Message.Level.ERROR)) {
      throw new IllegalStateException("There are errors in the scoreDrl's:\n" + results.toString());
    }
 else     if (results.hasMessages(Message.Level.WARNING)) {
      logger.warn("There are warning in the scoreDrl's:\n" + results.toString());
    }
    KieContainer kieContainer=kieServices.newKieContainer(kieBuilder.getKieModule().getReleaseId());
    KieBaseConfiguration kieBaseConfiguration=kieServices.newKieBaseConfiguration();
    if (kieBaseConfigurationProperties != null) {
      for (      Map.Entry<String,String> entry : kieBaseConfigurationProperties.entrySet()) {
        kieBaseConfiguration.setProperty(entry.getKey(),entry.getValue());
      }
    }
    kieBaseConfiguration.setOption(RuleEngineOption.PHREAK);
    KieBase kieBase=kieContainer.newKieBase(kieBaseConfiguration);
    return kieBase;
  }
}
