{
  super.phaseStarted(phaseScope);
  long originSize=originEntitySelector.getSize();
  if (originSize > (long)Integer.MAX_VALUE) {
    throw new IllegalStateException("The originEntitySelector (" + originEntitySelector + ") has an entitySize ("+ originSize+ ") which is higher than Integer.MAX_VALUE.");
  }
  long childSize=childEntitySelector.getSize();
  if (childSize > (long)Integer.MAX_VALUE) {
    throw new IllegalStateException("The childEntitySelector (" + childEntitySelector + ") has an entitySize ("+ childSize+ ") which is higher than Integer.MAX_VALUE.");
  }
  int destinationSize=(int)childSize;
  if (randomSelection) {
    int overallSizeMaximum=nearbyRandom.getOverallSizeMaximum();
    if (discardNearbyIndexZero) {
      overallSizeMaximum++;
    }
    if (destinationSize > overallSizeMaximum) {
      destinationSize=overallSizeMaximum;
    }
  }
  nearbyDistanceMatrix=new NearbyDistanceMatrix(nearbyDistanceMeter,(int)originSize);
  for (Iterator originIt=originEntitySelector.endingIterator(); originIt.hasNext(); ) {
    final Object origin=originIt.next();
    nearbyDistanceMatrix.addAllDestinations(origin,childEntitySelector.endingIterator(),destinationSize);
  }
}
