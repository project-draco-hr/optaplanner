{
  List<Period> periodList=examination.getPeriodList();
  List<Room> roomList=examination.getRoomList();
  List<Exam> examList=new ArrayList<Exam>(examination.getTopicList().size());
  List<ExamInitializationWeight> examInitialWeightList=createExamAssigningScoreList(examination);
  for (  ExamInitializationWeight examInitialWeight : examInitialWeightList) {
    Score unscheduledScore=scoreDirector.calculateScore();
    Exam leader=examInitialWeight.getExam();
    List<ExamToHandle> examToHandleList=new ArrayList<ExamToHandle>(5);
    if (leader.getExamCoincidence() == null) {
      examToHandleList.add(new ExamToHandle(leader));
    }
 else {
      for (      Exam coincidenceExam : leader.getExamCoincidence().getCoincidenceExamSet()) {
        examToHandleList.add(new ExamToHandle(coincidenceExam));
      }
    }
    List<PeriodScoring> periodScoringList=new ArrayList<PeriodScoring>(periodList.size());
    for (    Period period : periodList) {
      for (      ExamToHandle examToHandle : examToHandleList) {
        Exam exam=examToHandle.getExam();
        if (!examToHandle.isAdded()) {
          scoreDirector.beforeEntityAdded(exam);
          exam.setPeriod(period);
          scoreDirector.afterEntityAdded(exam);
          examToHandle.setAdded(true);
        }
 else {
          scoreDirector.beforeVariableChanged(exam,"period");
          exam.setPeriod(period);
          scoreDirector.afterVariableChanged(exam,"period");
        }
      }
      Score score=scoreDirector.calculateScore();
      periodScoringList.add(new PeriodScoring(period,score));
    }
    Collections.sort(periodScoringList);
    scheduleLeader(periodScoringList,roomList,scoreDirector,unscheduledScore,examToHandleList,leader);
    examList.add(leader);
    for (    ExamToHandle examToHandle : examToHandleList) {
      Exam exam=examToHandle.getExam();
      if (!exam.isCoincidenceLeader()) {
        scheduleNonLeader(roomList,scoreDirector,exam);
        examList.add(exam);
      }
    }
  }
  Collections.sort(examList,new PersistableIdComparator());
  examination.setExamList(examList);
}
